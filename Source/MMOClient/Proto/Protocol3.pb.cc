// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol3.proto

#include "Protocol3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PROTOCOL {
constexpr Position::Position(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(nullptr)
  , rotation_(nullptr)
  , velocity_(nullptr){}
struct PositionDefaultTypeInternal {
  constexpr PositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionDefaultTypeInternal _Position_default_instance_;
constexpr Stat::Stat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : level_(0)
  , totalexp_(0)
  , exp_(0)
  , maxhp_(0)
  , hp_(0)
  , damage_(0)
  , defence_(0)
  , speed_(0)
  , attackdistance_(0)
  , noticedistance_(0)
  , returndistance_(0)
  , attackcooltime_(0){}
struct StatDefaultTypeInternal {
  constexpr StatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatDefaultTypeInternal() {}
  union {
    Stat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatDefaultTypeInternal _Stat_default_instance_;
constexpr ObjectInfo::ObjectInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pos_(nullptr)
  , stat_(nullptr)
  , objectid_(0)
  , playerdbid_(0)
  , objecttype_(0)

  , typetemplateid_(0){}
struct ObjectInfoDefaultTypeInternal {
  constexpr ObjectInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectInfoDefaultTypeInternal() {}
  union {
    ObjectInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
constexpr LobbyPlayerInfo::LobbyPlayerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stat_(nullptr)
  , playerdbid_(0){}
struct LobbyPlayerInfoDefaultTypeInternal {
  constexpr LobbyPlayerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LobbyPlayerInfoDefaultTypeInternal() {}
  union {
    LobbyPlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LobbyPlayerInfoDefaultTypeInternal _LobbyPlayerInfo_default_instance_;
constexpr Skill::Skill(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : skillid_(0){}
struct SkillDefaultTypeInternal {
  constexpr SkillDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SkillDefaultTypeInternal() {}
  union {
    Skill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SkillDefaultTypeInternal _Skill_default_instance_;
constexpr ItemInfo::ItemInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemdbid_(0)
  , templateid_(0)
  , count_(0)
  , slot_(0)
  , equipped_(false)
  , playerdbid_(0){}
struct ItemInfoDefaultTypeInternal {
  constexpr ItemInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemInfoDefaultTypeInternal() {}
  union {
    ItemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemInfoDefaultTypeInternal _ItemInfo_default_instance_;
constexpr QuestInfo::QuestInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : questdbid_(0)
  , templateid_(0)
  , progress_(0)
  , completed_(false)
  , playerdbid_(0){}
struct QuestInfoDefaultTypeInternal {
  constexpr QuestInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuestInfoDefaultTypeInternal() {}
  union {
    QuestInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuestInfoDefaultTypeInternal _QuestInfo_default_instance_;
constexpr C_LOGIN::C_LOGIN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pw_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tokenstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct C_LOGINDefaultTypeInternal {
  constexpr C_LOGINDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_LOGINDefaultTypeInternal() {}
  union {
    C_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
constexpr S_LOGIN::S_LOGIN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objectinfos_()
  , lobbyplayerinfos_()
  , success_(false){}
struct S_LOGINDefaultTypeInternal {
  constexpr S_LOGINDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_LOGINDefaultTypeInternal() {}
  union {
    S_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
constexpr C_ENTER_ROOM::C_ENTER_ROOM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr)
  , roomnum_(uint64_t{0u})
  , isrespawn_(false){}
struct C_ENTER_ROOMDefaultTypeInternal {
  constexpr C_ENTER_ROOMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_ENTER_ROOMDefaultTypeInternal() {}
  union {
    C_ENTER_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_ENTER_ROOMDefaultTypeInternal _C_ENTER_ROOM_default_instance_;
constexpr S_ENTER_ROOM::S_ENTER_ROOM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , object_(nullptr)
  , success_(false){}
struct S_ENTER_ROOMDefaultTypeInternal {
  constexpr S_ENTER_ROOMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ENTER_ROOMDefaultTypeInternal() {}
  union {
    S_ENTER_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ENTER_ROOMDefaultTypeInternal _S_ENTER_ROOM_default_instance_;
constexpr C_LEAVE_ROOM::C_LEAVE_ROOM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr){}
struct C_LEAVE_ROOMDefaultTypeInternal {
  constexpr C_LEAVE_ROOMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_LEAVE_ROOMDefaultTypeInternal() {}
  union {
    C_LEAVE_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_LEAVE_ROOMDefaultTypeInternal _C_LEAVE_ROOM_default_instance_;
constexpr S_LEAVE_ROOM::S_LEAVE_ROOM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr)
  , success_(false){}
struct S_LEAVE_ROOMDefaultTypeInternal {
  constexpr S_LEAVE_ROOMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_LEAVE_ROOMDefaultTypeInternal() {}
  union {
    S_LEAVE_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_LEAVE_ROOMDefaultTypeInternal _S_LEAVE_ROOM_default_instance_;
constexpr C_SPAWN::C_SPAWN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr){}
struct C_SPAWNDefaultTypeInternal {
  constexpr C_SPAWNDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_SPAWNDefaultTypeInternal() {}
  union {
    C_SPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_SPAWNDefaultTypeInternal _C_SPAWN_default_instance_;
constexpr S_SPAWN::S_SPAWN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_()
  , success_(false){}
struct S_SPAWNDefaultTypeInternal {
  constexpr S_SPAWNDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_SPAWNDefaultTypeInternal() {}
  union {
    S_SPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_SPAWNDefaultTypeInternal _S_SPAWN_default_instance_;
constexpr C_DESPAWN::C_DESPAWN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct C_DESPAWNDefaultTypeInternal {
  constexpr C_DESPAWNDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_DESPAWNDefaultTypeInternal() {}
  union {
    C_DESPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_DESPAWNDefaultTypeInternal _C_DESPAWN_default_instance_;
constexpr S_DESPAWN::S_DESPAWN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objectids_()
  , _objectids_cached_byte_size_(0){}
struct S_DESPAWNDefaultTypeInternal {
  constexpr S_DESPAWNDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_DESPAWNDefaultTypeInternal() {}
  union {
    S_DESPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_DESPAWNDefaultTypeInternal _S_DESPAWN_default_instance_;
constexpr C_MOVE::C_MOVE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr){}
struct C_MOVEDefaultTypeInternal {
  constexpr C_MOVEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_MOVEDefaultTypeInternal() {}
  union {
    C_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
constexpr S_MOVE::S_MOVE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr){}
struct S_MOVEDefaultTypeInternal {
  constexpr S_MOVEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_MOVEDefaultTypeInternal() {}
  union {
    S_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_MOVEDefaultTypeInternal _S_MOVE_default_instance_;
constexpr C_SKILL::C_SKILL(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : victims_()
  , _victims_cached_byte_size_(0)
  , skillid_(0)
  , attacker_(0){}
struct C_SKILLDefaultTypeInternal {
  constexpr C_SKILLDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_SKILLDefaultTypeInternal() {}
  union {
    C_SKILL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_SKILLDefaultTypeInternal _C_SKILL_default_instance_;
constexpr S_SKILL::S_SKILL(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : victims_()
  , _victims_cached_byte_size_(0)
  , skillid_(0)
  , attacker_(0){}
struct S_SKILLDefaultTypeInternal {
  constexpr S_SKILLDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_SKILLDefaultTypeInternal() {}
  union {
    S_SKILL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_SKILLDefaultTypeInternal _S_SKILL_default_instance_;
constexpr C_CHAT::C_CHAT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct C_CHATDefaultTypeInternal {
  constexpr C_CHATDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_CHATDefaultTypeInternal() {}
  union {
    C_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
constexpr S_CHAT::S_CHAT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , object_(nullptr){}
struct S_CHATDefaultTypeInternal {
  constexpr S_CHATDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CHATDefaultTypeInternal() {}
  union {
    S_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
constexpr S_CHANGE_HP::S_CHANGE_HP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(0)
  , hp_(0){}
struct S_CHANGE_HPDefaultTypeInternal {
  constexpr S_CHANGE_HPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CHANGE_HPDefaultTypeInternal() {}
  union {
    S_CHANGE_HP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CHANGE_HPDefaultTypeInternal _S_CHANGE_HP_default_instance_;
constexpr S_DIE::S_DIE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : victim_(0)
  , attacker_(0){}
struct S_DIEDefaultTypeInternal {
  constexpr S_DIEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_DIEDefaultTypeInternal() {}
  union {
    S_DIE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_DIEDefaultTypeInternal _S_DIE_default_instance_;
constexpr S_ITEMLIST::S_ITEMLIST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct S_ITEMLISTDefaultTypeInternal {
  constexpr S_ITEMLISTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ITEMLISTDefaultTypeInternal() {}
  union {
    S_ITEMLIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ITEMLISTDefaultTypeInternal _S_ITEMLIST_default_instance_;
constexpr C_ADD_ITEM::C_ADD_ITEM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct C_ADD_ITEMDefaultTypeInternal {
  constexpr C_ADD_ITEMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_ADD_ITEMDefaultTypeInternal() {}
  union {
    C_ADD_ITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_ADD_ITEMDefaultTypeInternal _C_ADD_ITEM_default_instance_;
constexpr S_ADD_ITEM::S_ADD_ITEM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct S_ADD_ITEMDefaultTypeInternal {
  constexpr S_ADD_ITEMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ADD_ITEMDefaultTypeInternal() {}
  union {
    S_ADD_ITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ADD_ITEMDefaultTypeInternal _S_ADD_ITEM_default_instance_;
constexpr S_UPDATE_ITEM::S_UPDATE_ITEM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct S_UPDATE_ITEMDefaultTypeInternal {
  constexpr S_UPDATE_ITEMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_UPDATE_ITEMDefaultTypeInternal() {}
  union {
    S_UPDATE_ITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_UPDATE_ITEMDefaultTypeInternal _S_UPDATE_ITEM_default_instance_;
constexpr S_REMOVE_ITEM::S_REMOVE_ITEM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slots_()
  , _slots_cached_byte_size_(0){}
struct S_REMOVE_ITEMDefaultTypeInternal {
  constexpr S_REMOVE_ITEMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_REMOVE_ITEMDefaultTypeInternal() {}
  union {
    S_REMOVE_ITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_REMOVE_ITEMDefaultTypeInternal _S_REMOVE_ITEM_default_instance_;
constexpr C_EQUIP_ITEM::C_EQUIP_ITEM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemdbid_(0)
  , slot_(0)
  , equip_(false){}
struct C_EQUIP_ITEMDefaultTypeInternal {
  constexpr C_EQUIP_ITEMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_EQUIP_ITEMDefaultTypeInternal() {}
  union {
    C_EQUIP_ITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_EQUIP_ITEMDefaultTypeInternal _C_EQUIP_ITEM_default_instance_;
constexpr S_EQUIP_ITEM::S_EQUIP_ITEM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemdbid_(0)
  , slot_(0)
  , equip_(false){}
struct S_EQUIP_ITEMDefaultTypeInternal {
  constexpr S_EQUIP_ITEMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_EQUIP_ITEMDefaultTypeInternal() {}
  union {
    S_EQUIP_ITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_EQUIP_ITEMDefaultTypeInternal _S_EQUIP_ITEM_default_instance_;
constexpr C_USE_ITEM::C_USE_ITEM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemdbid_(0)
  , slot_(0)
  , use_(false){}
struct C_USE_ITEMDefaultTypeInternal {
  constexpr C_USE_ITEMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_USE_ITEMDefaultTypeInternal() {}
  union {
    C_USE_ITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_USE_ITEMDefaultTypeInternal _C_USE_ITEM_default_instance_;
constexpr S_USE_ITEM::S_USE_ITEM(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_(nullptr){}
struct S_USE_ITEMDefaultTypeInternal {
  constexpr S_USE_ITEMDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_USE_ITEMDefaultTypeInternal() {}
  union {
    S_USE_ITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_USE_ITEMDefaultTypeInternal _S_USE_ITEM_default_instance_;
constexpr S_CHANGE_STAT::S_CHANGE_STAT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr){}
struct S_CHANGE_STATDefaultTypeInternal {
  constexpr S_CHANGE_STATDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CHANGE_STATDefaultTypeInternal() {}
  union {
    S_CHANGE_STAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CHANGE_STATDefaultTypeInternal _S_CHANGE_STAT_default_instance_;
constexpr C_CREATE_PLAYER::C_CREATE_PLAYER(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct C_CREATE_PLAYERDefaultTypeInternal {
  constexpr C_CREATE_PLAYERDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_CREATE_PLAYERDefaultTypeInternal() {}
  union {
    C_CREATE_PLAYER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_CREATE_PLAYERDefaultTypeInternal _C_CREATE_PLAYER_default_instance_;
constexpr S_CREATE_PLAYER::S_CREATE_PLAYER(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr){}
struct S_CREATE_PLAYERDefaultTypeInternal {
  constexpr S_CREATE_PLAYERDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CREATE_PLAYERDefaultTypeInternal() {}
  union {
    S_CREATE_PLAYER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CREATE_PLAYERDefaultTypeInternal _S_CREATE_PLAYER_default_instance_;
constexpr S_ADD_EXP::S_ADD_EXP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exp_(0){}
struct S_ADD_EXPDefaultTypeInternal {
  constexpr S_ADD_EXPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ADD_EXPDefaultTypeInternal() {}
  union {
    S_ADD_EXP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ADD_EXPDefaultTypeInternal _S_ADD_EXP_default_instance_;
constexpr S_LEVEL_UP::S_LEVEL_UP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(nullptr){}
struct S_LEVEL_UPDefaultTypeInternal {
  constexpr S_LEVEL_UPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_LEVEL_UPDefaultTypeInternal() {}
  union {
    S_LEVEL_UP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_LEVEL_UPDefaultTypeInternal _S_LEVEL_UP_default_instance_;
constexpr C_ADD_QUEST::C_ADD_QUEST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quest_(nullptr){}
struct C_ADD_QUESTDefaultTypeInternal {
  constexpr C_ADD_QUESTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_ADD_QUESTDefaultTypeInternal() {}
  union {
    C_ADD_QUEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_ADD_QUESTDefaultTypeInternal _C_ADD_QUEST_default_instance_;
constexpr S_ADD_QUEST::S_ADD_QUEST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quest_(nullptr)
  , result_(false){}
struct S_ADD_QUESTDefaultTypeInternal {
  constexpr S_ADD_QUESTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ADD_QUESTDefaultTypeInternal() {}
  union {
    S_ADD_QUEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ADD_QUESTDefaultTypeInternal _S_ADD_QUEST_default_instance_;
constexpr S_QUESTLIST::S_QUESTLIST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quests_(){}
struct S_QUESTLISTDefaultTypeInternal {
  constexpr S_QUESTLISTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_QUESTLISTDefaultTypeInternal() {}
  union {
    S_QUESTLIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_QUESTLISTDefaultTypeInternal _S_QUESTLIST_default_instance_;
constexpr C_REMOVE_QUEST::C_REMOVE_QUEST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : questdbid_(0){}
struct C_REMOVE_QUESTDefaultTypeInternal {
  constexpr C_REMOVE_QUESTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_REMOVE_QUESTDefaultTypeInternal() {}
  union {
    C_REMOVE_QUEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_REMOVE_QUESTDefaultTypeInternal _C_REMOVE_QUEST_default_instance_;
constexpr S_REMOVE_QUEST::S_REMOVE_QUEST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(false)
  , questid_(0){}
struct S_REMOVE_QUESTDefaultTypeInternal {
  constexpr S_REMOVE_QUESTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_REMOVE_QUESTDefaultTypeInternal() {}
  union {
    S_REMOVE_QUEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_REMOVE_QUESTDefaultTypeInternal _S_REMOVE_QUEST_default_instance_;
constexpr C_COMPLETE_QUEST::C_COMPLETE_QUEST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : questdbid_(0){}
struct C_COMPLETE_QUESTDefaultTypeInternal {
  constexpr C_COMPLETE_QUESTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_COMPLETE_QUESTDefaultTypeInternal() {}
  union {
    C_COMPLETE_QUEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_COMPLETE_QUESTDefaultTypeInternal _C_COMPLETE_QUEST_default_instance_;
constexpr S_COMPLETE_QUEST::S_COMPLETE_QUEST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(false)
  , questid_(0){}
struct S_COMPLETE_QUESTDefaultTypeInternal {
  constexpr S_COMPLETE_QUESTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_COMPLETE_QUESTDefaultTypeInternal() {}
  union {
    S_COMPLETE_QUEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_COMPLETE_QUESTDefaultTypeInternal _S_COMPLETE_QUEST_default_instance_;
constexpr C_UPDATE_QUEST::C_UPDATE_QUEST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : questinfo_(nullptr)
  , objectid_(0){}
struct C_UPDATE_QUESTDefaultTypeInternal {
  constexpr C_UPDATE_QUESTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_UPDATE_QUESTDefaultTypeInternal() {}
  union {
    C_UPDATE_QUEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_UPDATE_QUESTDefaultTypeInternal _C_UPDATE_QUEST_default_instance_;
constexpr S_UPDATE_QUEST::S_UPDATE_QUEST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : questinfo_(nullptr){}
struct S_UPDATE_QUESTDefaultTypeInternal {
  constexpr S_UPDATE_QUESTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_UPDATE_QUESTDefaultTypeInternal() {}
  union {
    S_UPDATE_QUEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_UPDATE_QUESTDefaultTypeInternal _S_UPDATE_QUEST_default_instance_;
constexpr C_TEST::C_TEST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : testint_(0)
  , testbool_(false){}
struct C_TESTDefaultTypeInternal {
  constexpr C_TESTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_TESTDefaultTypeInternal() {}
  union {
    C_TEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_TESTDefaultTypeInternal _C_TEST_default_instance_;
constexpr S_TEST::S_TEST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : testint_(0)
  , testbool_(false){}
struct S_TESTDefaultTypeInternal {
  constexpr S_TESTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_TESTDefaultTypeInternal() {}
  union {
    S_TEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_TESTDefaultTypeInternal _S_TEST_default_instance_;
constexpr C_BOT_LOGIN::C_BOT_LOGIN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : test_(false){}
struct C_BOT_LOGINDefaultTypeInternal {
  constexpr C_BOT_LOGINDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_BOT_LOGINDefaultTypeInternal() {}
  union {
    C_BOT_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_BOT_LOGINDefaultTypeInternal _C_BOT_LOGIN_default_instance_;
constexpr PFVector::PFVector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct PFVectorDefaultTypeInternal {
  constexpr PFVectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PFVectorDefaultTypeInternal() {}
  union {
    PFVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PFVectorDefaultTypeInternal _PFVector_default_instance_;
constexpr AI_C_PATHFIND::AI_C_PATHFIND(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sp_(nullptr)
  , ep_(nullptr)
  , monsterid_(0)
  , mapid_(0)
  , random_(false)
  , radius_(0){}
struct AI_C_PATHFINDDefaultTypeInternal {
  constexpr AI_C_PATHFINDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AI_C_PATHFINDDefaultTypeInternal() {}
  union {
    AI_C_PATHFIND _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AI_C_PATHFINDDefaultTypeInternal _AI_C_PATHFIND_default_instance_;
constexpr AI_S_PATHFIND::AI_S_PATHFIND(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paths_()
  , monsterid_(0)
  , result_(false){}
struct AI_S_PATHFINDDefaultTypeInternal {
  constexpr AI_S_PATHFINDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AI_S_PATHFINDDefaultTypeInternal() {}
  union {
    AI_S_PATHFIND _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AI_S_PATHFINDDefaultTypeInternal _AI_S_PATHFIND_default_instance_;
}  // namespace PROTOCOL
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Protocol3_2eproto[54];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Protocol3_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Protocol3_2eproto = nullptr;

const uint32_t TableStruct_Protocol3_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Position, location_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Position, rotation_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Position, velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, level_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, totalexp_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, exp_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, maxhp_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, hp_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, damage_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, defence_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, speed_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, attackdistance_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, noticedistance_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, returndistance_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, attackcooltime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ObjectInfo, objectid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ObjectInfo, playerdbid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ObjectInfo, name_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ObjectInfo, objecttype_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ObjectInfo, typetemplateid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ObjectInfo, pos_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ObjectInfo, stat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::LobbyPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::LobbyPlayerInfo, playerdbid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::LobbyPlayerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::LobbyPlayerInfo, stat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Skill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Skill, skillid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ItemInfo, itemdbid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ItemInfo, templateid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ItemInfo, count_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ItemInfo, slot_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ItemInfo, equipped_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ItemInfo, playerdbid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::QuestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::QuestInfo, questdbid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::QuestInfo, templateid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::QuestInfo, progress_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::QuestInfo, completed_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::QuestInfo, playerdbid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_LOGIN, id_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_LOGIN, pw_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_LOGIN, tokenstring_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_LOGIN, success_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_LOGIN, objectinfos_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_LOGIN, lobbyplayerinfos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_ENTER_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_ENTER_ROOM, roomnum_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_ENTER_ROOM, object_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_ENTER_ROOM, isrespawn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ENTER_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ENTER_ROOM, success_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ENTER_ROOM, object_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ENTER_ROOM, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_LEAVE_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_LEAVE_ROOM, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_LEAVE_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_LEAVE_ROOM, success_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_LEAVE_ROOM, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_SPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_SPAWN, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_SPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_SPAWN, success_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_SPAWN, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_DESPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_DESPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_DESPAWN, objectids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_MOVE, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_MOVE, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_SKILL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_SKILL, skillid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_SKILL, attacker_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_SKILL, victims_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_SKILL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_SKILL, skillid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_SKILL, attacker_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_SKILL, victims_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_CHAT, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_CHAT, object_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_CHAT, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_CHANGE_HP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_CHANGE_HP, object_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_CHANGE_HP, hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_DIE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_DIE, victim_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_DIE, attacker_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ITEMLIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ITEMLIST, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_ADD_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_ADD_ITEM, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ADD_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ADD_ITEM, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_UPDATE_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_UPDATE_ITEM, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_REMOVE_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_REMOVE_ITEM, slots_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_EQUIP_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_EQUIP_ITEM, itemdbid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_EQUIP_ITEM, slot_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_EQUIP_ITEM, equip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_EQUIP_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_EQUIP_ITEM, itemdbid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_EQUIP_ITEM, slot_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_EQUIP_ITEM, equip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_USE_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_USE_ITEM, itemdbid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_USE_ITEM, slot_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_USE_ITEM, use_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_USE_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_USE_ITEM, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_CHANGE_STAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_CHANGE_STAT, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_CREATE_PLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_CREATE_PLAYER, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_CREATE_PLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_CREATE_PLAYER, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ADD_EXP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ADD_EXP, exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_LEVEL_UP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_LEVEL_UP, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_ADD_QUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_ADD_QUEST, quest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ADD_QUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ADD_QUEST, result_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ADD_QUEST, quest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_QUESTLIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_QUESTLIST, quests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_REMOVE_QUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_REMOVE_QUEST, questdbid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_REMOVE_QUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_REMOVE_QUEST, result_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_REMOVE_QUEST, questid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_COMPLETE_QUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_COMPLETE_QUEST, questdbid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_COMPLETE_QUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_COMPLETE_QUEST, result_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_COMPLETE_QUEST, questid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_UPDATE_QUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_UPDATE_QUEST, questinfo_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_UPDATE_QUEST, objectid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_UPDATE_QUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_UPDATE_QUEST, questinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_TEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_TEST, testint_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_TEST, testbool_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_TEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_TEST, testint_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_TEST, testbool_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_BOT_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_BOT_LOGIN, test_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::PFVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::PFVector, x_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::PFVector, y_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::PFVector, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::AI_C_PATHFIND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::AI_C_PATHFIND, monsterid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::AI_C_PATHFIND, mapid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::AI_C_PATHFIND, sp_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::AI_C_PATHFIND, ep_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::AI_C_PATHFIND, random_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::AI_C_PATHFIND, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::AI_S_PATHFIND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::AI_S_PATHFIND, monsterid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::AI_S_PATHFIND, result_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::AI_S_PATHFIND, paths_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PROTOCOL::Position)},
  { 9, -1, -1, sizeof(::PROTOCOL::Stat)},
  { 27, -1, -1, sizeof(::PROTOCOL::ObjectInfo)},
  { 40, -1, -1, sizeof(::PROTOCOL::LobbyPlayerInfo)},
  { 49, -1, -1, sizeof(::PROTOCOL::Skill)},
  { 56, -1, -1, sizeof(::PROTOCOL::ItemInfo)},
  { 68, -1, -1, sizeof(::PROTOCOL::QuestInfo)},
  { 79, -1, -1, sizeof(::PROTOCOL::C_LOGIN)},
  { 88, -1, -1, sizeof(::PROTOCOL::S_LOGIN)},
  { 97, -1, -1, sizeof(::PROTOCOL::C_ENTER_ROOM)},
  { 106, -1, -1, sizeof(::PROTOCOL::S_ENTER_ROOM)},
  { 115, -1, -1, sizeof(::PROTOCOL::C_LEAVE_ROOM)},
  { 122, -1, -1, sizeof(::PROTOCOL::S_LEAVE_ROOM)},
  { 130, -1, -1, sizeof(::PROTOCOL::C_SPAWN)},
  { 137, -1, -1, sizeof(::PROTOCOL::S_SPAWN)},
  { 145, -1, -1, sizeof(::PROTOCOL::C_DESPAWN)},
  { 151, -1, -1, sizeof(::PROTOCOL::S_DESPAWN)},
  { 158, -1, -1, sizeof(::PROTOCOL::C_MOVE)},
  { 165, -1, -1, sizeof(::PROTOCOL::S_MOVE)},
  { 172, -1, -1, sizeof(::PROTOCOL::C_SKILL)},
  { 181, -1, -1, sizeof(::PROTOCOL::S_SKILL)},
  { 190, -1, -1, sizeof(::PROTOCOL::C_CHAT)},
  { 197, -1, -1, sizeof(::PROTOCOL::S_CHAT)},
  { 205, -1, -1, sizeof(::PROTOCOL::S_CHANGE_HP)},
  { 213, -1, -1, sizeof(::PROTOCOL::S_DIE)},
  { 221, -1, -1, sizeof(::PROTOCOL::S_ITEMLIST)},
  { 228, -1, -1, sizeof(::PROTOCOL::C_ADD_ITEM)},
  { 235, -1, -1, sizeof(::PROTOCOL::S_ADD_ITEM)},
  { 242, -1, -1, sizeof(::PROTOCOL::S_UPDATE_ITEM)},
  { 249, -1, -1, sizeof(::PROTOCOL::S_REMOVE_ITEM)},
  { 256, -1, -1, sizeof(::PROTOCOL::C_EQUIP_ITEM)},
  { 265, -1, -1, sizeof(::PROTOCOL::S_EQUIP_ITEM)},
  { 274, -1, -1, sizeof(::PROTOCOL::C_USE_ITEM)},
  { 283, -1, -1, sizeof(::PROTOCOL::S_USE_ITEM)},
  { 290, -1, -1, sizeof(::PROTOCOL::S_CHANGE_STAT)},
  { 297, -1, -1, sizeof(::PROTOCOL::C_CREATE_PLAYER)},
  { 304, -1, -1, sizeof(::PROTOCOL::S_CREATE_PLAYER)},
  { 311, -1, -1, sizeof(::PROTOCOL::S_ADD_EXP)},
  { 318, -1, -1, sizeof(::PROTOCOL::S_LEVEL_UP)},
  { 325, -1, -1, sizeof(::PROTOCOL::C_ADD_QUEST)},
  { 332, -1, -1, sizeof(::PROTOCOL::S_ADD_QUEST)},
  { 340, -1, -1, sizeof(::PROTOCOL::S_QUESTLIST)},
  { 347, -1, -1, sizeof(::PROTOCOL::C_REMOVE_QUEST)},
  { 354, -1, -1, sizeof(::PROTOCOL::S_REMOVE_QUEST)},
  { 362, -1, -1, sizeof(::PROTOCOL::C_COMPLETE_QUEST)},
  { 369, -1, -1, sizeof(::PROTOCOL::S_COMPLETE_QUEST)},
  { 377, -1, -1, sizeof(::PROTOCOL::C_UPDATE_QUEST)},
  { 385, -1, -1, sizeof(::PROTOCOL::S_UPDATE_QUEST)},
  { 392, -1, -1, sizeof(::PROTOCOL::C_TEST)},
  { 400, -1, -1, sizeof(::PROTOCOL::S_TEST)},
  { 408, -1, -1, sizeof(::PROTOCOL::C_BOT_LOGIN)},
  { 415, -1, -1, sizeof(::PROTOCOL::PFVector)},
  { 424, -1, -1, sizeof(::PROTOCOL::AI_C_PATHFIND)},
  { 436, -1, -1, sizeof(::PROTOCOL::AI_S_PATHFIND)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_Stat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_ObjectInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_LobbyPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_Skill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_ItemInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_QuestInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_ENTER_ROOM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_ENTER_ROOM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_LEAVE_ROOM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_LEAVE_ROOM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_SPAWN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_SPAWN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_DESPAWN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_DESPAWN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_MOVE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_MOVE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_SKILL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_SKILL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_CHAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_CHAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_CHANGE_HP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_DIE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_ITEMLIST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_ADD_ITEM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_ADD_ITEM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_UPDATE_ITEM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_REMOVE_ITEM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_EQUIP_ITEM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_EQUIP_ITEM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_USE_ITEM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_USE_ITEM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_CHANGE_STAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_CREATE_PLAYER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_CREATE_PLAYER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_ADD_EXP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_LEVEL_UP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_ADD_QUEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_ADD_QUEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_QUESTLIST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_REMOVE_QUEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_REMOVE_QUEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_COMPLETE_QUEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_COMPLETE_QUEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_UPDATE_QUEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_UPDATE_QUEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_TEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_TEST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_BOT_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_PFVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_AI_C_PATHFIND_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_AI_S_PATHFIND_default_instance_),
};

const char descriptor_table_protodef_Protocol3_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017Protocol3.proto\022\010PROTOCOL\"|\n\010Position\022"
  "$\n\010location\030\001 \001(\0132\022.PROTOCOL.PFVector\022$\n"
  "\010rotation\030\002 \001(\0132\022.PROTOCOL.PFVector\022$\n\010v"
  "elocity\030\003 \001(\0132\022.PROTOCOL.PFVector\"\337\001\n\004St"
  "at\022\r\n\005level\030\001 \001(\005\022\020\n\010totalExp\030\002 \001(\005\022\013\n\003e"
  "xp\030\003 \001(\005\022\r\n\005maxhp\030\004 \001(\005\022\n\n\002hp\030\005 \001(\005\022\016\n\006d"
  "amage\030\006 \001(\005\022\017\n\007defence\030\007 \001(\005\022\r\n\005speed\030\010 "
  "\001(\002\022\026\n\016attackdistance\030\t \001(\002\022\026\n\016noticedis"
  "tance\030\n \001(\002\022\026\n\016returndistance\030\013 \001(\002\022\026\n\016a"
  "ttackcooltime\030\014 \001(\002\"\305\001\n\nObjectInfo\022\020\n\010ob"
  "jectId\030\001 \001(\005\022\022\n\nplayerdbid\030\002 \001(\005\022\014\n\004name"
  "\030\003 \001(\t\022,\n\nobjecttype\030\004 \001(\0162\030.PROTOCOL.Ga"
  "meObjectType\022\026\n\016typetemplateid\030\005 \001(\005\022\037\n\003"
  "pos\030\006 \001(\0132\022.PROTOCOL.Position\022\034\n\004stat\030\007 "
  "\001(\0132\016.PROTOCOL.Stat\"Q\n\017LobbyPlayerInfo\022\022"
  "\n\nplayerdbid\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\034\n\004stat"
  "\030\003 \001(\0132\016.PROTOCOL.Stat\"\030\n\005Skill\022\017\n\007skill"
  "Id\030\001 \001(\005\"s\n\010ItemInfo\022\020\n\010itemDbId\030\001 \001(\005\022\022"
  "\n\ntemplateId\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\022\014\n\004slo"
  "t\030\004 \001(\005\022\020\n\010equipped\030\005 \001(\010\022\022\n\nplayerdbid\030"
  "\006 \001(\005\"k\n\tQuestInfo\022\021\n\tquestdbid\030\001 \001(\005\022\022\n"
  "\ntemplateid\030\002 \001(\005\022\020\n\010progress\030\003 \001(\005\022\021\n\tc"
  "ompleted\030\004 \001(\010\022\022\n\nplayerdbid\030\005 \001(\005\"6\n\007C_"
  "LOGIN\022\n\n\002id\030\001 \001(\t\022\n\n\002pw\030\002 \001(\t\022\023\n\013tokenst"
  "ring\030\003 \001(\t\"z\n\007S_LOGIN\022\017\n\007success\030\001 \001(\010\022)"
  "\n\013objectinfos\030\002 \003(\0132\024.PROTOCOL.ObjectInf"
  "o\0223\n\020lobbyplayerinfos\030\003 \003(\0132\031.PROTOCOL.L"
  "obbyPlayerInfo\"X\n\014C_ENTER_ROOM\022\017\n\007roomNu"
  "m\030\001 \001(\004\022$\n\006object\030\002 \001(\0132\024.PROTOCOL.Objec"
  "tInfo\022\021\n\tisrespawn\030\003 \001(\010\"h\n\014S_ENTER_ROOM"
  "\022\017\n\007success\030\001 \001(\010\022$\n\006object\030\002 \001(\0132\024.PROT"
  "OCOL.ObjectInfo\022!\n\005items\030\003 \003(\0132\022.PROTOCO"
  "L.ItemInfo\"4\n\014C_LEAVE_ROOM\022$\n\006object\030\001 \001"
  "(\0132\024.PROTOCOL.ObjectInfo\"E\n\014S_LEAVE_ROOM"
  "\022\017\n\007success\030\001 \001(\010\022$\n\006object\030\002 \001(\0132\024.PROT"
  "OCOL.ObjectInfo\"/\n\007C_SPAWN\022$\n\006object\030\001 \001"
  "(\0132\024.PROTOCOL.ObjectInfo\"@\n\007S_SPAWN\022\017\n\007s"
  "uccess\030\001 \001(\010\022$\n\006object\030\002 \003(\0132\024.PROTOCOL."
  "ObjectInfo\"\013\n\tC_DESPAWN\"\036\n\tS_DESPAWN\022\021\n\t"
  "objectids\030\001 \003(\005\".\n\006C_MOVE\022$\n\006object\030\001 \001("
  "\0132\024.PROTOCOL.ObjectInfo\".\n\006S_MOVE\022$\n\006obj"
  "ect\030\001 \001(\0132\024.PROTOCOL.ObjectInfo\"=\n\007C_SKI"
  "LL\022\017\n\007skillid\030\001 \001(\005\022\020\n\010attacker\030\002 \001(\005\022\017\n"
  "\007victims\030\003 \003(\005\"=\n\007S_SKILL\022\017\n\007skillid\030\001 \001"
  "(\005\022\020\n\010attacker\030\002 \001(\005\022\017\n\007victims\030\003 \003(\005\"\026\n"
  "\006C_CHAT\022\014\n\004text\030\001 \001(\t\"<\n\006S_CHAT\022$\n\006objec"
  "t\030\001 \001(\0132\024.PROTOCOL.ObjectInfo\022\014\n\004text\030\002 "
  "\001(\t\")\n\013S_CHANGE_HP\022\016\n\006object\030\001 \001(\005\022\n\n\002hp"
  "\030\002 \001(\005\")\n\005S_DIE\022\016\n\006victim\030\001 \001(\005\022\020\n\010attac"
  "ker\030\002 \001(\005\"/\n\nS_ITEMLIST\022!\n\005items\030\001 \003(\0132\022"
  ".PROTOCOL.ItemInfo\"/\n\nC_ADD_ITEM\022!\n\005item"
  "s\030\001 \003(\0132\022.PROTOCOL.ItemInfo\"/\n\nS_ADD_ITE"
  "M\022!\n\005items\030\001 \003(\0132\022.PROTOCOL.ItemInfo\"2\n\r"
  "S_UPDATE_ITEM\022!\n\005items\030\001 \003(\0132\022.PROTOCOL."
  "ItemInfo\"\036\n\rS_REMOVE_ITEM\022\r\n\005slots\030\001 \003(\005"
  "\"=\n\014C_EQUIP_ITEM\022\020\n\010itemdbid\030\001 \001(\005\022\014\n\004sl"
  "ot\030\002 \001(\005\022\r\n\005equip\030\003 \001(\010\"=\n\014S_EQUIP_ITEM\022"
  "\020\n\010itemdbid\030\001 \001(\005\022\014\n\004slot\030\002 \001(\005\022\r\n\005equip"
  "\030\003 \001(\010\"9\n\nC_USE_ITEM\022\020\n\010itemdbid\030\001 \001(\005\022\014"
  "\n\004slot\030\002 \001(\005\022\013\n\003use\030\003 \001(\010\".\n\nS_USE_ITEM\022"
  " \n\004item\030\001 \001(\0132\022.PROTOCOL.ItemInfo\"5\n\rS_C"
  "HANGE_STAT\022$\n\006object\030\001 \001(\0132\024.PROTOCOL.Ob"
  "jectInfo\"\037\n\017C_CREATE_PLAYER\022\014\n\004name\030\001 \001("
  "\t\"7\n\017S_CREATE_PLAYER\022$\n\006object\030\001 \001(\0132\024.P"
  "ROTOCOL.ObjectInfo\"\030\n\tS_ADD_EXP\022\013\n\003exp\030\001"
  " \001(\005\"0\n\nS_LEVEL_UP\022\"\n\004info\030\001 \001(\0132\024.PROTO"
  "COL.ObjectInfo\"1\n\013C_ADD_QUEST\022\"\n\005quest\030\001"
  " \001(\0132\023.PROTOCOL.QuestInfo\"A\n\013S_ADD_QUEST"
  "\022\016\n\006result\030\001 \001(\010\022\"\n\005quest\030\002 \001(\0132\023.PROTOC"
  "OL.QuestInfo\"2\n\013S_QUESTLIST\022#\n\006quests\030\001 "
  "\003(\0132\023.PROTOCOL.QuestInfo\"#\n\016C_REMOVE_QUE"
  "ST\022\021\n\tquestdbid\030\001 \001(\005\"1\n\016S_REMOVE_QUEST\022"
  "\016\n\006result\030\001 \001(\010\022\017\n\007questid\030\002 \001(\005\"%\n\020C_CO"
  "MPLETE_QUEST\022\021\n\tquestdbid\030\001 \001(\005\"3\n\020S_COM"
  "PLETE_QUEST\022\016\n\006result\030\001 \001(\010\022\017\n\007questid\030\002"
  " \001(\005\"J\n\016C_UPDATE_QUEST\022&\n\tquestinfo\030\001 \001("
  "\0132\023.PROTOCOL.QuestInfo\022\020\n\010objectid\030\002 \001(\005"
  "\"8\n\016S_UPDATE_QUEST\022&\n\tquestInfo\030\001 \001(\0132\023."
  "PROTOCOL.QuestInfo\"+\n\006C_TEST\022\017\n\007testint\030"
  "\001 \001(\005\022\020\n\010testbool\030\002 \001(\010\"+\n\006S_TEST\022\017\n\007tes"
  "tint\030\001 \001(\005\022\020\n\010testbool\030\002 \001(\010\"\033\n\013C_BOT_LO"
  "GIN\022\014\n\004test\030\001 \001(\010\"+\n\010PFVector\022\t\n\001x\030\001 \001(\002"
  "\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\221\001\n\rAI_C_PATHFIND"
  "\022\021\n\tmonsterid\030\001 \001(\005\022\r\n\005mapid\030\002 \001(\005\022\036\n\002sp"
  "\030\003 \001(\0132\022.PROTOCOL.PFVector\022\036\n\002ep\030\004 \001(\0132\022"
  ".PROTOCOL.PFVector\022\016\n\006random\030\005 \001(\010\022\016\n\006ra"
  "dius\030\006 \001(\002\"U\n\rAI_S_PATHFIND\022\021\n\tmonsterid"
  "\030\001 \001(\005\022\016\n\006result\030\002 \001(\010\022!\n\005paths\030\003 \003(\0132\022."
  "PROTOCOL.PFVector*\373\005\n\005MsgId\022\013\n\007c_login\020\000"
  "\022\013\n\007s_login\020\001\022\020\n\014c_enter_room\020\002\022\020\n\014s_ent"
  "er_room\020\003\022\020\n\014c_leave_room\020\004\022\020\n\014s_leave_r"
  "oom\020\005\022\013\n\007c_spawn\020\006\022\013\n\007s_spawn\020\007\022\r\n\tc_des"
  "pawn\020\010\022\r\n\ts_despawn\020\t\022\n\n\006c_move\020\n\022\n\n\006s_m"
  "ove\020\013\022\013\n\007c_skill\020\014\022\013\n\007s_skill\020\r\022\n\n\006c_cha"
  "t\020\016\022\n\n\006s_chat\020\017\022\017\n\013s_change_hp\020\020\022\t\n\005s_di"
  "e\020\021\022\016\n\ns_itemlist\020\022\022\016\n\nc_add_item\020\023\022\016\n\ns"
  "_add_item\020\024\022\021\n\rs_update_item\020\025\022\021\n\rs_remo"
  "ve_item\020\026\022\020\n\014c_equip_item\020\027\022\020\n\014s_equip_i"
  "tem\020\030\022\016\n\nc_use_item\020\031\022\016\n\ns_use_item\020\032\022\021\n"
  "\rs_change_stat\020\033\022\023\n\017c_create_player\020\034\022\023\n"
  "\017s_create_player\020\035\022\r\n\ts_add_exp\020\036\022\016\n\ns_l"
  "evel_up\020\037\022\017\n\013c_add_quest\020 \022\017\n\013s_add_ques"
  "t\020!\022\017\n\013s_questlist\020\"\022\022\n\016c_remove_quest\020#"
  "\022\022\n\016s_remove_quest\020$\022\024\n\020c_complete_quest"
  "\020%\022\024\n\020s_complete_quest\020&\022\022\n\016c_update_que"
  "st\020\'\022\022\n\016s_update_quest\020(\022\n\n\006c_test\020)\022\n\n\006"
  "s_test\020*\022\017\n\013c_bot_login\020+\022\021\n\rai_c_pathfi"
  "nd\020d\022\021\n\rai_s_pathfind\020e*\215\001\n\021PlayerServer"
  "State\022\025\n\021SERVER_STATE_NONE\020\000\022\032\n\026SERVER_S"
  "TATE_CONNECTED\020\001\022\026\n\022SERVER_STATE_LOGIN\020\002"
  "\022\026\n\022SERVER_STATE_LOBBY\020\003\022\025\n\021SERVER_STATE"
  "_GAME\020\004*X\n\016GameObjectType\022\010\n\004NONE\020\000\022\n\n\006P"
  "LAYER\020\001\022\013\n\007MONSTER\020\002\022\016\n\nPROJECTILE\020\003\022\007\n\003"
  "NPC\020\004\022\n\n\006Object\020\005*B\n\tSkillType\022\016\n\nSKILL_"
  "NONE\020\000\022\016\n\nSKILL_AUTO\020\001\022\025\n\021SKILL_PROJECTT"
  "ILE\020\002*c\n\010ItemType\022\022\n\016ITEM_TYPE_NONE\020\000\022\024\n"
  "\020ITEM_TYPE_WEAPON\020\001\022\023\n\017ITEM_TYPE_ARMOR\020\002"
  "\022\030\n\024ITEM_TYPE_CONSUMABLE\020\003*N\n\nWeaponType"
  "\022\024\n\020WEAPON_TYPE_NONE\020\000\022\025\n\021WEAPON_TYPE_SW"
  "ORD\020\001\022\023\n\017WEAPON_TYPE_AXE\020\002*M\n\tArmorType\022"
  "\023\n\017ARMOR_TYPE_NONE\020\000\022\025\n\021ARMOR_TYPE_HELME"
  "T\020\001\022\024\n\020ARMOR_TYPE_ARMOR\020\002*h\n\016ConsumableT"
  "ype\022\030\n\024CONSUMABLE_TYPE_NONE\020\000\022\035\n\031CONSUMA"
  "BLE_TYPE_HP_POTION\020\001\022\035\n\031CONSUMABLE_TYPE_"
  "MP_POTION\020\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Protocol3_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol3_2eproto = {
  false, false, 4979, descriptor_table_protodef_Protocol3_2eproto, "Protocol3.proto", 
  &descriptor_table_Protocol3_2eproto_once, nullptr, 0, 54,
  schemas, file_default_instances, TableStruct_Protocol3_2eproto::offsets,
  file_level_metadata_Protocol3_2eproto, file_level_enum_descriptors_Protocol3_2eproto, file_level_service_descriptors_Protocol3_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Protocol3_2eproto_getter() {
  return &descriptor_table_Protocol3_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Protocol3_2eproto(&descriptor_table_Protocol3_2eproto);
namespace PROTOCOL {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol3_2eproto);
  return file_level_enum_descriptors_Protocol3_2eproto[0];
}
bool MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerServerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol3_2eproto);
  return file_level_enum_descriptors_Protocol3_2eproto[1];
}
bool PlayerServerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol3_2eproto);
  return file_level_enum_descriptors_Protocol3_2eproto[2];
}
bool GameObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SkillType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol3_2eproto);
  return file_level_enum_descriptors_Protocol3_2eproto[3];
}
bool SkillType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol3_2eproto);
  return file_level_enum_descriptors_Protocol3_2eproto[4];
}
bool ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WeaponType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol3_2eproto);
  return file_level_enum_descriptors_Protocol3_2eproto[5];
}
bool WeaponType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArmorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol3_2eproto);
  return file_level_enum_descriptors_Protocol3_2eproto[6];
}
bool ArmorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsumableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol3_2eproto);
  return file_level_enum_descriptors_Protocol3_2eproto[7];
}
bool ConsumableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Position::_Internal {
 public:
  static const ::PROTOCOL::PFVector& location(const Position* msg);
  static const ::PROTOCOL::PFVector& rotation(const Position* msg);
  static const ::PROTOCOL::PFVector& velocity(const Position* msg);
};

const ::PROTOCOL::PFVector&
Position::_Internal::location(const Position* msg) {
  return *msg->location_;
}
const ::PROTOCOL::PFVector&
Position::_Internal::rotation(const Position* msg) {
  return *msg->rotation_;
}
const ::PROTOCOL::PFVector&
Position::_Internal::velocity(const Position* msg) {
  return *msg->velocity_;
}
Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::PROTOCOL::PFVector(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::PROTOCOL::PFVector(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::PROTOCOL::PFVector(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.Position)
}

inline void Position::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&velocity_) -
    reinterpret_cast<char*>(&location_)) + sizeof(velocity_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:PROTOCOL.Position)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete velocity_;
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.PFVector location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.PFVector rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.PFVector velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.PFVector location = 1;
  if (this->_internal_has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location(this), target, stream);
  }

  // .PROTOCOL.PFVector rotation = 2;
  if (this->_internal_has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rotation(this), target, stream);
  }

  // .PROTOCOL.PFVector velocity = 3;
  if (this->_internal_has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::velocity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.PFVector location = 1;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .PROTOCOL.PFVector rotation = 2;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // .PROTOCOL.PFVector velocity = 3;
  if (this->_internal_has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }

void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Position *>(to)->MergeFrom(
      static_cast<const Position &>(from));
}


void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.Position)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_location()) {
    _internal_mutable_location()->::PROTOCOL::PFVector::MergeFrom(from._internal_location());
  }
  if (from._internal_has_rotation()) {
    _internal_mutable_rotation()->::PROTOCOL::PFVector::MergeFrom(from._internal_rotation());
  }
  if (from._internal_has_velocity()) {
    _internal_mutable_velocity()->::PROTOCOL::PFVector::MergeFrom(from._internal_velocity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, velocity_)
      + sizeof(Position::velocity_)
      - PROTOBUF_FIELD_OFFSET(Position, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[0]);
}

// ===================================================================

class Stat::_Internal {
 public:
};

Stat::Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.Stat)
}
Stat::Stat(const Stat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&attackcooltime_) -
    reinterpret_cast<char*>(&level_)) + sizeof(attackcooltime_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.Stat)
}

inline void Stat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attackcooltime_) -
    reinterpret_cast<char*>(&level_)) + sizeof(attackcooltime_));
}

Stat::~Stat() {
  // @@protoc_insertion_point(destructor:PROTOCOL.Stat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Stat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Stat::ArenaDtor(void* object) {
  Stat* _this = reinterpret_cast< Stat* >(object);
  (void)_this;
}
void Stat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.Stat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attackcooltime_) -
      reinterpret_cast<char*>(&level_)) + sizeof(attackcooltime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 totalExp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          totalexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 exp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxhp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 damage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 defence = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          defence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float attackdistance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          attackdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float noticedistance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          noticedistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float returndistance = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          returndistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float attackcooltime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          attackcooltime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.Stat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // int32 totalExp = 2;
  if (this->_internal_totalexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_totalexp(), target);
  }

  // int32 exp = 3;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_exp(), target);
  }

  // int32 maxhp = 4;
  if (this->_internal_maxhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_maxhp(), target);
  }

  // int32 hp = 5;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_hp(), target);
  }

  // int32 damage = 6;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_damage(), target);
  }

  // int32 defence = 7;
  if (this->_internal_defence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_defence(), target);
  }

  // float speed = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_speed(), target);
  }

  // float attackdistance = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdistance = this->_internal_attackdistance();
  uint32_t raw_attackdistance;
  memcpy(&raw_attackdistance, &tmp_attackdistance, sizeof(tmp_attackdistance));
  if (raw_attackdistance != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_attackdistance(), target);
  }

  // float noticedistance = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_noticedistance = this->_internal_noticedistance();
  uint32_t raw_noticedistance;
  memcpy(&raw_noticedistance, &tmp_noticedistance, sizeof(tmp_noticedistance));
  if (raw_noticedistance != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_noticedistance(), target);
  }

  // float returndistance = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_returndistance = this->_internal_returndistance();
  uint32_t raw_returndistance;
  memcpy(&raw_returndistance, &tmp_returndistance, sizeof(tmp_returndistance));
  if (raw_returndistance != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_returndistance(), target);
  }

  // float attackcooltime = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackcooltime = this->_internal_attackcooltime();
  uint32_t raw_attackcooltime;
  memcpy(&raw_attackcooltime, &tmp_attackcooltime, sizeof(tmp_attackcooltime));
  if (raw_attackcooltime != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_attackcooltime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.Stat)
  return target;
}

size_t Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.Stat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 totalExp = 2;
  if (this->_internal_totalexp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_totalexp());
  }

  // int32 exp = 3;
  if (this->_internal_exp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_exp());
  }

  // int32 maxhp = 4;
  if (this->_internal_maxhp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_maxhp());
  }

  // int32 hp = 5;
  if (this->_internal_hp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  // int32 damage = 6;
  if (this->_internal_damage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
  }

  // int32 defence = 7;
  if (this->_internal_defence() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_defence());
  }

  // float speed = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  // float attackdistance = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdistance = this->_internal_attackdistance();
  uint32_t raw_attackdistance;
  memcpy(&raw_attackdistance, &tmp_attackdistance, sizeof(tmp_attackdistance));
  if (raw_attackdistance != 0) {
    total_size += 1 + 4;
  }

  // float noticedistance = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_noticedistance = this->_internal_noticedistance();
  uint32_t raw_noticedistance;
  memcpy(&raw_noticedistance, &tmp_noticedistance, sizeof(tmp_noticedistance));
  if (raw_noticedistance != 0) {
    total_size += 1 + 4;
  }

  // float returndistance = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_returndistance = this->_internal_returndistance();
  uint32_t raw_returndistance;
  memcpy(&raw_returndistance, &tmp_returndistance, sizeof(tmp_returndistance));
  if (raw_returndistance != 0) {
    total_size += 1 + 4;
  }

  // float attackcooltime = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackcooltime = this->_internal_attackcooltime();
  uint32_t raw_attackcooltime;
  memcpy(&raw_attackcooltime, &tmp_attackcooltime, sizeof(tmp_attackcooltime));
  if (raw_attackcooltime != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Stat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stat::GetClassData() const { return &_class_data_; }

void Stat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Stat *>(to)->MergeFrom(
      static_cast<const Stat &>(from));
}


void Stat::MergeFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_totalexp() != 0) {
    _internal_set_totalexp(from._internal_totalexp());
  }
  if (from._internal_exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
  if (from._internal_maxhp() != 0) {
    _internal_set_maxhp(from._internal_maxhp());
  }
  if (from._internal_hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from._internal_damage() != 0) {
    _internal_set_damage(from._internal_damage());
  }
  if (from._internal_defence() != 0) {
    _internal_set_defence(from._internal_defence());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _internal_set_speed(from._internal_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdistance = from._internal_attackdistance();
  uint32_t raw_attackdistance;
  memcpy(&raw_attackdistance, &tmp_attackdistance, sizeof(tmp_attackdistance));
  if (raw_attackdistance != 0) {
    _internal_set_attackdistance(from._internal_attackdistance());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_noticedistance = from._internal_noticedistance();
  uint32_t raw_noticedistance;
  memcpy(&raw_noticedistance, &tmp_noticedistance, sizeof(tmp_noticedistance));
  if (raw_noticedistance != 0) {
    _internal_set_noticedistance(from._internal_noticedistance());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_returndistance = from._internal_returndistance();
  uint32_t raw_returndistance;
  memcpy(&raw_returndistance, &tmp_returndistance, sizeof(tmp_returndistance));
  if (raw_returndistance != 0) {
    _internal_set_returndistance(from._internal_returndistance());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackcooltime = from._internal_attackcooltime();
  uint32_t raw_attackcooltime;
  memcpy(&raw_attackcooltime, &tmp_attackcooltime, sizeof(tmp_attackcooltime));
  if (raw_attackcooltime != 0) {
    _internal_set_attackcooltime(from._internal_attackcooltime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stat::CopyFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stat::IsInitialized() const {
  return true;
}

void Stat::InternalSwap(Stat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stat, attackcooltime_)
      + sizeof(Stat::attackcooltime_)
      - PROTOBUF_FIELD_OFFSET(Stat, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[1]);
}

// ===================================================================

class ObjectInfo::_Internal {
 public:
  static const ::PROTOCOL::Position& pos(const ObjectInfo* msg);
  static const ::PROTOCOL::Stat& stat(const ObjectInfo* msg);
};

const ::PROTOCOL::Position&
ObjectInfo::_Internal::pos(const ObjectInfo* msg) {
  return *msg->pos_;
}
const ::PROTOCOL::Stat&
ObjectInfo::_Internal::stat(const ObjectInfo* msg) {
  return *msg->stat_;
}
ObjectInfo::ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.ObjectInfo)
}
ObjectInfo::ObjectInfo(const ObjectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    pos_ = new ::PROTOCOL::Position(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_stat()) {
    stat_ = new ::PROTOCOL::Stat(*from.stat_);
  } else {
    stat_ = nullptr;
  }
  ::memcpy(&objectid_, &from.objectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&typetemplateid_) -
    reinterpret_cast<char*>(&objectid_)) + sizeof(typetemplateid_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.ObjectInfo)
}

inline void ObjectInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&typetemplateid_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(typetemplateid_));
}

ObjectInfo::~ObjectInfo() {
  // @@protoc_insertion_point(destructor:PROTOCOL.ObjectInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObjectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete stat_;
}

void ObjectInfo::ArenaDtor(void* object) {
  ObjectInfo* _this = reinterpret_cast< ObjectInfo* >(object);
  (void)_this;
}
void ObjectInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.ObjectInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stat_ != nullptr) {
    delete stat_;
  }
  stat_ = nullptr;
  ::memset(&objectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&typetemplateid_) -
      reinterpret_cast<char*>(&objectid_)) + sizeof(typetemplateid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 playerdbid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          playerdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PROTOCOL.ObjectInfo.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.GameObjectType objecttype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_objecttype(static_cast<::PROTOCOL::GameObjectType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 typetemplateid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          typetemplateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.Position pos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.Stat stat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.ObjectInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // int32 playerdbid = 2;
  if (this->_internal_playerdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_playerdbid(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PROTOCOL.ObjectInfo.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // .PROTOCOL.GameObjectType objecttype = 4;
  if (this->_internal_objecttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_objecttype(), target);
  }

  // int32 typetemplateid = 5;
  if (this->_internal_typetemplateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_typetemplateid(), target);
  }

  // .PROTOCOL.Position pos = 6;
  if (this->_internal_has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pos(this), target, stream);
  }

  // .PROTOCOL.Stat stat = 7;
  if (this->_internal_has_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::stat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.ObjectInfo)
  return target;
}

size_t ObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.ObjectInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .PROTOCOL.Position pos = 6;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .PROTOCOL.Stat stat = 7;
  if (this->_internal_has_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stat_);
  }

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  // int32 playerdbid = 2;
  if (this->_internal_playerdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playerdbid());
  }

  // .PROTOCOL.GameObjectType objecttype = 4;
  if (this->_internal_objecttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_objecttype());
  }

  // int32 typetemplateid = 5;
  if (this->_internal_typetemplateid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_typetemplateid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectInfo::GetClassData() const { return &_class_data_; }

void ObjectInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObjectInfo *>(to)->MergeFrom(
      static_cast<const ObjectInfo &>(from));
}


void ObjectInfo::MergeFrom(const ObjectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.ObjectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_pos()) {
    _internal_mutable_pos()->::PROTOCOL::Position::MergeFrom(from._internal_pos());
  }
  if (from._internal_has_stat()) {
    _internal_mutable_stat()->::PROTOCOL::Stat::MergeFrom(from._internal_stat());
  }
  if (from._internal_objectid() != 0) {
    _internal_set_objectid(from._internal_objectid());
  }
  if (from._internal_playerdbid() != 0) {
    _internal_set_playerdbid(from._internal_playerdbid());
  }
  if (from._internal_objecttype() != 0) {
    _internal_set_objecttype(from._internal_objecttype());
  }
  if (from._internal_typetemplateid() != 0) {
    _internal_set_typetemplateid(from._internal_typetemplateid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectInfo::CopyFrom(const ObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.ObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectInfo::IsInitialized() const {
  return true;
}

void ObjectInfo::InternalSwap(ObjectInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectInfo, typetemplateid_)
      + sizeof(ObjectInfo::typetemplateid_)
      - PROTOBUF_FIELD_OFFSET(ObjectInfo, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[2]);
}

// ===================================================================

class LobbyPlayerInfo::_Internal {
 public:
  static const ::PROTOCOL::Stat& stat(const LobbyPlayerInfo* msg);
};

const ::PROTOCOL::Stat&
LobbyPlayerInfo::_Internal::stat(const LobbyPlayerInfo* msg) {
  return *msg->stat_;
}
LobbyPlayerInfo::LobbyPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.LobbyPlayerInfo)
}
LobbyPlayerInfo::LobbyPlayerInfo(const LobbyPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_stat()) {
    stat_ = new ::PROTOCOL::Stat(*from.stat_);
  } else {
    stat_ = nullptr;
  }
  playerdbid_ = from.playerdbid_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.LobbyPlayerInfo)
}

inline void LobbyPlayerInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playerdbid_) -
    reinterpret_cast<char*>(&stat_)) + sizeof(playerdbid_));
}

LobbyPlayerInfo::~LobbyPlayerInfo() {
  // @@protoc_insertion_point(destructor:PROTOCOL.LobbyPlayerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LobbyPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stat_;
}

void LobbyPlayerInfo::ArenaDtor(void* object) {
  LobbyPlayerInfo* _this = reinterpret_cast< LobbyPlayerInfo* >(object);
  (void)_this;
}
void LobbyPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LobbyPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LobbyPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.LobbyPlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && stat_ != nullptr) {
    delete stat_;
  }
  stat_ = nullptr;
  playerdbid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobbyPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playerdbid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          playerdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PROTOCOL.LobbyPlayerInfo.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.Stat stat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LobbyPlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.LobbyPlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerdbid = 1;
  if (this->_internal_playerdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerdbid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PROTOCOL.LobbyPlayerInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .PROTOCOL.Stat stat = 3;
  if (this->_internal_has_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.LobbyPlayerInfo)
  return target;
}

size_t LobbyPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.LobbyPlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .PROTOCOL.Stat stat = 3;
  if (this->_internal_has_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stat_);
  }

  // int32 playerdbid = 1;
  if (this->_internal_playerdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playerdbid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LobbyPlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LobbyPlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LobbyPlayerInfo::GetClassData() const { return &_class_data_; }

void LobbyPlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LobbyPlayerInfo *>(to)->MergeFrom(
      static_cast<const LobbyPlayerInfo &>(from));
}


void LobbyPlayerInfo::MergeFrom(const LobbyPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.LobbyPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_stat()) {
    _internal_mutable_stat()->::PROTOCOL::Stat::MergeFrom(from._internal_stat());
  }
  if (from._internal_playerdbid() != 0) {
    _internal_set_playerdbid(from._internal_playerdbid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LobbyPlayerInfo::CopyFrom(const LobbyPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.LobbyPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyPlayerInfo::IsInitialized() const {
  return true;
}

void LobbyPlayerInfo::InternalSwap(LobbyPlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LobbyPlayerInfo, playerdbid_)
      + sizeof(LobbyPlayerInfo::playerdbid_)
      - PROTOBUF_FIELD_OFFSET(LobbyPlayerInfo, stat_)>(
          reinterpret_cast<char*>(&stat_),
          reinterpret_cast<char*>(&other->stat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LobbyPlayerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[3]);
}

// ===================================================================

class Skill::_Internal {
 public:
};

Skill::Skill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.Skill)
}
Skill::Skill(const Skill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  skillid_ = from.skillid_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.Skill)
}

inline void Skill::SharedCtor() {
skillid_ = 0;
}

Skill::~Skill() {
  // @@protoc_insertion_point(destructor:PROTOCOL.Skill)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Skill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Skill::ArenaDtor(void* object) {
  Skill* _this = reinterpret_cast< Skill* >(object);
  (void)_this;
}
void Skill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Skill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Skill::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.Skill)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skillid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Skill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 skillId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Skill::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.Skill)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 skillId = 1;
  if (this->_internal_skillid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_skillid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.Skill)
  return target;
}

size_t Skill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.Skill)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 skillId = 1;
  if (this->_internal_skillid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_skillid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Skill::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Skill::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Skill::GetClassData() const { return &_class_data_; }

void Skill::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Skill *>(to)->MergeFrom(
      static_cast<const Skill &>(from));
}


void Skill::MergeFrom(const Skill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.Skill)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_skillid() != 0) {
    _internal_set_skillid(from._internal_skillid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Skill::CopyFrom(const Skill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.Skill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill::IsInitialized() const {
  return true;
}

void Skill::InternalSwap(Skill* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(skillid_, other->skillid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Skill::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[4]);
}

// ===================================================================

class ItemInfo::_Internal {
 public:
};

ItemInfo::ItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.ItemInfo)
}
ItemInfo::ItemInfo(const ItemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&itemdbid_, &from.itemdbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerdbid_) -
    reinterpret_cast<char*>(&itemdbid_)) + sizeof(playerdbid_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.ItemInfo)
}

inline void ItemInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemdbid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playerdbid_) -
    reinterpret_cast<char*>(&itemdbid_)) + sizeof(playerdbid_));
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:PROTOCOL.ItemInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ItemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ItemInfo::ArenaDtor(void* object) {
  ItemInfo* _this = reinterpret_cast< ItemInfo* >(object);
  (void)_this;
}
void ItemInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.ItemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&itemdbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerdbid_) -
      reinterpret_cast<char*>(&itemdbid_)) + sizeof(playerdbid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 itemDbId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          itemdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 templateId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          templateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 slot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool equipped = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          equipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 playerdbid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          playerdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.ItemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemDbId = 1;
  if (this->_internal_itemdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_itemdbid(), target);
  }

  // int32 templateId = 2;
  if (this->_internal_templateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_templateid(), target);
  }

  // int32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  // int32 slot = 4;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_slot(), target);
  }

  // bool equipped = 5;
  if (this->_internal_equipped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_equipped(), target);
  }

  // int32 playerdbid = 6;
  if (this->_internal_playerdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_playerdbid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.ItemInfo)
  return target;
}

size_t ItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.ItemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 itemDbId = 1;
  if (this->_internal_itemdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_itemdbid());
  }

  // int32 templateId = 2;
  if (this->_internal_templateid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_templateid());
  }

  // int32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  // int32 slot = 4;
  if (this->_internal_slot() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slot());
  }

  // bool equipped = 5;
  if (this->_internal_equipped() != 0) {
    total_size += 1 + 1;
  }

  // int32 playerdbid = 6;
  if (this->_internal_playerdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playerdbid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ItemInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemInfo::GetClassData() const { return &_class_data_; }

void ItemInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ItemInfo *>(to)->MergeFrom(
      static_cast<const ItemInfo &>(from));
}


void ItemInfo::MergeFrom(const ItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.ItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_itemdbid() != 0) {
    _internal_set_itemdbid(from._internal_itemdbid());
  }
  if (from._internal_templateid() != 0) {
    _internal_set_templateid(from._internal_templateid());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from._internal_slot() != 0) {
    _internal_set_slot(from._internal_slot());
  }
  if (from._internal_equipped() != 0) {
    _internal_set_equipped(from._internal_equipped());
  }
  if (from._internal_playerdbid() != 0) {
    _internal_set_playerdbid(from._internal_playerdbid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.ItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {
  return true;
}

void ItemInfo::InternalSwap(ItemInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemInfo, playerdbid_)
      + sizeof(ItemInfo::playerdbid_)
      - PROTOBUF_FIELD_OFFSET(ItemInfo, itemdbid_)>(
          reinterpret_cast<char*>(&itemdbid_),
          reinterpret_cast<char*>(&other->itemdbid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[5]);
}

// ===================================================================

class QuestInfo::_Internal {
 public:
};

QuestInfo::QuestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.QuestInfo)
}
QuestInfo::QuestInfo(const QuestInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&questdbid_, &from.questdbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerdbid_) -
    reinterpret_cast<char*>(&questdbid_)) + sizeof(playerdbid_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.QuestInfo)
}

inline void QuestInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&questdbid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playerdbid_) -
    reinterpret_cast<char*>(&questdbid_)) + sizeof(playerdbid_));
}

QuestInfo::~QuestInfo() {
  // @@protoc_insertion_point(destructor:PROTOCOL.QuestInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QuestInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QuestInfo::ArenaDtor(void* object) {
  QuestInfo* _this = reinterpret_cast< QuestInfo* >(object);
  (void)_this;
}
void QuestInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuestInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QuestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.QuestInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&questdbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerdbid_) -
      reinterpret_cast<char*>(&questdbid_)) + sizeof(playerdbid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuestInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 questdbid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          questdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 templateid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          templateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool completed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 playerdbid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          playerdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuestInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.QuestInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 questdbid = 1;
  if (this->_internal_questdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_questdbid(), target);
  }

  // int32 templateid = 2;
  if (this->_internal_templateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_templateid(), target);
  }

  // int32 progress = 3;
  if (this->_internal_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_progress(), target);
  }

  // bool completed = 4;
  if (this->_internal_completed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_completed(), target);
  }

  // int32 playerdbid = 5;
  if (this->_internal_playerdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_playerdbid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.QuestInfo)
  return target;
}

size_t QuestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.QuestInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 questdbid = 1;
  if (this->_internal_questdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_questdbid());
  }

  // int32 templateid = 2;
  if (this->_internal_templateid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_templateid());
  }

  // int32 progress = 3;
  if (this->_internal_progress() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_progress());
  }

  // bool completed = 4;
  if (this->_internal_completed() != 0) {
    total_size += 1 + 1;
  }

  // int32 playerdbid = 5;
  if (this->_internal_playerdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playerdbid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuestInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QuestInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuestInfo::GetClassData() const { return &_class_data_; }

void QuestInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QuestInfo *>(to)->MergeFrom(
      static_cast<const QuestInfo &>(from));
}


void QuestInfo::MergeFrom(const QuestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.QuestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_questdbid() != 0) {
    _internal_set_questdbid(from._internal_questdbid());
  }
  if (from._internal_templateid() != 0) {
    _internal_set_templateid(from._internal_templateid());
  }
  if (from._internal_progress() != 0) {
    _internal_set_progress(from._internal_progress());
  }
  if (from._internal_completed() != 0) {
    _internal_set_completed(from._internal_completed());
  }
  if (from._internal_playerdbid() != 0) {
    _internal_set_playerdbid(from._internal_playerdbid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuestInfo::CopyFrom(const QuestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.QuestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestInfo::IsInitialized() const {
  return true;
}

void QuestInfo::InternalSwap(QuestInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuestInfo, playerdbid_)
      + sizeof(QuestInfo::playerdbid_)
      - PROTOBUF_FIELD_OFFSET(QuestInfo, questdbid_)>(
          reinterpret_cast<char*>(&questdbid_),
          reinterpret_cast<char*>(&other->questdbid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuestInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[6]);
}

// ===================================================================

class C_LOGIN::_Internal {
 public:
};

C_LOGIN::C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_LOGIN)
}
C_LOGIN::C_LOGIN(const C_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  pw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pw().empty()) {
    pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pw(), 
      GetArenaForAllocation());
  }
  tokenstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tokenstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tokenstring().empty()) {
    tokenstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tokenstring(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_LOGIN)
}

inline void C_LOGIN::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tokenstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tokenstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_LOGIN::~C_LOGIN() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_LOGIN)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokenstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_LOGIN::ArenaDtor(void* object) {
  C_LOGIN* _this = reinterpret_cast< C_LOGIN* >(object);
  (void)_this;
}
void C_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  pw_.ClearToEmpty();
  tokenstring_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PROTOCOL.C_LOGIN.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PROTOCOL.C_LOGIN.pw"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tokenstring = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tokenstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PROTOCOL.C_LOGIN.tokenstring"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PROTOCOL.C_LOGIN.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string pw = 2;
  if (!this->_internal_pw().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pw().data(), static_cast<int>(this->_internal_pw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PROTOCOL.C_LOGIN.pw");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pw(), target);
  }

  // string tokenstring = 3;
  if (!this->_internal_tokenstring().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tokenstring().data(), static_cast<int>(this->_internal_tokenstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PROTOCOL.C_LOGIN.tokenstring");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tokenstring(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_LOGIN)
  return target;
}

size_t C_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string pw = 2;
  if (!this->_internal_pw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pw());
  }

  // string tokenstring = 3;
  if (!this->_internal_tokenstring().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tokenstring());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LOGIN::GetClassData() const { return &_class_data_; }

void C_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_LOGIN *>(to)->MergeFrom(
      static_cast<const C_LOGIN &>(from));
}


void C_LOGIN::MergeFrom(const C_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_pw().empty()) {
    _internal_set_pw(from._internal_pw());
  }
  if (!from._internal_tokenstring().empty()) {
    _internal_set_tokenstring(from._internal_tokenstring());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_LOGIN::CopyFrom(const C_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LOGIN::IsInitialized() const {
  return true;
}

void C_LOGIN::InternalSwap(C_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pw_, lhs_arena,
      &other->pw_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tokenstring_, lhs_arena,
      &other->tokenstring_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LOGIN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[7]);
}

// ===================================================================

class S_LOGIN::_Internal {
 public:
};

S_LOGIN::S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  objectinfos_(arena),
  lobbyplayerinfos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_LOGIN)
}
S_LOGIN::S_LOGIN(const S_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objectinfos_(from.objectinfos_),
      lobbyplayerinfos_(from.lobbyplayerinfos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_LOGIN)
}

inline void S_LOGIN::SharedCtor() {
success_ = false;
}

S_LOGIN::~S_LOGIN() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_LOGIN)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_LOGIN::ArenaDtor(void* object) {
  S_LOGIN* _this = reinterpret_cast< S_LOGIN* >(object);
  (void)_this;
}
void S_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objectinfos_.Clear();
  lobbyplayerinfos_.Clear();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PROTOCOL.ObjectInfo objectinfos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objectinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .PROTOCOL.LobbyPlayerInfo lobbyplayerinfos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lobbyplayerinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated .PROTOCOL.ObjectInfo objectinfos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objectinfos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_objectinfos(i), target, stream);
  }

  // repeated .PROTOCOL.LobbyPlayerInfo lobbyplayerinfos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lobbyplayerinfos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_lobbyplayerinfos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_LOGIN)
  return target;
}

size_t S_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.ObjectInfo objectinfos = 2;
  total_size += 1UL * this->_internal_objectinfos_size();
  for (const auto& msg : this->objectinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PROTOCOL.LobbyPlayerInfo lobbyplayerinfos = 3;
  total_size += 1UL * this->_internal_lobbyplayerinfos_size();
  for (const auto& msg : this->lobbyplayerinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LOGIN::GetClassData() const { return &_class_data_; }

void S_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_LOGIN *>(to)->MergeFrom(
      static_cast<const S_LOGIN &>(from));
}


void S_LOGIN::MergeFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  objectinfos_.MergeFrom(from.objectinfos_);
  lobbyplayerinfos_.MergeFrom(from.lobbyplayerinfos_);
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LOGIN::CopyFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LOGIN::IsInitialized() const {
  return true;
}

void S_LOGIN::InternalSwap(S_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  objectinfos_.InternalSwap(&other->objectinfos_);
  lobbyplayerinfos_.InternalSwap(&other->lobbyplayerinfos_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LOGIN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[8]);
}

// ===================================================================

class C_ENTER_ROOM::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const C_ENTER_ROOM* msg);
};

const ::PROTOCOL::ObjectInfo&
C_ENTER_ROOM::_Internal::object(const C_ENTER_ROOM* msg) {
  return *msg->object_;
}
C_ENTER_ROOM::C_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_ENTER_ROOM)
}
C_ENTER_ROOM::C_ENTER_ROOM(const C_ENTER_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  ::memcpy(&roomnum_, &from.roomnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&isrespawn_) -
    reinterpret_cast<char*>(&roomnum_)) + sizeof(isrespawn_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_ENTER_ROOM)
}

inline void C_ENTER_ROOM::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isrespawn_) -
    reinterpret_cast<char*>(&object_)) + sizeof(isrespawn_));
}

C_ENTER_ROOM::~C_ENTER_ROOM() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_ENTER_ROOM)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_ENTER_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void C_ENTER_ROOM::ArenaDtor(void* object) {
  C_ENTER_ROOM* _this = reinterpret_cast< C_ENTER_ROOM* >(object);
  (void)_this;
}
void C_ENTER_ROOM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_ENTER_ROOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ENTER_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_ENTER_ROOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  ::memset(&roomnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isrespawn_) -
      reinterpret_cast<char*>(&roomnum_)) + sizeof(isrespawn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ENTER_ROOM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 roomNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roomnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.ObjectInfo object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isrespawn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          isrespawn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ENTER_ROOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_ENTER_ROOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomNum = 1;
  if (this->_internal_roomnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roomnum(), target);
  }

  // .PROTOCOL.ObjectInfo object = 2;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::object(this), target, stream);
  }

  // bool isrespawn = 3;
  if (this->_internal_isrespawn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isrespawn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_ENTER_ROOM)
  return target;
}

size_t C_ENTER_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_ENTER_ROOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 2;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // uint64 roomNum = 1;
  if (this->_internal_roomnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_roomnum());
  }

  // bool isrespawn = 3;
  if (this->_internal_isrespawn() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ENTER_ROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_ENTER_ROOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ENTER_ROOM::GetClassData() const { return &_class_data_; }

void C_ENTER_ROOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_ENTER_ROOM *>(to)->MergeFrom(
      static_cast<const C_ENTER_ROOM &>(from));
}


void C_ENTER_ROOM::MergeFrom(const C_ENTER_ROOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_ENTER_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  if (from._internal_roomnum() != 0) {
    _internal_set_roomnum(from._internal_roomnum());
  }
  if (from._internal_isrespawn() != 0) {
    _internal_set_isrespawn(from._internal_isrespawn());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ENTER_ROOM::CopyFrom(const C_ENTER_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_ENTER_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ENTER_ROOM::IsInitialized() const {
  return true;
}

void C_ENTER_ROOM::InternalSwap(C_ENTER_ROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_ENTER_ROOM, isrespawn_)
      + sizeof(C_ENTER_ROOM::isrespawn_)
      - PROTOBUF_FIELD_OFFSET(C_ENTER_ROOM, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ENTER_ROOM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[9]);
}

// ===================================================================

class S_ENTER_ROOM::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const S_ENTER_ROOM* msg);
};

const ::PROTOCOL::ObjectInfo&
S_ENTER_ROOM::_Internal::object(const S_ENTER_ROOM* msg) {
  return *msg->object_;
}
S_ENTER_ROOM::S_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_ENTER_ROOM)
}
S_ENTER_ROOM::S_ENTER_ROOM(const S_ENTER_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_ENTER_ROOM)
}

inline void S_ENTER_ROOM::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&object_)) + sizeof(success_));
}

S_ENTER_ROOM::~S_ENTER_ROOM() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_ENTER_ROOM)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_ENTER_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void S_ENTER_ROOM::ArenaDtor(void* object) {
  S_ENTER_ROOM* _this = reinterpret_cast< S_ENTER_ROOM* >(object);
  (void)_this;
}
void S_ENTER_ROOM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ENTER_ROOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ENTER_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_ENTER_ROOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ENTER_ROOM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.ObjectInfo object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PROTOCOL.ItemInfo items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ENTER_ROOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_ENTER_ROOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .PROTOCOL.ObjectInfo object = 2;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::object(this), target, stream);
  }

  // repeated .PROTOCOL.ItemInfo items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_ENTER_ROOM)
  return target;
}

size_t S_ENTER_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_ENTER_ROOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 3;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PROTOCOL.ObjectInfo object = 2;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ENTER_ROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ENTER_ROOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ENTER_ROOM::GetClassData() const { return &_class_data_; }

void S_ENTER_ROOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ENTER_ROOM *>(to)->MergeFrom(
      static_cast<const S_ENTER_ROOM &>(from));
}


void S_ENTER_ROOM::MergeFrom(const S_ENTER_ROOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_ENTER_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ENTER_ROOM::CopyFrom(const S_ENTER_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_ENTER_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ENTER_ROOM::IsInitialized() const {
  return true;
}

void S_ENTER_ROOM::InternalSwap(S_ENTER_ROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ENTER_ROOM, success_)
      + sizeof(S_ENTER_ROOM::success_)
      - PROTOBUF_FIELD_OFFSET(S_ENTER_ROOM, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ENTER_ROOM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[10]);
}

// ===================================================================

class C_LEAVE_ROOM::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const C_LEAVE_ROOM* msg);
};

const ::PROTOCOL::ObjectInfo&
C_LEAVE_ROOM::_Internal::object(const C_LEAVE_ROOM* msg) {
  return *msg->object_;
}
C_LEAVE_ROOM::C_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_LEAVE_ROOM)
}
C_LEAVE_ROOM::C_LEAVE_ROOM(const C_LEAVE_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_LEAVE_ROOM)
}

inline void C_LEAVE_ROOM::SharedCtor() {
object_ = nullptr;
}

C_LEAVE_ROOM::~C_LEAVE_ROOM() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_LEAVE_ROOM)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_LEAVE_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void C_LEAVE_ROOM::ArenaDtor(void* object) {
  C_LEAVE_ROOM* _this = reinterpret_cast< C_LEAVE_ROOM* >(object);
  (void)_this;
}
void C_LEAVE_ROOM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_LEAVE_ROOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_LEAVE_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_LEAVE_ROOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LEAVE_ROOM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ObjectInfo object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_LEAVE_ROOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_LEAVE_ROOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_LEAVE_ROOM)
  return target;
}

size_t C_LEAVE_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_LEAVE_ROOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LEAVE_ROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_LEAVE_ROOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LEAVE_ROOM::GetClassData() const { return &_class_data_; }

void C_LEAVE_ROOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_LEAVE_ROOM *>(to)->MergeFrom(
      static_cast<const C_LEAVE_ROOM &>(from));
}


void C_LEAVE_ROOM::MergeFrom(const C_LEAVE_ROOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_LEAVE_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_LEAVE_ROOM::CopyFrom(const C_LEAVE_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_LEAVE_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LEAVE_ROOM::IsInitialized() const {
  return true;
}

void C_LEAVE_ROOM::InternalSwap(C_LEAVE_ROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LEAVE_ROOM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[11]);
}

// ===================================================================

class S_LEAVE_ROOM::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const S_LEAVE_ROOM* msg);
};

const ::PROTOCOL::ObjectInfo&
S_LEAVE_ROOM::_Internal::object(const S_LEAVE_ROOM* msg) {
  return *msg->object_;
}
S_LEAVE_ROOM::S_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_LEAVE_ROOM)
}
S_LEAVE_ROOM::S_LEAVE_ROOM(const S_LEAVE_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_LEAVE_ROOM)
}

inline void S_LEAVE_ROOM::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&object_)) + sizeof(success_));
}

S_LEAVE_ROOM::~S_LEAVE_ROOM() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_LEAVE_ROOM)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_LEAVE_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void S_LEAVE_ROOM::ArenaDtor(void* object) {
  S_LEAVE_ROOM* _this = reinterpret_cast< S_LEAVE_ROOM* >(object);
  (void)_this;
}
void S_LEAVE_ROOM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_LEAVE_ROOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_LEAVE_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_LEAVE_ROOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LEAVE_ROOM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.ObjectInfo object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LEAVE_ROOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_LEAVE_ROOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .PROTOCOL.ObjectInfo object = 2;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_LEAVE_ROOM)
  return target;
}

size_t S_LEAVE_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_LEAVE_ROOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 2;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LEAVE_ROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_LEAVE_ROOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LEAVE_ROOM::GetClassData() const { return &_class_data_; }

void S_LEAVE_ROOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_LEAVE_ROOM *>(to)->MergeFrom(
      static_cast<const S_LEAVE_ROOM &>(from));
}


void S_LEAVE_ROOM::MergeFrom(const S_LEAVE_ROOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_LEAVE_ROOM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LEAVE_ROOM::CopyFrom(const S_LEAVE_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_LEAVE_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LEAVE_ROOM::IsInitialized() const {
  return true;
}

void S_LEAVE_ROOM::InternalSwap(S_LEAVE_ROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_LEAVE_ROOM, success_)
      + sizeof(S_LEAVE_ROOM::success_)
      - PROTOBUF_FIELD_OFFSET(S_LEAVE_ROOM, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LEAVE_ROOM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[12]);
}

// ===================================================================

class C_SPAWN::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const C_SPAWN* msg);
};

const ::PROTOCOL::ObjectInfo&
C_SPAWN::_Internal::object(const C_SPAWN* msg) {
  return *msg->object_;
}
C_SPAWN::C_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_SPAWN)
}
C_SPAWN::C_SPAWN(const C_SPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_SPAWN)
}

inline void C_SPAWN::SharedCtor() {
object_ = nullptr;
}

C_SPAWN::~C_SPAWN() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_SPAWN)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_SPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void C_SPAWN::ArenaDtor(void* object) {
  C_SPAWN* _this = reinterpret_cast< C_SPAWN* >(object);
  (void)_this;
}
void C_SPAWN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_SPAWN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_SPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_SPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SPAWN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ObjectInfo object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_SPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_SPAWN)
  return target;
}

size_t C_SPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_SPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_SPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SPAWN::GetClassData() const { return &_class_data_; }

void C_SPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_SPAWN *>(to)->MergeFrom(
      static_cast<const C_SPAWN &>(from));
}


void C_SPAWN::MergeFrom(const C_SPAWN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_SPAWN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SPAWN::CopyFrom(const C_SPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_SPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SPAWN::IsInitialized() const {
  return true;
}

void C_SPAWN::InternalSwap(C_SPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SPAWN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[13]);
}

// ===================================================================

class S_SPAWN::_Internal {
 public:
};

S_SPAWN::S_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  object_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_SPAWN)
}
S_SPAWN::S_SPAWN(const S_SPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      object_(from.object_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_SPAWN)
}

inline void S_SPAWN::SharedCtor() {
success_ = false;
}

S_SPAWN::~S_SPAWN() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_SPAWN)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_SPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_SPAWN::ArenaDtor(void* object) {
  S_SPAWN* _this = reinterpret_cast< S_SPAWN* >(object);
  (void)_this;
}
void S_SPAWN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_SPAWN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_SPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_SPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_.Clear();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SPAWN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PROTOCOL.ObjectInfo object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_SPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated .PROTOCOL.ObjectInfo object = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_object(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_SPAWN)
  return target;
}

size_t S_SPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_SPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.ObjectInfo object = 2;
  total_size += 1UL * this->_internal_object_size();
  for (const auto& msg : this->object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_SPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SPAWN::GetClassData() const { return &_class_data_; }

void S_SPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_SPAWN *>(to)->MergeFrom(
      static_cast<const S_SPAWN &>(from));
}


void S_SPAWN::MergeFrom(const S_SPAWN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_SPAWN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  object_.MergeFrom(from.object_);
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SPAWN::CopyFrom(const S_SPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_SPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SPAWN::IsInitialized() const {
  return true;
}

void S_SPAWN::InternalSwap(S_SPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  object_.InternalSwap(&other->object_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SPAWN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[14]);
}

// ===================================================================

class C_DESPAWN::_Internal {
 public:
};

C_DESPAWN::C_DESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_DESPAWN)
}
C_DESPAWN::C_DESPAWN(const C_DESPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_DESPAWN)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_DESPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_DESPAWN::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_DESPAWN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[15]);
}

// ===================================================================

class S_DESPAWN::_Internal {
 public:
};

S_DESPAWN::S_DESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  objectids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_DESPAWN)
}
S_DESPAWN::S_DESPAWN(const S_DESPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objectids_(from.objectids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_DESPAWN)
}

inline void S_DESPAWN::SharedCtor() {
}

S_DESPAWN::~S_DESPAWN() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_DESPAWN)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_DESPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_DESPAWN::ArenaDtor(void* object) {
  S_DESPAWN* _this = reinterpret_cast< S_DESPAWN* >(object);
  (void)_this;
}
void S_DESPAWN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_DESPAWN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_DESPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_DESPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objectids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DESPAWN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 objectids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_objectids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_objectids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_DESPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_DESPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 objectids = 1;
  {
    int byte_size = _objectids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_objectids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_DESPAWN)
  return target;
}

size_t S_DESPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_DESPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 objectids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->objectids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _objectids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DESPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_DESPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DESPAWN::GetClassData() const { return &_class_data_; }

void S_DESPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_DESPAWN *>(to)->MergeFrom(
      static_cast<const S_DESPAWN &>(from));
}


void S_DESPAWN::MergeFrom(const S_DESPAWN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_DESPAWN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  objectids_.MergeFrom(from.objectids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_DESPAWN::CopyFrom(const S_DESPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_DESPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DESPAWN::IsInitialized() const {
  return true;
}

void S_DESPAWN::InternalSwap(S_DESPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  objectids_.InternalSwap(&other->objectids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DESPAWN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[16]);
}

// ===================================================================

class C_MOVE::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const C_MOVE* msg);
};

const ::PROTOCOL::ObjectInfo&
C_MOVE::_Internal::object(const C_MOVE* msg) {
  return *msg->object_;
}
C_MOVE::C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_MOVE)
}
C_MOVE::C_MOVE(const C_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_MOVE)
}

inline void C_MOVE::SharedCtor() {
object_ = nullptr;
}

C_MOVE::~C_MOVE() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_MOVE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void C_MOVE::ArenaDtor(void* object) {
  C_MOVE* _this = reinterpret_cast< C_MOVE* >(object);
  (void)_this;
}
void C_MOVE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_MOVE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_MOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MOVE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ObjectInfo object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_MOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_MOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_MOVE)
  return target;
}

size_t C_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_MOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_MOVE::GetClassData() const { return &_class_data_; }

void C_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_MOVE *>(to)->MergeFrom(
      static_cast<const C_MOVE &>(from));
}


void C_MOVE::MergeFrom(const C_MOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_MOVE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_MOVE::CopyFrom(const C_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MOVE::IsInitialized() const {
  return true;
}

void C_MOVE::InternalSwap(C_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MOVE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[17]);
}

// ===================================================================

class S_MOVE::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const S_MOVE* msg);
};

const ::PROTOCOL::ObjectInfo&
S_MOVE::_Internal::object(const S_MOVE* msg) {
  return *msg->object_;
}
S_MOVE::S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_MOVE)
}
S_MOVE::S_MOVE(const S_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_MOVE)
}

inline void S_MOVE::SharedCtor() {
object_ = nullptr;
}

S_MOVE::~S_MOVE() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_MOVE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void S_MOVE::ArenaDtor(void* object) {
  S_MOVE* _this = reinterpret_cast< S_MOVE* >(object);
  (void)_this;
}
void S_MOVE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_MOVE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_MOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MOVE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ObjectInfo object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_MOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_MOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_MOVE)
  return target;
}

size_t S_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_MOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_MOVE::GetClassData() const { return &_class_data_; }

void S_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_MOVE *>(to)->MergeFrom(
      static_cast<const S_MOVE &>(from));
}


void S_MOVE::MergeFrom(const S_MOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_MOVE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_MOVE::CopyFrom(const S_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MOVE::IsInitialized() const {
  return true;
}

void S_MOVE::InternalSwap(S_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MOVE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[18]);
}

// ===================================================================

class C_SKILL::_Internal {
 public:
};

C_SKILL::C_SKILL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  victims_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_SKILL)
}
C_SKILL::C_SKILL(const C_SKILL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      victims_(from.victims_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&skillid_, &from.skillid_,
    static_cast<size_t>(reinterpret_cast<char*>(&attacker_) -
    reinterpret_cast<char*>(&skillid_)) + sizeof(attacker_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_SKILL)
}

inline void C_SKILL::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&skillid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attacker_) -
    reinterpret_cast<char*>(&skillid_)) + sizeof(attacker_));
}

C_SKILL::~C_SKILL() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_SKILL)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_SKILL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_SKILL::ArenaDtor(void* object) {
  C_SKILL* _this = reinterpret_cast< C_SKILL* >(object);
  (void)_this;
}
void C_SKILL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_SKILL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_SKILL::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_SKILL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  victims_.Clear();
  ::memset(&skillid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attacker_) -
      reinterpret_cast<char*>(&skillid_)) + sizeof(attacker_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SKILL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 skillid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attacker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          attacker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 victims = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_victims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_victims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SKILL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_SKILL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 skillid = 1;
  if (this->_internal_skillid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_skillid(), target);
  }

  // int32 attacker = 2;
  if (this->_internal_attacker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_attacker(), target);
  }

  // repeated int32 victims = 3;
  {
    int byte_size = _victims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_victims(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_SKILL)
  return target;
}

size_t C_SKILL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_SKILL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 victims = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->victims_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _victims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 skillid = 1;
  if (this->_internal_skillid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_skillid());
  }

  // int32 attacker = 2;
  if (this->_internal_attacker() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_attacker());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SKILL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_SKILL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SKILL::GetClassData() const { return &_class_data_; }

void C_SKILL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_SKILL *>(to)->MergeFrom(
      static_cast<const C_SKILL &>(from));
}


void C_SKILL::MergeFrom(const C_SKILL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_SKILL)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  victims_.MergeFrom(from.victims_);
  if (from._internal_skillid() != 0) {
    _internal_set_skillid(from._internal_skillid());
  }
  if (from._internal_attacker() != 0) {
    _internal_set_attacker(from._internal_attacker());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SKILL::CopyFrom(const C_SKILL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_SKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SKILL::IsInitialized() const {
  return true;
}

void C_SKILL::InternalSwap(C_SKILL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  victims_.InternalSwap(&other->victims_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_SKILL, attacker_)
      + sizeof(C_SKILL::attacker_)
      - PROTOBUF_FIELD_OFFSET(C_SKILL, skillid_)>(
          reinterpret_cast<char*>(&skillid_),
          reinterpret_cast<char*>(&other->skillid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SKILL::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[19]);
}

// ===================================================================

class S_SKILL::_Internal {
 public:
};

S_SKILL::S_SKILL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  victims_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_SKILL)
}
S_SKILL::S_SKILL(const S_SKILL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      victims_(from.victims_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&skillid_, &from.skillid_,
    static_cast<size_t>(reinterpret_cast<char*>(&attacker_) -
    reinterpret_cast<char*>(&skillid_)) + sizeof(attacker_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_SKILL)
}

inline void S_SKILL::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&skillid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attacker_) -
    reinterpret_cast<char*>(&skillid_)) + sizeof(attacker_));
}

S_SKILL::~S_SKILL() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_SKILL)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_SKILL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_SKILL::ArenaDtor(void* object) {
  S_SKILL* _this = reinterpret_cast< S_SKILL* >(object);
  (void)_this;
}
void S_SKILL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_SKILL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_SKILL::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_SKILL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  victims_.Clear();
  ::memset(&skillid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attacker_) -
      reinterpret_cast<char*>(&skillid_)) + sizeof(attacker_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SKILL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 skillid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attacker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          attacker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 victims = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_victims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_victims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SKILL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_SKILL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 skillid = 1;
  if (this->_internal_skillid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_skillid(), target);
  }

  // int32 attacker = 2;
  if (this->_internal_attacker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_attacker(), target);
  }

  // repeated int32 victims = 3;
  {
    int byte_size = _victims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_victims(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_SKILL)
  return target;
}

size_t S_SKILL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_SKILL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 victims = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->victims_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _victims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 skillid = 1;
  if (this->_internal_skillid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_skillid());
  }

  // int32 attacker = 2;
  if (this->_internal_attacker() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_attacker());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SKILL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_SKILL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SKILL::GetClassData() const { return &_class_data_; }

void S_SKILL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_SKILL *>(to)->MergeFrom(
      static_cast<const S_SKILL &>(from));
}


void S_SKILL::MergeFrom(const S_SKILL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_SKILL)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  victims_.MergeFrom(from.victims_);
  if (from._internal_skillid() != 0) {
    _internal_set_skillid(from._internal_skillid());
  }
  if (from._internal_attacker() != 0) {
    _internal_set_attacker(from._internal_attacker());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SKILL::CopyFrom(const S_SKILL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_SKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SKILL::IsInitialized() const {
  return true;
}

void S_SKILL::InternalSwap(S_SKILL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  victims_.InternalSwap(&other->victims_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SKILL, attacker_)
      + sizeof(S_SKILL::attacker_)
      - PROTOBUF_FIELD_OFFSET(S_SKILL, skillid_)>(
          reinterpret_cast<char*>(&skillid_),
          reinterpret_cast<char*>(&other->skillid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SKILL::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[20]);
}

// ===================================================================

class C_CHAT::_Internal {
 public:
};

C_CHAT::C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_CHAT)
}
C_CHAT::C_CHAT(const C_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_CHAT)
}

inline void C_CHAT::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CHAT::~C_CHAT() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_CHAT)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_CHAT::ArenaDtor(void* object) {
  C_CHAT* _this = reinterpret_cast< C_CHAT* >(object);
  (void)_this;
}
void C_CHAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_CHAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CHAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PROTOCOL.C_CHAT.text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PROTOCOL.C_CHAT.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_CHAT)
  return target;
}

size_t C_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CHAT::GetClassData() const { return &_class_data_; }

void C_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_CHAT *>(to)->MergeFrom(
      static_cast<const C_CHAT &>(from));
}


void C_CHAT::MergeFrom(const C_CHAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_CHAT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CHAT::CopyFrom(const C_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CHAT::IsInitialized() const {
  return true;
}

void C_CHAT::InternalSwap(C_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CHAT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[21]);
}

// ===================================================================

class S_CHAT::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const S_CHAT* msg);
};

const ::PROTOCOL::ObjectInfo&
S_CHAT::_Internal::object(const S_CHAT* msg) {
  return *msg->object_;
}
S_CHAT::S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_CHAT)
}
S_CHAT::S_CHAT(const S_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_CHAT)
}

inline void S_CHAT::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
object_ = nullptr;
}

S_CHAT::~S_CHAT() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_CHAT)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_;
}

void S_CHAT::ArenaDtor(void* object) {
  S_CHAT* _this = reinterpret_cast< S_CHAT* >(object);
  (void)_this;
}
void S_CHAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CHAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ObjectInfo object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PROTOCOL.S_CHAT.text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PROTOCOL.S_CHAT.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_CHAT)
  return target;
}

size_t S_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHAT::GetClassData() const { return &_class_data_; }

void S_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CHAT *>(to)->MergeFrom(
      static_cast<const S_CHAT &>(from));
}


void S_CHAT::MergeFrom(const S_CHAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_CHAT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHAT::CopyFrom(const S_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHAT::IsInitialized() const {
  return true;
}

void S_CHAT::InternalSwap(S_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHAT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[22]);
}

// ===================================================================

class S_CHANGE_HP::_Internal {
 public:
};

S_CHANGE_HP::S_CHANGE_HP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_CHANGE_HP)
}
S_CHANGE_HP::S_CHANGE_HP(const S_CHANGE_HP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_, &from.object_,
    static_cast<size_t>(reinterpret_cast<char*>(&hp_) -
    reinterpret_cast<char*>(&object_)) + sizeof(hp_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_CHANGE_HP)
}

inline void S_CHANGE_HP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hp_) -
    reinterpret_cast<char*>(&object_)) + sizeof(hp_));
}

S_CHANGE_HP::~S_CHANGE_HP() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_CHANGE_HP)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_CHANGE_HP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_CHANGE_HP::ArenaDtor(void* object) {
  S_CHANGE_HP* _this = reinterpret_cast< S_CHANGE_HP* >(object);
  (void)_this;
}
void S_CHANGE_HP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CHANGE_HP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHANGE_HP::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_CHANGE_HP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hp_) -
      reinterpret_cast<char*>(&object_)) + sizeof(hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHANGE_HP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHANGE_HP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_CHANGE_HP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object = 1;
  if (this->_internal_object() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_object(), target);
  }

  // int32 hp = 2;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_CHANGE_HP)
  return target;
}

size_t S_CHANGE_HP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_CHANGE_HP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 object = 1;
  if (this->_internal_object() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_object());
  }

  // int32 hp = 2;
  if (this->_internal_hp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHANGE_HP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CHANGE_HP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHANGE_HP::GetClassData() const { return &_class_data_; }

void S_CHANGE_HP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CHANGE_HP *>(to)->MergeFrom(
      static_cast<const S_CHANGE_HP &>(from));
}


void S_CHANGE_HP::MergeFrom(const S_CHANGE_HP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_CHANGE_HP)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object() != 0) {
    _internal_set_object(from._internal_object());
  }
  if (from._internal_hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHANGE_HP::CopyFrom(const S_CHANGE_HP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_CHANGE_HP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHANGE_HP::IsInitialized() const {
  return true;
}

void S_CHANGE_HP::InternalSwap(S_CHANGE_HP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_CHANGE_HP, hp_)
      + sizeof(S_CHANGE_HP::hp_)
      - PROTOBUF_FIELD_OFFSET(S_CHANGE_HP, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHANGE_HP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[23]);
}

// ===================================================================

class S_DIE::_Internal {
 public:
};

S_DIE::S_DIE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_DIE)
}
S_DIE::S_DIE(const S_DIE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&victim_, &from.victim_,
    static_cast<size_t>(reinterpret_cast<char*>(&attacker_) -
    reinterpret_cast<char*>(&victim_)) + sizeof(attacker_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_DIE)
}

inline void S_DIE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&victim_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attacker_) -
    reinterpret_cast<char*>(&victim_)) + sizeof(attacker_));
}

S_DIE::~S_DIE() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_DIE)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_DIE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_DIE::ArenaDtor(void* object) {
  S_DIE* _this = reinterpret_cast< S_DIE* >(object);
  (void)_this;
}
void S_DIE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_DIE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_DIE::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_DIE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&victim_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attacker_) -
      reinterpret_cast<char*>(&victim_)) + sizeof(attacker_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DIE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 victim = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          victim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attacker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          attacker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_DIE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_DIE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 victim = 1;
  if (this->_internal_victim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_victim(), target);
  }

  // int32 attacker = 2;
  if (this->_internal_attacker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_attacker(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_DIE)
  return target;
}

size_t S_DIE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_DIE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 victim = 1;
  if (this->_internal_victim() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_victim());
  }

  // int32 attacker = 2;
  if (this->_internal_attacker() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_attacker());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DIE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_DIE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DIE::GetClassData() const { return &_class_data_; }

void S_DIE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_DIE *>(to)->MergeFrom(
      static_cast<const S_DIE &>(from));
}


void S_DIE::MergeFrom(const S_DIE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_DIE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_victim() != 0) {
    _internal_set_victim(from._internal_victim());
  }
  if (from._internal_attacker() != 0) {
    _internal_set_attacker(from._internal_attacker());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_DIE::CopyFrom(const S_DIE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_DIE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DIE::IsInitialized() const {
  return true;
}

void S_DIE::InternalSwap(S_DIE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_DIE, attacker_)
      + sizeof(S_DIE::attacker_)
      - PROTOBUF_FIELD_OFFSET(S_DIE, victim_)>(
          reinterpret_cast<char*>(&victim_),
          reinterpret_cast<char*>(&other->victim_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DIE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[24]);
}

// ===================================================================

class S_ITEMLIST::_Internal {
 public:
};

S_ITEMLIST::S_ITEMLIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_ITEMLIST)
}
S_ITEMLIST::S_ITEMLIST(const S_ITEMLIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_ITEMLIST)
}

inline void S_ITEMLIST::SharedCtor() {
}

S_ITEMLIST::~S_ITEMLIST() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_ITEMLIST)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_ITEMLIST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ITEMLIST::ArenaDtor(void* object) {
  S_ITEMLIST* _this = reinterpret_cast< S_ITEMLIST* >(object);
  (void)_this;
}
void S_ITEMLIST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ITEMLIST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ITEMLIST::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_ITEMLIST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ITEMLIST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PROTOCOL.ItemInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ITEMLIST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_ITEMLIST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_ITEMLIST)
  return target;
}

size_t S_ITEMLIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_ITEMLIST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ITEMLIST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ITEMLIST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ITEMLIST::GetClassData() const { return &_class_data_; }

void S_ITEMLIST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ITEMLIST *>(to)->MergeFrom(
      static_cast<const S_ITEMLIST &>(from));
}


void S_ITEMLIST::MergeFrom(const S_ITEMLIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_ITEMLIST)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ITEMLIST::CopyFrom(const S_ITEMLIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_ITEMLIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ITEMLIST::IsInitialized() const {
  return true;
}

void S_ITEMLIST::InternalSwap(S_ITEMLIST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ITEMLIST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[25]);
}

// ===================================================================

class C_ADD_ITEM::_Internal {
 public:
};

C_ADD_ITEM::C_ADD_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_ADD_ITEM)
}
C_ADD_ITEM::C_ADD_ITEM(const C_ADD_ITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_ADD_ITEM)
}

inline void C_ADD_ITEM::SharedCtor() {
}

C_ADD_ITEM::~C_ADD_ITEM() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_ADD_ITEM)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_ADD_ITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ADD_ITEM::ArenaDtor(void* object) {
  C_ADD_ITEM* _this = reinterpret_cast< C_ADD_ITEM* >(object);
  (void)_this;
}
void C_ADD_ITEM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_ADD_ITEM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ADD_ITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_ADD_ITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ADD_ITEM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PROTOCOL.ItemInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ADD_ITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_ADD_ITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_ADD_ITEM)
  return target;
}

size_t C_ADD_ITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_ADD_ITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ADD_ITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_ADD_ITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ADD_ITEM::GetClassData() const { return &_class_data_; }

void C_ADD_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_ADD_ITEM *>(to)->MergeFrom(
      static_cast<const C_ADD_ITEM &>(from));
}


void C_ADD_ITEM::MergeFrom(const C_ADD_ITEM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_ADD_ITEM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ADD_ITEM::CopyFrom(const C_ADD_ITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_ADD_ITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ADD_ITEM::IsInitialized() const {
  return true;
}

void C_ADD_ITEM::InternalSwap(C_ADD_ITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ADD_ITEM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[26]);
}

// ===================================================================

class S_ADD_ITEM::_Internal {
 public:
};

S_ADD_ITEM::S_ADD_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_ADD_ITEM)
}
S_ADD_ITEM::S_ADD_ITEM(const S_ADD_ITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_ADD_ITEM)
}

inline void S_ADD_ITEM::SharedCtor() {
}

S_ADD_ITEM::~S_ADD_ITEM() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_ADD_ITEM)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_ADD_ITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ADD_ITEM::ArenaDtor(void* object) {
  S_ADD_ITEM* _this = reinterpret_cast< S_ADD_ITEM* >(object);
  (void)_this;
}
void S_ADD_ITEM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ADD_ITEM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ADD_ITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_ADD_ITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ADD_ITEM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PROTOCOL.ItemInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ADD_ITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_ADD_ITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_ADD_ITEM)
  return target;
}

size_t S_ADD_ITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_ADD_ITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ADD_ITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ADD_ITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ADD_ITEM::GetClassData() const { return &_class_data_; }

void S_ADD_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ADD_ITEM *>(to)->MergeFrom(
      static_cast<const S_ADD_ITEM &>(from));
}


void S_ADD_ITEM::MergeFrom(const S_ADD_ITEM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_ADD_ITEM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ADD_ITEM::CopyFrom(const S_ADD_ITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_ADD_ITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ADD_ITEM::IsInitialized() const {
  return true;
}

void S_ADD_ITEM::InternalSwap(S_ADD_ITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ADD_ITEM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[27]);
}

// ===================================================================

class S_UPDATE_ITEM::_Internal {
 public:
};

S_UPDATE_ITEM::S_UPDATE_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_UPDATE_ITEM)
}
S_UPDATE_ITEM::S_UPDATE_ITEM(const S_UPDATE_ITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_UPDATE_ITEM)
}

inline void S_UPDATE_ITEM::SharedCtor() {
}

S_UPDATE_ITEM::~S_UPDATE_ITEM() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_UPDATE_ITEM)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_UPDATE_ITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_UPDATE_ITEM::ArenaDtor(void* object) {
  S_UPDATE_ITEM* _this = reinterpret_cast< S_UPDATE_ITEM* >(object);
  (void)_this;
}
void S_UPDATE_ITEM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_UPDATE_ITEM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_UPDATE_ITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_UPDATE_ITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_UPDATE_ITEM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PROTOCOL.ItemInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_UPDATE_ITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_UPDATE_ITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_UPDATE_ITEM)
  return target;
}

size_t S_UPDATE_ITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_UPDATE_ITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_UPDATE_ITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_UPDATE_ITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_UPDATE_ITEM::GetClassData() const { return &_class_data_; }

void S_UPDATE_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_UPDATE_ITEM *>(to)->MergeFrom(
      static_cast<const S_UPDATE_ITEM &>(from));
}


void S_UPDATE_ITEM::MergeFrom(const S_UPDATE_ITEM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_UPDATE_ITEM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_UPDATE_ITEM::CopyFrom(const S_UPDATE_ITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_UPDATE_ITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_UPDATE_ITEM::IsInitialized() const {
  return true;
}

void S_UPDATE_ITEM::InternalSwap(S_UPDATE_ITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_UPDATE_ITEM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[28]);
}

// ===================================================================

class S_REMOVE_ITEM::_Internal {
 public:
};

S_REMOVE_ITEM::S_REMOVE_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  slots_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_REMOVE_ITEM)
}
S_REMOVE_ITEM::S_REMOVE_ITEM(const S_REMOVE_ITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      slots_(from.slots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_REMOVE_ITEM)
}

inline void S_REMOVE_ITEM::SharedCtor() {
}

S_REMOVE_ITEM::~S_REMOVE_ITEM() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_REMOVE_ITEM)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_REMOVE_ITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_REMOVE_ITEM::ArenaDtor(void* object) {
  S_REMOVE_ITEM* _this = reinterpret_cast< S_REMOVE_ITEM* >(object);
  (void)_this;
}
void S_REMOVE_ITEM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_REMOVE_ITEM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_REMOVE_ITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_REMOVE_ITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slots_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_REMOVE_ITEM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 slots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_slots(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_slots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_REMOVE_ITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_REMOVE_ITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 slots = 1;
  {
    int byte_size = _slots_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_slots(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_REMOVE_ITEM)
  return target;
}

size_t S_REMOVE_ITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_REMOVE_ITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 slots = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->slots_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _slots_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_REMOVE_ITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_REMOVE_ITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_REMOVE_ITEM::GetClassData() const { return &_class_data_; }

void S_REMOVE_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_REMOVE_ITEM *>(to)->MergeFrom(
      static_cast<const S_REMOVE_ITEM &>(from));
}


void S_REMOVE_ITEM::MergeFrom(const S_REMOVE_ITEM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_REMOVE_ITEM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_REMOVE_ITEM::CopyFrom(const S_REMOVE_ITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_REMOVE_ITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_REMOVE_ITEM::IsInitialized() const {
  return true;
}

void S_REMOVE_ITEM::InternalSwap(S_REMOVE_ITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  slots_.InternalSwap(&other->slots_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_REMOVE_ITEM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[29]);
}

// ===================================================================

class C_EQUIP_ITEM::_Internal {
 public:
};

C_EQUIP_ITEM::C_EQUIP_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_EQUIP_ITEM)
}
C_EQUIP_ITEM::C_EQUIP_ITEM(const C_EQUIP_ITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&itemdbid_, &from.itemdbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&equip_) -
    reinterpret_cast<char*>(&itemdbid_)) + sizeof(equip_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_EQUIP_ITEM)
}

inline void C_EQUIP_ITEM::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemdbid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&equip_) -
    reinterpret_cast<char*>(&itemdbid_)) + sizeof(equip_));
}

C_EQUIP_ITEM::~C_EQUIP_ITEM() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_EQUIP_ITEM)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_EQUIP_ITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_EQUIP_ITEM::ArenaDtor(void* object) {
  C_EQUIP_ITEM* _this = reinterpret_cast< C_EQUIP_ITEM* >(object);
  (void)_this;
}
void C_EQUIP_ITEM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_EQUIP_ITEM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_EQUIP_ITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_EQUIP_ITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&itemdbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&equip_) -
      reinterpret_cast<char*>(&itemdbid_)) + sizeof(equip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_EQUIP_ITEM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 itemdbid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          itemdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool equip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          equip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_EQUIP_ITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_EQUIP_ITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemdbid = 1;
  if (this->_internal_itemdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_itemdbid(), target);
  }

  // int32 slot = 2;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_slot(), target);
  }

  // bool equip = 3;
  if (this->_internal_equip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_equip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_EQUIP_ITEM)
  return target;
}

size_t C_EQUIP_ITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_EQUIP_ITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 itemdbid = 1;
  if (this->_internal_itemdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_itemdbid());
  }

  // int32 slot = 2;
  if (this->_internal_slot() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slot());
  }

  // bool equip = 3;
  if (this->_internal_equip() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_EQUIP_ITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_EQUIP_ITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_EQUIP_ITEM::GetClassData() const { return &_class_data_; }

void C_EQUIP_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_EQUIP_ITEM *>(to)->MergeFrom(
      static_cast<const C_EQUIP_ITEM &>(from));
}


void C_EQUIP_ITEM::MergeFrom(const C_EQUIP_ITEM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_EQUIP_ITEM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_itemdbid() != 0) {
    _internal_set_itemdbid(from._internal_itemdbid());
  }
  if (from._internal_slot() != 0) {
    _internal_set_slot(from._internal_slot());
  }
  if (from._internal_equip() != 0) {
    _internal_set_equip(from._internal_equip());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_EQUIP_ITEM::CopyFrom(const C_EQUIP_ITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_EQUIP_ITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_EQUIP_ITEM::IsInitialized() const {
  return true;
}

void C_EQUIP_ITEM::InternalSwap(C_EQUIP_ITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_EQUIP_ITEM, equip_)
      + sizeof(C_EQUIP_ITEM::equip_)
      - PROTOBUF_FIELD_OFFSET(C_EQUIP_ITEM, itemdbid_)>(
          reinterpret_cast<char*>(&itemdbid_),
          reinterpret_cast<char*>(&other->itemdbid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_EQUIP_ITEM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[30]);
}

// ===================================================================

class S_EQUIP_ITEM::_Internal {
 public:
};

S_EQUIP_ITEM::S_EQUIP_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_EQUIP_ITEM)
}
S_EQUIP_ITEM::S_EQUIP_ITEM(const S_EQUIP_ITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&itemdbid_, &from.itemdbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&equip_) -
    reinterpret_cast<char*>(&itemdbid_)) + sizeof(equip_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_EQUIP_ITEM)
}

inline void S_EQUIP_ITEM::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemdbid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&equip_) -
    reinterpret_cast<char*>(&itemdbid_)) + sizeof(equip_));
}

S_EQUIP_ITEM::~S_EQUIP_ITEM() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_EQUIP_ITEM)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_EQUIP_ITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_EQUIP_ITEM::ArenaDtor(void* object) {
  S_EQUIP_ITEM* _this = reinterpret_cast< S_EQUIP_ITEM* >(object);
  (void)_this;
}
void S_EQUIP_ITEM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_EQUIP_ITEM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_EQUIP_ITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_EQUIP_ITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&itemdbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&equip_) -
      reinterpret_cast<char*>(&itemdbid_)) + sizeof(equip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_EQUIP_ITEM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 itemdbid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          itemdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool equip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          equip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_EQUIP_ITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_EQUIP_ITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemdbid = 1;
  if (this->_internal_itemdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_itemdbid(), target);
  }

  // int32 slot = 2;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_slot(), target);
  }

  // bool equip = 3;
  if (this->_internal_equip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_equip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_EQUIP_ITEM)
  return target;
}

size_t S_EQUIP_ITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_EQUIP_ITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 itemdbid = 1;
  if (this->_internal_itemdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_itemdbid());
  }

  // int32 slot = 2;
  if (this->_internal_slot() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slot());
  }

  // bool equip = 3;
  if (this->_internal_equip() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_EQUIP_ITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_EQUIP_ITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_EQUIP_ITEM::GetClassData() const { return &_class_data_; }

void S_EQUIP_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_EQUIP_ITEM *>(to)->MergeFrom(
      static_cast<const S_EQUIP_ITEM &>(from));
}


void S_EQUIP_ITEM::MergeFrom(const S_EQUIP_ITEM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_EQUIP_ITEM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_itemdbid() != 0) {
    _internal_set_itemdbid(from._internal_itemdbid());
  }
  if (from._internal_slot() != 0) {
    _internal_set_slot(from._internal_slot());
  }
  if (from._internal_equip() != 0) {
    _internal_set_equip(from._internal_equip());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_EQUIP_ITEM::CopyFrom(const S_EQUIP_ITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_EQUIP_ITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_EQUIP_ITEM::IsInitialized() const {
  return true;
}

void S_EQUIP_ITEM::InternalSwap(S_EQUIP_ITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_EQUIP_ITEM, equip_)
      + sizeof(S_EQUIP_ITEM::equip_)
      - PROTOBUF_FIELD_OFFSET(S_EQUIP_ITEM, itemdbid_)>(
          reinterpret_cast<char*>(&itemdbid_),
          reinterpret_cast<char*>(&other->itemdbid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_EQUIP_ITEM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[31]);
}

// ===================================================================

class C_USE_ITEM::_Internal {
 public:
};

C_USE_ITEM::C_USE_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_USE_ITEM)
}
C_USE_ITEM::C_USE_ITEM(const C_USE_ITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&itemdbid_, &from.itemdbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_) -
    reinterpret_cast<char*>(&itemdbid_)) + sizeof(use_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_USE_ITEM)
}

inline void C_USE_ITEM::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemdbid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_) -
    reinterpret_cast<char*>(&itemdbid_)) + sizeof(use_));
}

C_USE_ITEM::~C_USE_ITEM() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_USE_ITEM)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_USE_ITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_USE_ITEM::ArenaDtor(void* object) {
  C_USE_ITEM* _this = reinterpret_cast< C_USE_ITEM* >(object);
  (void)_this;
}
void C_USE_ITEM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_USE_ITEM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_USE_ITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_USE_ITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&itemdbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_) -
      reinterpret_cast<char*>(&itemdbid_)) + sizeof(use_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_USE_ITEM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 itemdbid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          itemdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_USE_ITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_USE_ITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemdbid = 1;
  if (this->_internal_itemdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_itemdbid(), target);
  }

  // int32 slot = 2;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_slot(), target);
  }

  // bool use = 3;
  if (this->_internal_use() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_USE_ITEM)
  return target;
}

size_t C_USE_ITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_USE_ITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 itemdbid = 1;
  if (this->_internal_itemdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_itemdbid());
  }

  // int32 slot = 2;
  if (this->_internal_slot() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slot());
  }

  // bool use = 3;
  if (this->_internal_use() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_USE_ITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_USE_ITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_USE_ITEM::GetClassData() const { return &_class_data_; }

void C_USE_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_USE_ITEM *>(to)->MergeFrom(
      static_cast<const C_USE_ITEM &>(from));
}


void C_USE_ITEM::MergeFrom(const C_USE_ITEM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_USE_ITEM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_itemdbid() != 0) {
    _internal_set_itemdbid(from._internal_itemdbid());
  }
  if (from._internal_slot() != 0) {
    _internal_set_slot(from._internal_slot());
  }
  if (from._internal_use() != 0) {
    _internal_set_use(from._internal_use());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_USE_ITEM::CopyFrom(const C_USE_ITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_USE_ITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_USE_ITEM::IsInitialized() const {
  return true;
}

void C_USE_ITEM::InternalSwap(C_USE_ITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_USE_ITEM, use_)
      + sizeof(C_USE_ITEM::use_)
      - PROTOBUF_FIELD_OFFSET(C_USE_ITEM, itemdbid_)>(
          reinterpret_cast<char*>(&itemdbid_),
          reinterpret_cast<char*>(&other->itemdbid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_USE_ITEM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[32]);
}

// ===================================================================

class S_USE_ITEM::_Internal {
 public:
  static const ::PROTOCOL::ItemInfo& item(const S_USE_ITEM* msg);
};

const ::PROTOCOL::ItemInfo&
S_USE_ITEM::_Internal::item(const S_USE_ITEM* msg) {
  return *msg->item_;
}
S_USE_ITEM::S_USE_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_USE_ITEM)
}
S_USE_ITEM::S_USE_ITEM(const S_USE_ITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    item_ = new ::PROTOCOL::ItemInfo(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_USE_ITEM)
}

inline void S_USE_ITEM::SharedCtor() {
item_ = nullptr;
}

S_USE_ITEM::~S_USE_ITEM() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_USE_ITEM)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_USE_ITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete item_;
}

void S_USE_ITEM::ArenaDtor(void* object) {
  S_USE_ITEM* _this = reinterpret_cast< S_USE_ITEM* >(object);
  (void)_this;
}
void S_USE_ITEM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_USE_ITEM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_USE_ITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_USE_ITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_USE_ITEM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ItemInfo item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_USE_ITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_USE_ITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ItemInfo item = 1;
  if (this->_internal_has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_USE_ITEM)
  return target;
}

size_t S_USE_ITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_USE_ITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ItemInfo item = 1;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_USE_ITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_USE_ITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_USE_ITEM::GetClassData() const { return &_class_data_; }

void S_USE_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_USE_ITEM *>(to)->MergeFrom(
      static_cast<const S_USE_ITEM &>(from));
}


void S_USE_ITEM::MergeFrom(const S_USE_ITEM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_USE_ITEM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _internal_mutable_item()->::PROTOCOL::ItemInfo::MergeFrom(from._internal_item());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_USE_ITEM::CopyFrom(const S_USE_ITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_USE_ITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_USE_ITEM::IsInitialized() const {
  return true;
}

void S_USE_ITEM::InternalSwap(S_USE_ITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(item_, other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_USE_ITEM::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[33]);
}

// ===================================================================

class S_CHANGE_STAT::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const S_CHANGE_STAT* msg);
};

const ::PROTOCOL::ObjectInfo&
S_CHANGE_STAT::_Internal::object(const S_CHANGE_STAT* msg) {
  return *msg->object_;
}
S_CHANGE_STAT::S_CHANGE_STAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_CHANGE_STAT)
}
S_CHANGE_STAT::S_CHANGE_STAT(const S_CHANGE_STAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_CHANGE_STAT)
}

inline void S_CHANGE_STAT::SharedCtor() {
object_ = nullptr;
}

S_CHANGE_STAT::~S_CHANGE_STAT() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_CHANGE_STAT)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_CHANGE_STAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void S_CHANGE_STAT::ArenaDtor(void* object) {
  S_CHANGE_STAT* _this = reinterpret_cast< S_CHANGE_STAT* >(object);
  (void)_this;
}
void S_CHANGE_STAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CHANGE_STAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHANGE_STAT::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_CHANGE_STAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHANGE_STAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ObjectInfo object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHANGE_STAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_CHANGE_STAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_CHANGE_STAT)
  return target;
}

size_t S_CHANGE_STAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_CHANGE_STAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHANGE_STAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CHANGE_STAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHANGE_STAT::GetClassData() const { return &_class_data_; }

void S_CHANGE_STAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CHANGE_STAT *>(to)->MergeFrom(
      static_cast<const S_CHANGE_STAT &>(from));
}


void S_CHANGE_STAT::MergeFrom(const S_CHANGE_STAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_CHANGE_STAT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHANGE_STAT::CopyFrom(const S_CHANGE_STAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_CHANGE_STAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHANGE_STAT::IsInitialized() const {
  return true;
}

void S_CHANGE_STAT::InternalSwap(S_CHANGE_STAT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHANGE_STAT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[34]);
}

// ===================================================================

class C_CREATE_PLAYER::_Internal {
 public:
};

C_CREATE_PLAYER::C_CREATE_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_CREATE_PLAYER)
}
C_CREATE_PLAYER::C_CREATE_PLAYER(const C_CREATE_PLAYER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_CREATE_PLAYER)
}

inline void C_CREATE_PLAYER::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CREATE_PLAYER::~C_CREATE_PLAYER() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_CREATE_PLAYER)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_CREATE_PLAYER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_CREATE_PLAYER::ArenaDtor(void* object) {
  C_CREATE_PLAYER* _this = reinterpret_cast< C_CREATE_PLAYER* >(object);
  (void)_this;
}
void C_CREATE_PLAYER::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_CREATE_PLAYER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_CREATE_PLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_CREATE_PLAYER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CREATE_PLAYER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PROTOCOL.C_CREATE_PLAYER.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CREATE_PLAYER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_CREATE_PLAYER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PROTOCOL.C_CREATE_PLAYER.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_CREATE_PLAYER)
  return target;
}

size_t C_CREATE_PLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_CREATE_PLAYER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CREATE_PLAYER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_CREATE_PLAYER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CREATE_PLAYER::GetClassData() const { return &_class_data_; }

void C_CREATE_PLAYER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_CREATE_PLAYER *>(to)->MergeFrom(
      static_cast<const C_CREATE_PLAYER &>(from));
}


void C_CREATE_PLAYER::MergeFrom(const C_CREATE_PLAYER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_CREATE_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CREATE_PLAYER::CopyFrom(const C_CREATE_PLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_CREATE_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CREATE_PLAYER::IsInitialized() const {
  return true;
}

void C_CREATE_PLAYER::InternalSwap(C_CREATE_PLAYER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CREATE_PLAYER::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[35]);
}

// ===================================================================

class S_CREATE_PLAYER::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const S_CREATE_PLAYER* msg);
};

const ::PROTOCOL::ObjectInfo&
S_CREATE_PLAYER::_Internal::object(const S_CREATE_PLAYER* msg) {
  return *msg->object_;
}
S_CREATE_PLAYER::S_CREATE_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_CREATE_PLAYER)
}
S_CREATE_PLAYER::S_CREATE_PLAYER(const S_CREATE_PLAYER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_CREATE_PLAYER)
}

inline void S_CREATE_PLAYER::SharedCtor() {
object_ = nullptr;
}

S_CREATE_PLAYER::~S_CREATE_PLAYER() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_CREATE_PLAYER)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_CREATE_PLAYER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void S_CREATE_PLAYER::ArenaDtor(void* object) {
  S_CREATE_PLAYER* _this = reinterpret_cast< S_CREATE_PLAYER* >(object);
  (void)_this;
}
void S_CREATE_PLAYER::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CREATE_PLAYER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CREATE_PLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_CREATE_PLAYER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CREATE_PLAYER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ObjectInfo object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CREATE_PLAYER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_CREATE_PLAYER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_CREATE_PLAYER)
  return target;
}

size_t S_CREATE_PLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_CREATE_PLAYER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CREATE_PLAYER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CREATE_PLAYER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CREATE_PLAYER::GetClassData() const { return &_class_data_; }

void S_CREATE_PLAYER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CREATE_PLAYER *>(to)->MergeFrom(
      static_cast<const S_CREATE_PLAYER &>(from));
}


void S_CREATE_PLAYER::MergeFrom(const S_CREATE_PLAYER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_CREATE_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CREATE_PLAYER::CopyFrom(const S_CREATE_PLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_CREATE_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CREATE_PLAYER::IsInitialized() const {
  return true;
}

void S_CREATE_PLAYER::InternalSwap(S_CREATE_PLAYER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CREATE_PLAYER::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[36]);
}

// ===================================================================

class S_ADD_EXP::_Internal {
 public:
};

S_ADD_EXP::S_ADD_EXP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_ADD_EXP)
}
S_ADD_EXP::S_ADD_EXP(const S_ADD_EXP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exp_ = from.exp_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_ADD_EXP)
}

inline void S_ADD_EXP::SharedCtor() {
exp_ = 0;
}

S_ADD_EXP::~S_ADD_EXP() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_ADD_EXP)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_ADD_EXP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ADD_EXP::ArenaDtor(void* object) {
  S_ADD_EXP* _this = reinterpret_cast< S_ADD_EXP* >(object);
  (void)_this;
}
void S_ADD_EXP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ADD_EXP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ADD_EXP::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_ADD_EXP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ADD_EXP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 exp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ADD_EXP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_ADD_EXP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 exp = 1;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_ADD_EXP)
  return target;
}

size_t S_ADD_EXP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_ADD_EXP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 exp = 1;
  if (this->_internal_exp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_exp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ADD_EXP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ADD_EXP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ADD_EXP::GetClassData() const { return &_class_data_; }

void S_ADD_EXP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ADD_EXP *>(to)->MergeFrom(
      static_cast<const S_ADD_EXP &>(from));
}


void S_ADD_EXP::MergeFrom(const S_ADD_EXP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_ADD_EXP)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ADD_EXP::CopyFrom(const S_ADD_EXP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_ADD_EXP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ADD_EXP::IsInitialized() const {
  return true;
}

void S_ADD_EXP::InternalSwap(S_ADD_EXP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(exp_, other->exp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ADD_EXP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[37]);
}

// ===================================================================

class S_LEVEL_UP::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& info(const S_LEVEL_UP* msg);
};

const ::PROTOCOL::ObjectInfo&
S_LEVEL_UP::_Internal::info(const S_LEVEL_UP* msg) {
  return *msg->info_;
}
S_LEVEL_UP::S_LEVEL_UP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_LEVEL_UP)
}
S_LEVEL_UP::S_LEVEL_UP(const S_LEVEL_UP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::PROTOCOL::ObjectInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_LEVEL_UP)
}

inline void S_LEVEL_UP::SharedCtor() {
info_ = nullptr;
}

S_LEVEL_UP::~S_LEVEL_UP() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_LEVEL_UP)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_LEVEL_UP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void S_LEVEL_UP::ArenaDtor(void* object) {
  S_LEVEL_UP* _this = reinterpret_cast< S_LEVEL_UP* >(object);
  (void)_this;
}
void S_LEVEL_UP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_LEVEL_UP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_LEVEL_UP::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_LEVEL_UP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LEVEL_UP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ObjectInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LEVEL_UP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_LEVEL_UP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo info = 1;
  if (this->_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_LEVEL_UP)
  return target;
}

size_t S_LEVEL_UP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_LEVEL_UP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LEVEL_UP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_LEVEL_UP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LEVEL_UP::GetClassData() const { return &_class_data_; }

void S_LEVEL_UP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_LEVEL_UP *>(to)->MergeFrom(
      static_cast<const S_LEVEL_UP &>(from));
}


void S_LEVEL_UP::MergeFrom(const S_LEVEL_UP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_LEVEL_UP)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _internal_mutable_info()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LEVEL_UP::CopyFrom(const S_LEVEL_UP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_LEVEL_UP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LEVEL_UP::IsInitialized() const {
  return true;
}

void S_LEVEL_UP::InternalSwap(S_LEVEL_UP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LEVEL_UP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[38]);
}

// ===================================================================

class C_ADD_QUEST::_Internal {
 public:
  static const ::PROTOCOL::QuestInfo& quest(const C_ADD_QUEST* msg);
};

const ::PROTOCOL::QuestInfo&
C_ADD_QUEST::_Internal::quest(const C_ADD_QUEST* msg) {
  return *msg->quest_;
}
C_ADD_QUEST::C_ADD_QUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_ADD_QUEST)
}
C_ADD_QUEST::C_ADD_QUEST(const C_ADD_QUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_quest()) {
    quest_ = new ::PROTOCOL::QuestInfo(*from.quest_);
  } else {
    quest_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_ADD_QUEST)
}

inline void C_ADD_QUEST::SharedCtor() {
quest_ = nullptr;
}

C_ADD_QUEST::~C_ADD_QUEST() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_ADD_QUEST)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_ADD_QUEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete quest_;
}

void C_ADD_QUEST::ArenaDtor(void* object) {
  C_ADD_QUEST* _this = reinterpret_cast< C_ADD_QUEST* >(object);
  (void)_this;
}
void C_ADD_QUEST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_ADD_QUEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ADD_QUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_ADD_QUEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && quest_ != nullptr) {
    delete quest_;
  }
  quest_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ADD_QUEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.QuestInfo quest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_quest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ADD_QUEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_ADD_QUEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.QuestInfo quest = 1;
  if (this->_internal_has_quest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::quest(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_ADD_QUEST)
  return target;
}

size_t C_ADD_QUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_ADD_QUEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.QuestInfo quest = 1;
  if (this->_internal_has_quest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quest_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ADD_QUEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_ADD_QUEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ADD_QUEST::GetClassData() const { return &_class_data_; }

void C_ADD_QUEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_ADD_QUEST *>(to)->MergeFrom(
      static_cast<const C_ADD_QUEST &>(from));
}


void C_ADD_QUEST::MergeFrom(const C_ADD_QUEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_ADD_QUEST)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_quest()) {
    _internal_mutable_quest()->::PROTOCOL::QuestInfo::MergeFrom(from._internal_quest());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ADD_QUEST::CopyFrom(const C_ADD_QUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_ADD_QUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ADD_QUEST::IsInitialized() const {
  return true;
}

void C_ADD_QUEST::InternalSwap(C_ADD_QUEST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(quest_, other->quest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ADD_QUEST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[39]);
}

// ===================================================================

class S_ADD_QUEST::_Internal {
 public:
  static const ::PROTOCOL::QuestInfo& quest(const S_ADD_QUEST* msg);
};

const ::PROTOCOL::QuestInfo&
S_ADD_QUEST::_Internal::quest(const S_ADD_QUEST* msg) {
  return *msg->quest_;
}
S_ADD_QUEST::S_ADD_QUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_ADD_QUEST)
}
S_ADD_QUEST::S_ADD_QUEST(const S_ADD_QUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_quest()) {
    quest_ = new ::PROTOCOL::QuestInfo(*from.quest_);
  } else {
    quest_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_ADD_QUEST)
}

inline void S_ADD_QUEST::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quest_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&quest_)) + sizeof(result_));
}

S_ADD_QUEST::~S_ADD_QUEST() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_ADD_QUEST)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_ADD_QUEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete quest_;
}

void S_ADD_QUEST::ArenaDtor(void* object) {
  S_ADD_QUEST* _this = reinterpret_cast< S_ADD_QUEST* >(object);
  (void)_this;
}
void S_ADD_QUEST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ADD_QUEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ADD_QUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_ADD_QUEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && quest_ != nullptr) {
    delete quest_;
  }
  quest_ = nullptr;
  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ADD_QUEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.QuestInfo quest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ADD_QUEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_ADD_QUEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // .PROTOCOL.QuestInfo quest = 2;
  if (this->_internal_has_quest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::quest(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_ADD_QUEST)
  return target;
}

size_t S_ADD_QUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_ADD_QUEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.QuestInfo quest = 2;
  if (this->_internal_has_quest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quest_);
  }

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ADD_QUEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ADD_QUEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ADD_QUEST::GetClassData() const { return &_class_data_; }

void S_ADD_QUEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ADD_QUEST *>(to)->MergeFrom(
      static_cast<const S_ADD_QUEST &>(from));
}


void S_ADD_QUEST::MergeFrom(const S_ADD_QUEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_ADD_QUEST)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_quest()) {
    _internal_mutable_quest()->::PROTOCOL::QuestInfo::MergeFrom(from._internal_quest());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ADD_QUEST::CopyFrom(const S_ADD_QUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_ADD_QUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ADD_QUEST::IsInitialized() const {
  return true;
}

void S_ADD_QUEST::InternalSwap(S_ADD_QUEST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ADD_QUEST, result_)
      + sizeof(S_ADD_QUEST::result_)
      - PROTOBUF_FIELD_OFFSET(S_ADD_QUEST, quest_)>(
          reinterpret_cast<char*>(&quest_),
          reinterpret_cast<char*>(&other->quest_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ADD_QUEST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[40]);
}

// ===================================================================

class S_QUESTLIST::_Internal {
 public:
};

S_QUESTLIST::S_QUESTLIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  quests_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_QUESTLIST)
}
S_QUESTLIST::S_QUESTLIST(const S_QUESTLIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      quests_(from.quests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_QUESTLIST)
}

inline void S_QUESTLIST::SharedCtor() {
}

S_QUESTLIST::~S_QUESTLIST() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_QUESTLIST)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_QUESTLIST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_QUESTLIST::ArenaDtor(void* object) {
  S_QUESTLIST* _this = reinterpret_cast< S_QUESTLIST* >(object);
  (void)_this;
}
void S_QUESTLIST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_QUESTLIST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_QUESTLIST::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_QUESTLIST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quests_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_QUESTLIST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PROTOCOL.QuestInfo quests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_QUESTLIST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_QUESTLIST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PROTOCOL.QuestInfo quests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_quests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_QUESTLIST)
  return target;
}

size_t S_QUESTLIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_QUESTLIST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.QuestInfo quests = 1;
  total_size += 1UL * this->_internal_quests_size();
  for (const auto& msg : this->quests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_QUESTLIST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_QUESTLIST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_QUESTLIST::GetClassData() const { return &_class_data_; }

void S_QUESTLIST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_QUESTLIST *>(to)->MergeFrom(
      static_cast<const S_QUESTLIST &>(from));
}


void S_QUESTLIST::MergeFrom(const S_QUESTLIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_QUESTLIST)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  quests_.MergeFrom(from.quests_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_QUESTLIST::CopyFrom(const S_QUESTLIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_QUESTLIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_QUESTLIST::IsInitialized() const {
  return true;
}

void S_QUESTLIST::InternalSwap(S_QUESTLIST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  quests_.InternalSwap(&other->quests_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_QUESTLIST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[41]);
}

// ===================================================================

class C_REMOVE_QUEST::_Internal {
 public:
};

C_REMOVE_QUEST::C_REMOVE_QUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_REMOVE_QUEST)
}
C_REMOVE_QUEST::C_REMOVE_QUEST(const C_REMOVE_QUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  questdbid_ = from.questdbid_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_REMOVE_QUEST)
}

inline void C_REMOVE_QUEST::SharedCtor() {
questdbid_ = 0;
}

C_REMOVE_QUEST::~C_REMOVE_QUEST() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_REMOVE_QUEST)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_REMOVE_QUEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_REMOVE_QUEST::ArenaDtor(void* object) {
  C_REMOVE_QUEST* _this = reinterpret_cast< C_REMOVE_QUEST* >(object);
  (void)_this;
}
void C_REMOVE_QUEST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_REMOVE_QUEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_REMOVE_QUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_REMOVE_QUEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  questdbid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_REMOVE_QUEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 questdbid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          questdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_REMOVE_QUEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_REMOVE_QUEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 questdbid = 1;
  if (this->_internal_questdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_questdbid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_REMOVE_QUEST)
  return target;
}

size_t C_REMOVE_QUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_REMOVE_QUEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 questdbid = 1;
  if (this->_internal_questdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_questdbid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_REMOVE_QUEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_REMOVE_QUEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_REMOVE_QUEST::GetClassData() const { return &_class_data_; }

void C_REMOVE_QUEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_REMOVE_QUEST *>(to)->MergeFrom(
      static_cast<const C_REMOVE_QUEST &>(from));
}


void C_REMOVE_QUEST::MergeFrom(const C_REMOVE_QUEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_REMOVE_QUEST)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_questdbid() != 0) {
    _internal_set_questdbid(from._internal_questdbid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_REMOVE_QUEST::CopyFrom(const C_REMOVE_QUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_REMOVE_QUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_REMOVE_QUEST::IsInitialized() const {
  return true;
}

void C_REMOVE_QUEST::InternalSwap(C_REMOVE_QUEST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(questdbid_, other->questdbid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_REMOVE_QUEST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[42]);
}

// ===================================================================

class S_REMOVE_QUEST::_Internal {
 public:
};

S_REMOVE_QUEST::S_REMOVE_QUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_REMOVE_QUEST)
}
S_REMOVE_QUEST::S_REMOVE_QUEST(const S_REMOVE_QUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&questid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(questid_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_REMOVE_QUEST)
}

inline void S_REMOVE_QUEST::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&questid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(questid_));
}

S_REMOVE_QUEST::~S_REMOVE_QUEST() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_REMOVE_QUEST)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_REMOVE_QUEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_REMOVE_QUEST::ArenaDtor(void* object) {
  S_REMOVE_QUEST* _this = reinterpret_cast< S_REMOVE_QUEST* >(object);
  (void)_this;
}
void S_REMOVE_QUEST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_REMOVE_QUEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_REMOVE_QUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_REMOVE_QUEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&questid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(questid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_REMOVE_QUEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 questid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_REMOVE_QUEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_REMOVE_QUEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // int32 questid = 2;
  if (this->_internal_questid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_questid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_REMOVE_QUEST)
  return target;
}

size_t S_REMOVE_QUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_REMOVE_QUEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  // int32 questid = 2;
  if (this->_internal_questid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_questid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_REMOVE_QUEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_REMOVE_QUEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_REMOVE_QUEST::GetClassData() const { return &_class_data_; }

void S_REMOVE_QUEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_REMOVE_QUEST *>(to)->MergeFrom(
      static_cast<const S_REMOVE_QUEST &>(from));
}


void S_REMOVE_QUEST::MergeFrom(const S_REMOVE_QUEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_REMOVE_QUEST)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_questid() != 0) {
    _internal_set_questid(from._internal_questid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_REMOVE_QUEST::CopyFrom(const S_REMOVE_QUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_REMOVE_QUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_REMOVE_QUEST::IsInitialized() const {
  return true;
}

void S_REMOVE_QUEST::InternalSwap(S_REMOVE_QUEST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_REMOVE_QUEST, questid_)
      + sizeof(S_REMOVE_QUEST::questid_)
      - PROTOBUF_FIELD_OFFSET(S_REMOVE_QUEST, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_REMOVE_QUEST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[43]);
}

// ===================================================================

class C_COMPLETE_QUEST::_Internal {
 public:
};

C_COMPLETE_QUEST::C_COMPLETE_QUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_COMPLETE_QUEST)
}
C_COMPLETE_QUEST::C_COMPLETE_QUEST(const C_COMPLETE_QUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  questdbid_ = from.questdbid_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_COMPLETE_QUEST)
}

inline void C_COMPLETE_QUEST::SharedCtor() {
questdbid_ = 0;
}

C_COMPLETE_QUEST::~C_COMPLETE_QUEST() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_COMPLETE_QUEST)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_COMPLETE_QUEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_COMPLETE_QUEST::ArenaDtor(void* object) {
  C_COMPLETE_QUEST* _this = reinterpret_cast< C_COMPLETE_QUEST* >(object);
  (void)_this;
}
void C_COMPLETE_QUEST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_COMPLETE_QUEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_COMPLETE_QUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_COMPLETE_QUEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  questdbid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_COMPLETE_QUEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 questdbid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          questdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_COMPLETE_QUEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_COMPLETE_QUEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 questdbid = 1;
  if (this->_internal_questdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_questdbid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_COMPLETE_QUEST)
  return target;
}

size_t C_COMPLETE_QUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_COMPLETE_QUEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 questdbid = 1;
  if (this->_internal_questdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_questdbid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_COMPLETE_QUEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_COMPLETE_QUEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_COMPLETE_QUEST::GetClassData() const { return &_class_data_; }

void C_COMPLETE_QUEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_COMPLETE_QUEST *>(to)->MergeFrom(
      static_cast<const C_COMPLETE_QUEST &>(from));
}


void C_COMPLETE_QUEST::MergeFrom(const C_COMPLETE_QUEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_COMPLETE_QUEST)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_questdbid() != 0) {
    _internal_set_questdbid(from._internal_questdbid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_COMPLETE_QUEST::CopyFrom(const C_COMPLETE_QUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_COMPLETE_QUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_COMPLETE_QUEST::IsInitialized() const {
  return true;
}

void C_COMPLETE_QUEST::InternalSwap(C_COMPLETE_QUEST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(questdbid_, other->questdbid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_COMPLETE_QUEST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[44]);
}

// ===================================================================

class S_COMPLETE_QUEST::_Internal {
 public:
};

S_COMPLETE_QUEST::S_COMPLETE_QUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_COMPLETE_QUEST)
}
S_COMPLETE_QUEST::S_COMPLETE_QUEST(const S_COMPLETE_QUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&questid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(questid_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_COMPLETE_QUEST)
}

inline void S_COMPLETE_QUEST::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&questid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(questid_));
}

S_COMPLETE_QUEST::~S_COMPLETE_QUEST() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_COMPLETE_QUEST)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_COMPLETE_QUEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_COMPLETE_QUEST::ArenaDtor(void* object) {
  S_COMPLETE_QUEST* _this = reinterpret_cast< S_COMPLETE_QUEST* >(object);
  (void)_this;
}
void S_COMPLETE_QUEST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_COMPLETE_QUEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_COMPLETE_QUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_COMPLETE_QUEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&questid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(questid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_COMPLETE_QUEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 questid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_COMPLETE_QUEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_COMPLETE_QUEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // int32 questid = 2;
  if (this->_internal_questid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_questid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_COMPLETE_QUEST)
  return target;
}

size_t S_COMPLETE_QUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_COMPLETE_QUEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  // int32 questid = 2;
  if (this->_internal_questid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_questid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_COMPLETE_QUEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_COMPLETE_QUEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_COMPLETE_QUEST::GetClassData() const { return &_class_data_; }

void S_COMPLETE_QUEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_COMPLETE_QUEST *>(to)->MergeFrom(
      static_cast<const S_COMPLETE_QUEST &>(from));
}


void S_COMPLETE_QUEST::MergeFrom(const S_COMPLETE_QUEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_COMPLETE_QUEST)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_questid() != 0) {
    _internal_set_questid(from._internal_questid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_COMPLETE_QUEST::CopyFrom(const S_COMPLETE_QUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_COMPLETE_QUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_COMPLETE_QUEST::IsInitialized() const {
  return true;
}

void S_COMPLETE_QUEST::InternalSwap(S_COMPLETE_QUEST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_COMPLETE_QUEST, questid_)
      + sizeof(S_COMPLETE_QUEST::questid_)
      - PROTOBUF_FIELD_OFFSET(S_COMPLETE_QUEST, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_COMPLETE_QUEST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[45]);
}

// ===================================================================

class C_UPDATE_QUEST::_Internal {
 public:
  static const ::PROTOCOL::QuestInfo& questinfo(const C_UPDATE_QUEST* msg);
};

const ::PROTOCOL::QuestInfo&
C_UPDATE_QUEST::_Internal::questinfo(const C_UPDATE_QUEST* msg) {
  return *msg->questinfo_;
}
C_UPDATE_QUEST::C_UPDATE_QUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_UPDATE_QUEST)
}
C_UPDATE_QUEST::C_UPDATE_QUEST(const C_UPDATE_QUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_questinfo()) {
    questinfo_ = new ::PROTOCOL::QuestInfo(*from.questinfo_);
  } else {
    questinfo_ = nullptr;
  }
  objectid_ = from.objectid_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_UPDATE_QUEST)
}

inline void C_UPDATE_QUEST::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&questinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&objectid_) -
    reinterpret_cast<char*>(&questinfo_)) + sizeof(objectid_));
}

C_UPDATE_QUEST::~C_UPDATE_QUEST() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_UPDATE_QUEST)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_UPDATE_QUEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete questinfo_;
}

void C_UPDATE_QUEST::ArenaDtor(void* object) {
  C_UPDATE_QUEST* _this = reinterpret_cast< C_UPDATE_QUEST* >(object);
  (void)_this;
}
void C_UPDATE_QUEST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_UPDATE_QUEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_UPDATE_QUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_UPDATE_QUEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && questinfo_ != nullptr) {
    delete questinfo_;
  }
  questinfo_ = nullptr;
  objectid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_UPDATE_QUEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.QuestInfo questinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_questinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objectid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_UPDATE_QUEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_UPDATE_QUEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.QuestInfo questinfo = 1;
  if (this->_internal_has_questinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::questinfo(this), target, stream);
  }

  // int32 objectid = 2;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_objectid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_UPDATE_QUEST)
  return target;
}

size_t C_UPDATE_QUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_UPDATE_QUEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.QuestInfo questinfo = 1;
  if (this->_internal_has_questinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *questinfo_);
  }

  // int32 objectid = 2;
  if (this->_internal_objectid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_UPDATE_QUEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_UPDATE_QUEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_UPDATE_QUEST::GetClassData() const { return &_class_data_; }

void C_UPDATE_QUEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_UPDATE_QUEST *>(to)->MergeFrom(
      static_cast<const C_UPDATE_QUEST &>(from));
}


void C_UPDATE_QUEST::MergeFrom(const C_UPDATE_QUEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_UPDATE_QUEST)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_questinfo()) {
    _internal_mutable_questinfo()->::PROTOCOL::QuestInfo::MergeFrom(from._internal_questinfo());
  }
  if (from._internal_objectid() != 0) {
    _internal_set_objectid(from._internal_objectid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_UPDATE_QUEST::CopyFrom(const C_UPDATE_QUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_UPDATE_QUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_UPDATE_QUEST::IsInitialized() const {
  return true;
}

void C_UPDATE_QUEST::InternalSwap(C_UPDATE_QUEST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_UPDATE_QUEST, objectid_)
      + sizeof(C_UPDATE_QUEST::objectid_)
      - PROTOBUF_FIELD_OFFSET(C_UPDATE_QUEST, questinfo_)>(
          reinterpret_cast<char*>(&questinfo_),
          reinterpret_cast<char*>(&other->questinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_UPDATE_QUEST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[46]);
}

// ===================================================================

class S_UPDATE_QUEST::_Internal {
 public:
  static const ::PROTOCOL::QuestInfo& questinfo(const S_UPDATE_QUEST* msg);
};

const ::PROTOCOL::QuestInfo&
S_UPDATE_QUEST::_Internal::questinfo(const S_UPDATE_QUEST* msg) {
  return *msg->questinfo_;
}
S_UPDATE_QUEST::S_UPDATE_QUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_UPDATE_QUEST)
}
S_UPDATE_QUEST::S_UPDATE_QUEST(const S_UPDATE_QUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_questinfo()) {
    questinfo_ = new ::PROTOCOL::QuestInfo(*from.questinfo_);
  } else {
    questinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_UPDATE_QUEST)
}

inline void S_UPDATE_QUEST::SharedCtor() {
questinfo_ = nullptr;
}

S_UPDATE_QUEST::~S_UPDATE_QUEST() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_UPDATE_QUEST)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_UPDATE_QUEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete questinfo_;
}

void S_UPDATE_QUEST::ArenaDtor(void* object) {
  S_UPDATE_QUEST* _this = reinterpret_cast< S_UPDATE_QUEST* >(object);
  (void)_this;
}
void S_UPDATE_QUEST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_UPDATE_QUEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_UPDATE_QUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_UPDATE_QUEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && questinfo_ != nullptr) {
    delete questinfo_;
  }
  questinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_UPDATE_QUEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.QuestInfo questInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_questinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_UPDATE_QUEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_UPDATE_QUEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.QuestInfo questInfo = 1;
  if (this->_internal_has_questinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::questinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_UPDATE_QUEST)
  return target;
}

size_t S_UPDATE_QUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_UPDATE_QUEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.QuestInfo questInfo = 1;
  if (this->_internal_has_questinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *questinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_UPDATE_QUEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_UPDATE_QUEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_UPDATE_QUEST::GetClassData() const { return &_class_data_; }

void S_UPDATE_QUEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_UPDATE_QUEST *>(to)->MergeFrom(
      static_cast<const S_UPDATE_QUEST &>(from));
}


void S_UPDATE_QUEST::MergeFrom(const S_UPDATE_QUEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_UPDATE_QUEST)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_questinfo()) {
    _internal_mutable_questinfo()->::PROTOCOL::QuestInfo::MergeFrom(from._internal_questinfo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_UPDATE_QUEST::CopyFrom(const S_UPDATE_QUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_UPDATE_QUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_UPDATE_QUEST::IsInitialized() const {
  return true;
}

void S_UPDATE_QUEST::InternalSwap(S_UPDATE_QUEST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(questinfo_, other->questinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_UPDATE_QUEST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[47]);
}

// ===================================================================

class C_TEST::_Internal {
 public:
};

C_TEST::C_TEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_TEST)
}
C_TEST::C_TEST(const C_TEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&testint_, &from.testint_,
    static_cast<size_t>(reinterpret_cast<char*>(&testbool_) -
    reinterpret_cast<char*>(&testint_)) + sizeof(testbool_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_TEST)
}

inline void C_TEST::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&testint_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&testbool_) -
    reinterpret_cast<char*>(&testint_)) + sizeof(testbool_));
}

C_TEST::~C_TEST() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_TEST)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_TEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_TEST::ArenaDtor(void* object) {
  C_TEST* _this = reinterpret_cast< C_TEST* >(object);
  (void)_this;
}
void C_TEST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_TEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_TEST::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_TEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&testint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&testbool_) -
      reinterpret_cast<char*>(&testint_)) + sizeof(testbool_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_TEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 testint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          testint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool testbool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          testbool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_TEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_TEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 testint = 1;
  if (this->_internal_testint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_testint(), target);
  }

  // bool testbool = 2;
  if (this->_internal_testbool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_testbool(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_TEST)
  return target;
}

size_t C_TEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_TEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 testint = 1;
  if (this->_internal_testint() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_testint());
  }

  // bool testbool = 2;
  if (this->_internal_testbool() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_TEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_TEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_TEST::GetClassData() const { return &_class_data_; }

void C_TEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_TEST *>(to)->MergeFrom(
      static_cast<const C_TEST &>(from));
}


void C_TEST::MergeFrom(const C_TEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_TEST)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_testint() != 0) {
    _internal_set_testint(from._internal_testint());
  }
  if (from._internal_testbool() != 0) {
    _internal_set_testbool(from._internal_testbool());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_TEST::CopyFrom(const C_TEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_TEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_TEST::IsInitialized() const {
  return true;
}

void C_TEST::InternalSwap(C_TEST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_TEST, testbool_)
      + sizeof(C_TEST::testbool_)
      - PROTOBUF_FIELD_OFFSET(C_TEST, testint_)>(
          reinterpret_cast<char*>(&testint_),
          reinterpret_cast<char*>(&other->testint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_TEST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[48]);
}

// ===================================================================

class S_TEST::_Internal {
 public:
};

S_TEST::S_TEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_TEST)
}
S_TEST::S_TEST(const S_TEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&testint_, &from.testint_,
    static_cast<size_t>(reinterpret_cast<char*>(&testbool_) -
    reinterpret_cast<char*>(&testint_)) + sizeof(testbool_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_TEST)
}

inline void S_TEST::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&testint_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&testbool_) -
    reinterpret_cast<char*>(&testint_)) + sizeof(testbool_));
}

S_TEST::~S_TEST() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_TEST)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_TEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_TEST::ArenaDtor(void* object) {
  S_TEST* _this = reinterpret_cast< S_TEST* >(object);
  (void)_this;
}
void S_TEST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_TEST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_TEST::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_TEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&testint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&testbool_) -
      reinterpret_cast<char*>(&testint_)) + sizeof(testbool_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_TEST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 testint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          testint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool testbool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          testbool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_TEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_TEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 testint = 1;
  if (this->_internal_testint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_testint(), target);
  }

  // bool testbool = 2;
  if (this->_internal_testbool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_testbool(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_TEST)
  return target;
}

size_t S_TEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_TEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 testint = 1;
  if (this->_internal_testint() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_testint());
  }

  // bool testbool = 2;
  if (this->_internal_testbool() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_TEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_TEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_TEST::GetClassData() const { return &_class_data_; }

void S_TEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_TEST *>(to)->MergeFrom(
      static_cast<const S_TEST &>(from));
}


void S_TEST::MergeFrom(const S_TEST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_TEST)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_testint() != 0) {
    _internal_set_testint(from._internal_testint());
  }
  if (from._internal_testbool() != 0) {
    _internal_set_testbool(from._internal_testbool());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_TEST::CopyFrom(const S_TEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_TEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_TEST::IsInitialized() const {
  return true;
}

void S_TEST::InternalSwap(S_TEST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_TEST, testbool_)
      + sizeof(S_TEST::testbool_)
      - PROTOBUF_FIELD_OFFSET(S_TEST, testint_)>(
          reinterpret_cast<char*>(&testint_),
          reinterpret_cast<char*>(&other->testint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_TEST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[49]);
}

// ===================================================================

class C_BOT_LOGIN::_Internal {
 public:
};

C_BOT_LOGIN::C_BOT_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_BOT_LOGIN)
}
C_BOT_LOGIN::C_BOT_LOGIN(const C_BOT_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_BOT_LOGIN)
}

inline void C_BOT_LOGIN::SharedCtor() {
test_ = false;
}

C_BOT_LOGIN::~C_BOT_LOGIN() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_BOT_LOGIN)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_BOT_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_BOT_LOGIN::ArenaDtor(void* object) {
  C_BOT_LOGIN* _this = reinterpret_cast< C_BOT_LOGIN* >(object);
  (void)_this;
}
void C_BOT_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_BOT_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_BOT_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_BOT_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_BOT_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_BOT_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_BOT_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool test = 1;
  if (this->_internal_test() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_BOT_LOGIN)
  return target;
}

size_t C_BOT_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_BOT_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool test = 1;
  if (this->_internal_test() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_BOT_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_BOT_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_BOT_LOGIN::GetClassData() const { return &_class_data_; }

void C_BOT_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_BOT_LOGIN *>(to)->MergeFrom(
      static_cast<const C_BOT_LOGIN &>(from));
}


void C_BOT_LOGIN::MergeFrom(const C_BOT_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_BOT_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_test() != 0) {
    _internal_set_test(from._internal_test());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_BOT_LOGIN::CopyFrom(const C_BOT_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_BOT_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_BOT_LOGIN::IsInitialized() const {
  return true;
}

void C_BOT_LOGIN::InternalSwap(C_BOT_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_BOT_LOGIN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[50]);
}

// ===================================================================

class PFVector::_Internal {
 public:
};

PFVector::PFVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.PFVector)
}
PFVector::PFVector(const PFVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.PFVector)
}

inline void PFVector::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

PFVector::~PFVector() {
  // @@protoc_insertion_point(destructor:PROTOCOL.PFVector)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PFVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PFVector::ArenaDtor(void* object) {
  PFVector* _this = reinterpret_cast< PFVector* >(object);
  (void)_this;
}
void PFVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PFVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PFVector::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.PFVector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PFVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PFVector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.PFVector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.PFVector)
  return target;
}

size_t PFVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.PFVector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PFVector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PFVector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PFVector::GetClassData() const { return &_class_data_; }

void PFVector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PFVector *>(to)->MergeFrom(
      static_cast<const PFVector &>(from));
}


void PFVector::MergeFrom(const PFVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.PFVector)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PFVector::CopyFrom(const PFVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.PFVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PFVector::IsInitialized() const {
  return true;
}

void PFVector::InternalSwap(PFVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PFVector, z_)
      + sizeof(PFVector::z_)
      - PROTOBUF_FIELD_OFFSET(PFVector, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PFVector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[51]);
}

// ===================================================================

class AI_C_PATHFIND::_Internal {
 public:
  static const ::PROTOCOL::PFVector& sp(const AI_C_PATHFIND* msg);
  static const ::PROTOCOL::PFVector& ep(const AI_C_PATHFIND* msg);
};

const ::PROTOCOL::PFVector&
AI_C_PATHFIND::_Internal::sp(const AI_C_PATHFIND* msg) {
  return *msg->sp_;
}
const ::PROTOCOL::PFVector&
AI_C_PATHFIND::_Internal::ep(const AI_C_PATHFIND* msg) {
  return *msg->ep_;
}
AI_C_PATHFIND::AI_C_PATHFIND(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.AI_C_PATHFIND)
}
AI_C_PATHFIND::AI_C_PATHFIND(const AI_C_PATHFIND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sp()) {
    sp_ = new ::PROTOCOL::PFVector(*from.sp_);
  } else {
    sp_ = nullptr;
  }
  if (from._internal_has_ep()) {
    ep_ = new ::PROTOCOL::PFVector(*from.ep_);
  } else {
    ep_ = nullptr;
  }
  ::memcpy(&monsterid_, &from.monsterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&monsterid_)) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.AI_C_PATHFIND)
}

inline void AI_C_PATHFIND::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&sp_)) + sizeof(radius_));
}

AI_C_PATHFIND::~AI_C_PATHFIND() {
  // @@protoc_insertion_point(destructor:PROTOCOL.AI_C_PATHFIND)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AI_C_PATHFIND::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sp_;
  if (this != internal_default_instance()) delete ep_;
}

void AI_C_PATHFIND::ArenaDtor(void* object) {
  AI_C_PATHFIND* _this = reinterpret_cast< AI_C_PATHFIND* >(object);
  (void)_this;
}
void AI_C_PATHFIND::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AI_C_PATHFIND::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AI_C_PATHFIND::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.AI_C_PATHFIND)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && sp_ != nullptr) {
    delete sp_;
  }
  sp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ep_ != nullptr) {
    delete ep_;
  }
  ep_ = nullptr;
  ::memset(&monsterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&monsterid_)) + sizeof(radius_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AI_C_PATHFIND::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 monsterid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mapid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.PFVector sp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.PFVector ep = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ep(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool random = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          random_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float radius = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AI_C_PATHFIND::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.AI_C_PATHFIND)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 monsterid = 1;
  if (this->_internal_monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_monsterid(), target);
  }

  // int32 mapid = 2;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mapid(), target);
  }

  // .PROTOCOL.PFVector sp = 3;
  if (this->_internal_has_sp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sp(this), target, stream);
  }

  // .PROTOCOL.PFVector ep = 4;
  if (this->_internal_has_ep()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ep(this), target, stream);
  }

  // bool random = 5;
  if (this->_internal_random() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_random(), target);
  }

  // float radius = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.AI_C_PATHFIND)
  return target;
}

size_t AI_C_PATHFIND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.AI_C_PATHFIND)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.PFVector sp = 3;
  if (this->_internal_has_sp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sp_);
  }

  // .PROTOCOL.PFVector ep = 4;
  if (this->_internal_has_ep()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ep_);
  }

  // int32 monsterid = 1;
  if (this->_internal_monsterid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_monsterid());
  }

  // int32 mapid = 2;
  if (this->_internal_mapid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mapid());
  }

  // bool random = 5;
  if (this->_internal_random() != 0) {
    total_size += 1 + 1;
  }

  // float radius = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AI_C_PATHFIND::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AI_C_PATHFIND::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AI_C_PATHFIND::GetClassData() const { return &_class_data_; }

void AI_C_PATHFIND::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AI_C_PATHFIND *>(to)->MergeFrom(
      static_cast<const AI_C_PATHFIND &>(from));
}


void AI_C_PATHFIND::MergeFrom(const AI_C_PATHFIND& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.AI_C_PATHFIND)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sp()) {
    _internal_mutable_sp()->::PROTOCOL::PFVector::MergeFrom(from._internal_sp());
  }
  if (from._internal_has_ep()) {
    _internal_mutable_ep()->::PROTOCOL::PFVector::MergeFrom(from._internal_ep());
  }
  if (from._internal_monsterid() != 0) {
    _internal_set_monsterid(from._internal_monsterid());
  }
  if (from._internal_mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_random() != 0) {
    _internal_set_random(from._internal_random());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _internal_set_radius(from._internal_radius());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AI_C_PATHFIND::CopyFrom(const AI_C_PATHFIND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.AI_C_PATHFIND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AI_C_PATHFIND::IsInitialized() const {
  return true;
}

void AI_C_PATHFIND::InternalSwap(AI_C_PATHFIND* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AI_C_PATHFIND, radius_)
      + sizeof(AI_C_PATHFIND::radius_)
      - PROTOBUF_FIELD_OFFSET(AI_C_PATHFIND, sp_)>(
          reinterpret_cast<char*>(&sp_),
          reinterpret_cast<char*>(&other->sp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AI_C_PATHFIND::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[52]);
}

// ===================================================================

class AI_S_PATHFIND::_Internal {
 public:
};

AI_S_PATHFIND::AI_S_PATHFIND(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  paths_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.AI_S_PATHFIND)
}
AI_S_PATHFIND::AI_S_PATHFIND(const AI_S_PATHFIND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&monsterid_, &from.monsterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&monsterid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.AI_S_PATHFIND)
}

inline void AI_S_PATHFIND::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&monsterid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&monsterid_)) + sizeof(result_));
}

AI_S_PATHFIND::~AI_S_PATHFIND() {
  // @@protoc_insertion_point(destructor:PROTOCOL.AI_S_PATHFIND)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AI_S_PATHFIND::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AI_S_PATHFIND::ArenaDtor(void* object) {
  AI_S_PATHFIND* _this = reinterpret_cast< AI_S_PATHFIND* >(object);
  (void)_this;
}
void AI_S_PATHFIND::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AI_S_PATHFIND::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AI_S_PATHFIND::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.AI_S_PATHFIND)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  ::memset(&monsterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&monsterid_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AI_S_PATHFIND::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 monsterid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PROTOCOL.PFVector paths = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AI_S_PATHFIND::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.AI_S_PATHFIND)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 monsterid = 1;
  if (this->_internal_monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_monsterid(), target);
  }

  // bool result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  // repeated .PROTOCOL.PFVector paths = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.AI_S_PATHFIND)
  return target;
}

size_t AI_S_PATHFIND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.AI_S_PATHFIND)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.PFVector paths = 3;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 monsterid = 1;
  if (this->_internal_monsterid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_monsterid());
  }

  // bool result = 2;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AI_S_PATHFIND::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AI_S_PATHFIND::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AI_S_PATHFIND::GetClassData() const { return &_class_data_; }

void AI_S_PATHFIND::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AI_S_PATHFIND *>(to)->MergeFrom(
      static_cast<const AI_S_PATHFIND &>(from));
}


void AI_S_PATHFIND::MergeFrom(const AI_S_PATHFIND& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.AI_S_PATHFIND)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  if (from._internal_monsterid() != 0) {
    _internal_set_monsterid(from._internal_monsterid());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AI_S_PATHFIND::CopyFrom(const AI_S_PATHFIND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.AI_S_PATHFIND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AI_S_PATHFIND::IsInitialized() const {
  return true;
}

void AI_S_PATHFIND::InternalSwap(AI_S_PATHFIND* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  paths_.InternalSwap(&other->paths_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AI_S_PATHFIND, result_)
      + sizeof(AI_S_PATHFIND::result_)
      - PROTOBUF_FIELD_OFFSET(AI_S_PATHFIND, monsterid_)>(
          reinterpret_cast<char*>(&monsterid_),
          reinterpret_cast<char*>(&other->monsterid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AI_S_PATHFIND::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[53]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PROTOCOL
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PROTOCOL::Position* Arena::CreateMaybeMessage< ::PROTOCOL::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::Stat* Arena::CreateMaybeMessage< ::PROTOCOL::Stat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::Stat >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::ObjectInfo* Arena::CreateMaybeMessage< ::PROTOCOL::ObjectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::ObjectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::LobbyPlayerInfo* Arena::CreateMaybeMessage< ::PROTOCOL::LobbyPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::LobbyPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::Skill* Arena::CreateMaybeMessage< ::PROTOCOL::Skill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::Skill >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::ItemInfo* Arena::CreateMaybeMessage< ::PROTOCOL::ItemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::ItemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::QuestInfo* Arena::CreateMaybeMessage< ::PROTOCOL::QuestInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::QuestInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_LOGIN* Arena::CreateMaybeMessage< ::PROTOCOL::C_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_LOGIN* Arena::CreateMaybeMessage< ::PROTOCOL::S_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_ENTER_ROOM* Arena::CreateMaybeMessage< ::PROTOCOL::C_ENTER_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_ENTER_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_ENTER_ROOM* Arena::CreateMaybeMessage< ::PROTOCOL::S_ENTER_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_ENTER_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_LEAVE_ROOM* Arena::CreateMaybeMessage< ::PROTOCOL::C_LEAVE_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_LEAVE_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_LEAVE_ROOM* Arena::CreateMaybeMessage< ::PROTOCOL::S_LEAVE_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_LEAVE_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_SPAWN* Arena::CreateMaybeMessage< ::PROTOCOL::C_SPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_SPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_SPAWN* Arena::CreateMaybeMessage< ::PROTOCOL::S_SPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_SPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_DESPAWN* Arena::CreateMaybeMessage< ::PROTOCOL::C_DESPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_DESPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_DESPAWN* Arena::CreateMaybeMessage< ::PROTOCOL::S_DESPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_DESPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_MOVE* Arena::CreateMaybeMessage< ::PROTOCOL::C_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_MOVE* Arena::CreateMaybeMessage< ::PROTOCOL::S_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_SKILL* Arena::CreateMaybeMessage< ::PROTOCOL::C_SKILL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_SKILL >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_SKILL* Arena::CreateMaybeMessage< ::PROTOCOL::S_SKILL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_SKILL >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_CHAT* Arena::CreateMaybeMessage< ::PROTOCOL::C_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_CHAT* Arena::CreateMaybeMessage< ::PROTOCOL::S_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_CHANGE_HP* Arena::CreateMaybeMessage< ::PROTOCOL::S_CHANGE_HP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_CHANGE_HP >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_DIE* Arena::CreateMaybeMessage< ::PROTOCOL::S_DIE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_DIE >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_ITEMLIST* Arena::CreateMaybeMessage< ::PROTOCOL::S_ITEMLIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_ITEMLIST >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_ADD_ITEM* Arena::CreateMaybeMessage< ::PROTOCOL::C_ADD_ITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_ADD_ITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_ADD_ITEM* Arena::CreateMaybeMessage< ::PROTOCOL::S_ADD_ITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_ADD_ITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_UPDATE_ITEM* Arena::CreateMaybeMessage< ::PROTOCOL::S_UPDATE_ITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_UPDATE_ITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_REMOVE_ITEM* Arena::CreateMaybeMessage< ::PROTOCOL::S_REMOVE_ITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_REMOVE_ITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_EQUIP_ITEM* Arena::CreateMaybeMessage< ::PROTOCOL::C_EQUIP_ITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_EQUIP_ITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_EQUIP_ITEM* Arena::CreateMaybeMessage< ::PROTOCOL::S_EQUIP_ITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_EQUIP_ITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_USE_ITEM* Arena::CreateMaybeMessage< ::PROTOCOL::C_USE_ITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_USE_ITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_USE_ITEM* Arena::CreateMaybeMessage< ::PROTOCOL::S_USE_ITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_USE_ITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_CHANGE_STAT* Arena::CreateMaybeMessage< ::PROTOCOL::S_CHANGE_STAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_CHANGE_STAT >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_CREATE_PLAYER* Arena::CreateMaybeMessage< ::PROTOCOL::C_CREATE_PLAYER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_CREATE_PLAYER >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_CREATE_PLAYER* Arena::CreateMaybeMessage< ::PROTOCOL::S_CREATE_PLAYER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_CREATE_PLAYER >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_ADD_EXP* Arena::CreateMaybeMessage< ::PROTOCOL::S_ADD_EXP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_ADD_EXP >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_LEVEL_UP* Arena::CreateMaybeMessage< ::PROTOCOL::S_LEVEL_UP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_LEVEL_UP >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_ADD_QUEST* Arena::CreateMaybeMessage< ::PROTOCOL::C_ADD_QUEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_ADD_QUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_ADD_QUEST* Arena::CreateMaybeMessage< ::PROTOCOL::S_ADD_QUEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_ADD_QUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_QUESTLIST* Arena::CreateMaybeMessage< ::PROTOCOL::S_QUESTLIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_QUESTLIST >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_REMOVE_QUEST* Arena::CreateMaybeMessage< ::PROTOCOL::C_REMOVE_QUEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_REMOVE_QUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_REMOVE_QUEST* Arena::CreateMaybeMessage< ::PROTOCOL::S_REMOVE_QUEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_REMOVE_QUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_COMPLETE_QUEST* Arena::CreateMaybeMessage< ::PROTOCOL::C_COMPLETE_QUEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_COMPLETE_QUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_COMPLETE_QUEST* Arena::CreateMaybeMessage< ::PROTOCOL::S_COMPLETE_QUEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_COMPLETE_QUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_UPDATE_QUEST* Arena::CreateMaybeMessage< ::PROTOCOL::C_UPDATE_QUEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_UPDATE_QUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_UPDATE_QUEST* Arena::CreateMaybeMessage< ::PROTOCOL::S_UPDATE_QUEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_UPDATE_QUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_TEST* Arena::CreateMaybeMessage< ::PROTOCOL::C_TEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_TEST >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_TEST* Arena::CreateMaybeMessage< ::PROTOCOL::S_TEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_TEST >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_BOT_LOGIN* Arena::CreateMaybeMessage< ::PROTOCOL::C_BOT_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_BOT_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::PFVector* Arena::CreateMaybeMessage< ::PROTOCOL::PFVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::PFVector >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::AI_C_PATHFIND* Arena::CreateMaybeMessage< ::PROTOCOL::AI_C_PATHFIND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::AI_C_PATHFIND >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::AI_S_PATHFIND* Arena::CreateMaybeMessage< ::PROTOCOL::AI_S_PATHFIND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::AI_S_PATHFIND >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
