// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol3.proto

#include "Protocol3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PROTOCOL {
constexpr Position::Position(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : locationx_(0)
  , locationy_(0)
  , locationz_(0)
  , rotationyaw_(0)
  , rotationpitch_(0)
  , rotationroll_(0)
  , velocityx_(0)
  , velocityy_(0)
  , velocityz_(0){}
struct PositionDefaultTypeInternal {
  constexpr PositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionDefaultTypeInternal _Position_default_instance_;
constexpr Stat::Stat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : level_(0)
  , totalexp_(0)
  , exp_(0)
  , maxhp_(0)
  , hp_(0)
  , damage_(0)
  , defence_(0)
  , speed_(0)
  , attackdistance_(0)
  , noticedistance_(0)
  , returndistance_(0)
  , attackcooltime_(0){}
struct StatDefaultTypeInternal {
  constexpr StatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatDefaultTypeInternal() {}
  union {
    Stat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatDefaultTypeInternal _Stat_default_instance_;
constexpr ObjectInfo::ObjectInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pos_(nullptr)
  , stat_(nullptr)
  , objectid_(0)
  , playerdbid_(0)
  , objecttype_(0)

  , typetemplateid_(0){}
struct ObjectInfoDefaultTypeInternal {
  constexpr ObjectInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectInfoDefaultTypeInternal() {}
  union {
    ObjectInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
constexpr LobbyPlayerInfo::LobbyPlayerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stat_(nullptr)
  , playerdbid_(0){}
struct LobbyPlayerInfoDefaultTypeInternal {
  constexpr LobbyPlayerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LobbyPlayerInfoDefaultTypeInternal() {}
  union {
    LobbyPlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LobbyPlayerInfoDefaultTypeInternal _LobbyPlayerInfo_default_instance_;
constexpr Skill::Skill(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : skillid_(0){}
struct SkillDefaultTypeInternal {
  constexpr SkillDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SkillDefaultTypeInternal() {}
  union {
    Skill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SkillDefaultTypeInternal _Skill_default_instance_;
constexpr ItemInfo::ItemInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemdbid_(0)
  , templateid_(0)
  , count_(0)
  , slot_(0)
  , equipped_(false)
  , playerdbid_(0){}
struct ItemInfoDefaultTypeInternal {
  constexpr ItemInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemInfoDefaultTypeInternal() {}
  union {
    ItemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemInfoDefaultTypeInternal _ItemInfo_default_instance_;
constexpr QuestInfo::QuestInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : questdbid_(0)
  , templateid_(0)
  , progress_(0)
  , completed_(false)
  , playerdbid_(0){}
struct QuestInfoDefaultTypeInternal {
  constexpr QuestInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuestInfoDefaultTypeInternal() {}
  union {
    QuestInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuestInfoDefaultTypeInternal _QuestInfo_default_instance_;
constexpr C_Login::C_Login(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pw_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tokenstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct C_LoginDefaultTypeInternal {
  constexpr C_LoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_LoginDefaultTypeInternal() {}
  union {
    C_Login _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_LoginDefaultTypeInternal _C_Login_default_instance_;
constexpr S_Login::S_Login(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objectinfos_()
  , lobbyplayerinfos_()
  , success_(false){}
struct S_LoginDefaultTypeInternal {
  constexpr S_LoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_LoginDefaultTypeInternal() {}
  union {
    S_Login _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_LoginDefaultTypeInternal _S_Login_default_instance_;
constexpr C_Enter_Room::C_Enter_Room(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr)
  , roomnum_(uint64_t{0u}){}
struct C_Enter_RoomDefaultTypeInternal {
  constexpr C_Enter_RoomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Enter_RoomDefaultTypeInternal() {}
  union {
    C_Enter_Room _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Enter_RoomDefaultTypeInternal _C_Enter_Room_default_instance_;
constexpr S_Enter_Room::S_Enter_Room(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , object_(nullptr)
  , success_(false){}
struct S_Enter_RoomDefaultTypeInternal {
  constexpr S_Enter_RoomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Enter_RoomDefaultTypeInternal() {}
  union {
    S_Enter_Room _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Enter_RoomDefaultTypeInternal _S_Enter_Room_default_instance_;
constexpr C_Leave_Room::C_Leave_Room(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr){}
struct C_Leave_RoomDefaultTypeInternal {
  constexpr C_Leave_RoomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_Leave_RoomDefaultTypeInternal() {}
  union {
    C_Leave_Room _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_Leave_RoomDefaultTypeInternal _C_Leave_Room_default_instance_;
constexpr S_Leave_Room::S_Leave_Room(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr)
  , success_(false){}
struct S_Leave_RoomDefaultTypeInternal {
  constexpr S_Leave_RoomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_Leave_RoomDefaultTypeInternal() {}
  union {
    S_Leave_Room _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_Leave_RoomDefaultTypeInternal _S_Leave_Room_default_instance_;
constexpr C_Spawn::C_Spawn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr){}
struct C_SpawnDefaultTypeInternal {
  constexpr C_SpawnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_SpawnDefaultTypeInternal() {}
  union {
    C_Spawn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_SpawnDefaultTypeInternal _C_Spawn_default_instance_;
constexpr S_Spawn::S_Spawn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_()
  , success_(false){}
struct S_SpawnDefaultTypeInternal {
  constexpr S_SpawnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_SpawnDefaultTypeInternal() {}
  union {
    S_Spawn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_SpawnDefaultTypeInternal _S_Spawn_default_instance_;
constexpr S_DeSpawn::S_DeSpawn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objectids_()
  , _objectids_cached_byte_size_(0){}
struct S_DeSpawnDefaultTypeInternal {
  constexpr S_DeSpawnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_DeSpawnDefaultTypeInternal() {}
  union {
    S_DeSpawn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_DeSpawnDefaultTypeInternal _S_DeSpawn_default_instance_;
constexpr C_Move::C_Move(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr){}
struct C_MoveDefaultTypeInternal {
  constexpr C_MoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_MoveDefaultTypeInternal() {}
  union {
    C_Move _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_MoveDefaultTypeInternal _C_Move_default_instance_;
constexpr S_Move::S_Move(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr){}
struct S_MoveDefaultTypeInternal {
  constexpr S_MoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_MoveDefaultTypeInternal() {}
  union {
    S_Move _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_MoveDefaultTypeInternal _S_Move_default_instance_;
constexpr C_Skill::C_Skill(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : victims_()
  , _victims_cached_byte_size_(0)
  , skillid_(0)
  , attacker_(0){}
struct C_SkillDefaultTypeInternal {
  constexpr C_SkillDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_SkillDefaultTypeInternal() {}
  union {
    C_Skill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_SkillDefaultTypeInternal _C_Skill_default_instance_;
constexpr S_Skill::S_Skill(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : victims_()
  , _victims_cached_byte_size_(0)
  , skillid_(0)
  , attacker_(0){}
struct S_SkillDefaultTypeInternal {
  constexpr S_SkillDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_SkillDefaultTypeInternal() {}
  union {
    S_Skill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_SkillDefaultTypeInternal _S_Skill_default_instance_;
constexpr C_Chat::C_Chat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct C_ChatDefaultTypeInternal {
  constexpr C_ChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_ChatDefaultTypeInternal() {}
  union {
    C_Chat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_ChatDefaultTypeInternal _C_Chat_default_instance_;
constexpr S_Chat::S_Chat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , object_(nullptr){}
struct S_ChatDefaultTypeInternal {
  constexpr S_ChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ChatDefaultTypeInternal() {}
  union {
    S_Chat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ChatDefaultTypeInternal _S_Chat_default_instance_;
constexpr S_ChangeHp::S_ChangeHp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(0)
  , hp_(0){}
struct S_ChangeHpDefaultTypeInternal {
  constexpr S_ChangeHpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ChangeHpDefaultTypeInternal() {}
  union {
    S_ChangeHp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ChangeHpDefaultTypeInternal _S_ChangeHp_default_instance_;
constexpr S_Die::S_Die(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : victim_(0)
  , attacker_(0){}
struct S_DieDefaultTypeInternal {
  constexpr S_DieDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_DieDefaultTypeInternal() {}
  union {
    S_Die _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_DieDefaultTypeInternal _S_Die_default_instance_;
constexpr S_ItemList::S_ItemList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct S_ItemListDefaultTypeInternal {
  constexpr S_ItemListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ItemListDefaultTypeInternal() {}
  union {
    S_ItemList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ItemListDefaultTypeInternal _S_ItemList_default_instance_;
constexpr C_AddItem::C_AddItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct C_AddItemDefaultTypeInternal {
  constexpr C_AddItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_AddItemDefaultTypeInternal() {}
  union {
    C_AddItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_AddItemDefaultTypeInternal _C_AddItem_default_instance_;
constexpr S_AddItem::S_AddItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct S_AddItemDefaultTypeInternal {
  constexpr S_AddItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_AddItemDefaultTypeInternal() {}
  union {
    S_AddItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_AddItemDefaultTypeInternal _S_AddItem_default_instance_;
constexpr S_UpdateItem::S_UpdateItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct S_UpdateItemDefaultTypeInternal {
  constexpr S_UpdateItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_UpdateItemDefaultTypeInternal() {}
  union {
    S_UpdateItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_UpdateItemDefaultTypeInternal _S_UpdateItem_default_instance_;
constexpr S_RemoveItem::S_RemoveItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slots_()
  , _slots_cached_byte_size_(0){}
struct S_RemoveItemDefaultTypeInternal {
  constexpr S_RemoveItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_RemoveItemDefaultTypeInternal() {}
  union {
    S_RemoveItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_RemoveItemDefaultTypeInternal _S_RemoveItem_default_instance_;
constexpr C_EquipItem::C_EquipItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemdbid_(0)
  , slot_(0)
  , equip_(false){}
struct C_EquipItemDefaultTypeInternal {
  constexpr C_EquipItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_EquipItemDefaultTypeInternal() {}
  union {
    C_EquipItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_EquipItemDefaultTypeInternal _C_EquipItem_default_instance_;
constexpr S_EquipItem::S_EquipItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemdbid_(0)
  , slot_(0)
  , equip_(false){}
struct S_EquipItemDefaultTypeInternal {
  constexpr S_EquipItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_EquipItemDefaultTypeInternal() {}
  union {
    S_EquipItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_EquipItemDefaultTypeInternal _S_EquipItem_default_instance_;
constexpr C_UseItem::C_UseItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemdbid_(0)
  , slot_(0)
  , use_(false){}
struct C_UseItemDefaultTypeInternal {
  constexpr C_UseItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_UseItemDefaultTypeInternal() {}
  union {
    C_UseItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_UseItemDefaultTypeInternal _C_UseItem_default_instance_;
constexpr S_UseItem::S_UseItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_(nullptr){}
struct S_UseItemDefaultTypeInternal {
  constexpr S_UseItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_UseItemDefaultTypeInternal() {}
  union {
    S_UseItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_UseItemDefaultTypeInternal _S_UseItem_default_instance_;
constexpr S_ChangeStat::S_ChangeStat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr){}
struct S_ChangeStatDefaultTypeInternal {
  constexpr S_ChangeStatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ChangeStatDefaultTypeInternal() {}
  union {
    S_ChangeStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ChangeStatDefaultTypeInternal _S_ChangeStat_default_instance_;
constexpr C_CreatePlayer::C_CreatePlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct C_CreatePlayerDefaultTypeInternal {
  constexpr C_CreatePlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_CreatePlayerDefaultTypeInternal() {}
  union {
    C_CreatePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_CreatePlayerDefaultTypeInternal _C_CreatePlayer_default_instance_;
constexpr S_CreatePlayer::S_CreatePlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr){}
struct S_CreatePlayerDefaultTypeInternal {
  constexpr S_CreatePlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CreatePlayerDefaultTypeInternal() {}
  union {
    S_CreatePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CreatePlayerDefaultTypeInternal _S_CreatePlayer_default_instance_;
constexpr S_AddExp::S_AddExp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exp_(0){}
struct S_AddExpDefaultTypeInternal {
  constexpr S_AddExpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_AddExpDefaultTypeInternal() {}
  union {
    S_AddExp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_AddExpDefaultTypeInternal _S_AddExp_default_instance_;
constexpr S_LevelUp::S_LevelUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(nullptr){}
struct S_LevelUpDefaultTypeInternal {
  constexpr S_LevelUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_LevelUpDefaultTypeInternal() {}
  union {
    S_LevelUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_LevelUpDefaultTypeInternal _S_LevelUp_default_instance_;
constexpr C_AddQuest::C_AddQuest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quest_(nullptr){}
struct C_AddQuestDefaultTypeInternal {
  constexpr C_AddQuestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_AddQuestDefaultTypeInternal() {}
  union {
    C_AddQuest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_AddQuestDefaultTypeInternal _C_AddQuest_default_instance_;
constexpr S_AddQuest::S_AddQuest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quest_(nullptr)
  , result_(false){}
struct S_AddQuestDefaultTypeInternal {
  constexpr S_AddQuestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_AddQuestDefaultTypeInternal() {}
  union {
    S_AddQuest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_AddQuestDefaultTypeInternal _S_AddQuest_default_instance_;
constexpr S_QuestList::S_QuestList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quests_(){}
struct S_QuestListDefaultTypeInternal {
  constexpr S_QuestListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_QuestListDefaultTypeInternal() {}
  union {
    S_QuestList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_QuestListDefaultTypeInternal _S_QuestList_default_instance_;
constexpr C_RemoveQuest::C_RemoveQuest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : questdbid_(0){}
struct C_RemoveQuestDefaultTypeInternal {
  constexpr C_RemoveQuestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_RemoveQuestDefaultTypeInternal() {}
  union {
    C_RemoveQuest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_RemoveQuestDefaultTypeInternal _C_RemoveQuest_default_instance_;
constexpr S_RemoveQuest::S_RemoveQuest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(false)
  , questid_(0){}
struct S_RemoveQuestDefaultTypeInternal {
  constexpr S_RemoveQuestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_RemoveQuestDefaultTypeInternal() {}
  union {
    S_RemoveQuest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_RemoveQuestDefaultTypeInternal _S_RemoveQuest_default_instance_;
constexpr C_CompleteQuest::C_CompleteQuest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : questdbid_(0){}
struct C_CompleteQuestDefaultTypeInternal {
  constexpr C_CompleteQuestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_CompleteQuestDefaultTypeInternal() {}
  union {
    C_CompleteQuest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_CompleteQuestDefaultTypeInternal _C_CompleteQuest_default_instance_;
constexpr S_CompleteQuest::S_CompleteQuest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(false)
  , questid_(0){}
struct S_CompleteQuestDefaultTypeInternal {
  constexpr S_CompleteQuestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CompleteQuestDefaultTypeInternal() {}
  union {
    S_CompleteQuest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CompleteQuestDefaultTypeInternal _S_CompleteQuest_default_instance_;
constexpr C_UpdateQuest::C_UpdateQuest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : questinfo_(nullptr)
  , objectid_(0){}
struct C_UpdateQuestDefaultTypeInternal {
  constexpr C_UpdateQuestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_UpdateQuestDefaultTypeInternal() {}
  union {
    C_UpdateQuest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_UpdateQuestDefaultTypeInternal _C_UpdateQuest_default_instance_;
constexpr S_UpdateQuest::S_UpdateQuest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : questinfo_(nullptr){}
struct S_UpdateQuestDefaultTypeInternal {
  constexpr S_UpdateQuestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_UpdateQuestDefaultTypeInternal() {}
  union {
    S_UpdateQuest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_UpdateQuestDefaultTypeInternal _S_UpdateQuest_default_instance_;
constexpr C_Test::C_Test(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : testint_(0)
  , testbool_(false){}
struct C_TestDefaultTypeInternal {
  constexpr C_TestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_TestDefaultTypeInternal() {}
  union {
    C_Test _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_TestDefaultTypeInternal _C_Test_default_instance_;
constexpr S_Test::S_Test(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : testint_(0)
  , testbool_(false){}
struct S_TestDefaultTypeInternal {
  constexpr S_TestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_TestDefaultTypeInternal() {}
  union {
    S_Test _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_TestDefaultTypeInternal _S_Test_default_instance_;
}  // namespace PROTOCOL
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Protocol3_2eproto[49];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Protocol3_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Protocol3_2eproto = nullptr;

const uint32_t TableStruct_Protocol3_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Position, locationx_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Position, locationy_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Position, locationz_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Position, rotationyaw_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Position, rotationpitch_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Position, rotationroll_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Position, velocityx_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Position, velocityy_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Position, velocityz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, level_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, totalexp_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, exp_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, maxhp_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, hp_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, damage_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, defence_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, speed_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, attackdistance_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, noticedistance_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, returndistance_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Stat, attackcooltime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ObjectInfo, objectid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ObjectInfo, playerdbid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ObjectInfo, name_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ObjectInfo, objecttype_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ObjectInfo, typetemplateid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ObjectInfo, pos_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ObjectInfo, stat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::LobbyPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::LobbyPlayerInfo, playerdbid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::LobbyPlayerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::LobbyPlayerInfo, stat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Skill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::Skill, skillid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ItemInfo, itemdbid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ItemInfo, templateid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ItemInfo, count_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ItemInfo, slot_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ItemInfo, equipped_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::ItemInfo, playerdbid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::QuestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::QuestInfo, questdbid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::QuestInfo, templateid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::QuestInfo, progress_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::QuestInfo, completed_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::QuestInfo, playerdbid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Login, id_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Login, pw_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Login, tokenstring_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Login, success_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Login, objectinfos_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Login, lobbyplayerinfos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Enter_Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Enter_Room, roomnum_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Enter_Room, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Enter_Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Enter_Room, success_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Enter_Room, object_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Enter_Room, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Leave_Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Leave_Room, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Leave_Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Leave_Room, success_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Leave_Room, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Spawn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Spawn, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Spawn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Spawn, success_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Spawn, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_DeSpawn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_DeSpawn, objectids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Move, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Move, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Skill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Skill, skillid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Skill, attacker_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Skill, victims_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Skill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Skill, skillid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Skill, attacker_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Skill, victims_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Chat, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Chat, object_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Chat, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ChangeHp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ChangeHp, object_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ChangeHp, hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Die, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Die, victim_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Die, attacker_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ItemList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ItemList, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_AddItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_AddItem, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_AddItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_AddItem, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_UpdateItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_UpdateItem, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_RemoveItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_RemoveItem, slots_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_EquipItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_EquipItem, itemdbid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_EquipItem, slot_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_EquipItem, equip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_EquipItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_EquipItem, itemdbid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_EquipItem, slot_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_EquipItem, equip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_UseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_UseItem, itemdbid_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_UseItem, slot_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_UseItem, use_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_UseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_UseItem, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ChangeStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_ChangeStat, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_CreatePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_CreatePlayer, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_CreatePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_CreatePlayer, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_AddExp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_AddExp, exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_LevelUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_LevelUp, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_AddQuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_AddQuest, quest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_AddQuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_AddQuest, result_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_AddQuest, quest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_QuestList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_QuestList, quests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_RemoveQuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_RemoveQuest, questdbid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_RemoveQuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_RemoveQuest, result_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_RemoveQuest, questid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_CompleteQuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_CompleteQuest, questdbid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_CompleteQuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_CompleteQuest, result_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_CompleteQuest, questid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_UpdateQuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_UpdateQuest, questinfo_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_UpdateQuest, objectid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_UpdateQuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_UpdateQuest, questinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Test, testint_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::C_Test, testbool_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Test, testint_),
  PROTOBUF_FIELD_OFFSET(::PROTOCOL::S_Test, testbool_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PROTOCOL::Position)},
  { 15, -1, -1, sizeof(::PROTOCOL::Stat)},
  { 33, -1, -1, sizeof(::PROTOCOL::ObjectInfo)},
  { 46, -1, -1, sizeof(::PROTOCOL::LobbyPlayerInfo)},
  { 55, -1, -1, sizeof(::PROTOCOL::Skill)},
  { 62, -1, -1, sizeof(::PROTOCOL::ItemInfo)},
  { 74, -1, -1, sizeof(::PROTOCOL::QuestInfo)},
  { 85, -1, -1, sizeof(::PROTOCOL::C_Login)},
  { 94, -1, -1, sizeof(::PROTOCOL::S_Login)},
  { 103, -1, -1, sizeof(::PROTOCOL::C_Enter_Room)},
  { 111, -1, -1, sizeof(::PROTOCOL::S_Enter_Room)},
  { 120, -1, -1, sizeof(::PROTOCOL::C_Leave_Room)},
  { 127, -1, -1, sizeof(::PROTOCOL::S_Leave_Room)},
  { 135, -1, -1, sizeof(::PROTOCOL::C_Spawn)},
  { 142, -1, -1, sizeof(::PROTOCOL::S_Spawn)},
  { 150, -1, -1, sizeof(::PROTOCOL::S_DeSpawn)},
  { 157, -1, -1, sizeof(::PROTOCOL::C_Move)},
  { 164, -1, -1, sizeof(::PROTOCOL::S_Move)},
  { 171, -1, -1, sizeof(::PROTOCOL::C_Skill)},
  { 180, -1, -1, sizeof(::PROTOCOL::S_Skill)},
  { 189, -1, -1, sizeof(::PROTOCOL::C_Chat)},
  { 196, -1, -1, sizeof(::PROTOCOL::S_Chat)},
  { 204, -1, -1, sizeof(::PROTOCOL::S_ChangeHp)},
  { 212, -1, -1, sizeof(::PROTOCOL::S_Die)},
  { 220, -1, -1, sizeof(::PROTOCOL::S_ItemList)},
  { 227, -1, -1, sizeof(::PROTOCOL::C_AddItem)},
  { 234, -1, -1, sizeof(::PROTOCOL::S_AddItem)},
  { 241, -1, -1, sizeof(::PROTOCOL::S_UpdateItem)},
  { 248, -1, -1, sizeof(::PROTOCOL::S_RemoveItem)},
  { 255, -1, -1, sizeof(::PROTOCOL::C_EquipItem)},
  { 264, -1, -1, sizeof(::PROTOCOL::S_EquipItem)},
  { 273, -1, -1, sizeof(::PROTOCOL::C_UseItem)},
  { 282, -1, -1, sizeof(::PROTOCOL::S_UseItem)},
  { 289, -1, -1, sizeof(::PROTOCOL::S_ChangeStat)},
  { 296, -1, -1, sizeof(::PROTOCOL::C_CreatePlayer)},
  { 303, -1, -1, sizeof(::PROTOCOL::S_CreatePlayer)},
  { 310, -1, -1, sizeof(::PROTOCOL::S_AddExp)},
  { 317, -1, -1, sizeof(::PROTOCOL::S_LevelUp)},
  { 324, -1, -1, sizeof(::PROTOCOL::C_AddQuest)},
  { 331, -1, -1, sizeof(::PROTOCOL::S_AddQuest)},
  { 339, -1, -1, sizeof(::PROTOCOL::S_QuestList)},
  { 346, -1, -1, sizeof(::PROTOCOL::C_RemoveQuest)},
  { 353, -1, -1, sizeof(::PROTOCOL::S_RemoveQuest)},
  { 361, -1, -1, sizeof(::PROTOCOL::C_CompleteQuest)},
  { 368, -1, -1, sizeof(::PROTOCOL::S_CompleteQuest)},
  { 376, -1, -1, sizeof(::PROTOCOL::C_UpdateQuest)},
  { 384, -1, -1, sizeof(::PROTOCOL::S_UpdateQuest)},
  { 391, -1, -1, sizeof(::PROTOCOL::C_Test)},
  { 399, -1, -1, sizeof(::PROTOCOL::S_Test)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_Stat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_ObjectInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_LobbyPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_Skill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_ItemInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_QuestInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_Login_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_Login_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_Enter_Room_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_Enter_Room_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_Leave_Room_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_Leave_Room_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_Spawn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_Spawn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_DeSpawn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_Move_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_Move_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_Skill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_Skill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_Chat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_Chat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_ChangeHp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_Die_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_ItemList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_AddItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_AddItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_UpdateItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_RemoveItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_EquipItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_EquipItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_UseItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_UseItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_ChangeStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_CreatePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_CreatePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_AddExp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_LevelUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_AddQuest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_AddQuest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_QuestList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_RemoveQuest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_RemoveQuest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_CompleteQuest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_CompleteQuest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_UpdateQuest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_UpdateQuest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_C_Test_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PROTOCOL::_S_Test_default_instance_),
};

const char descriptor_table_protodef_Protocol3_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017Protocol3.proto\022\010PROTOCOL\"\276\001\n\010Position"
  "\022\021\n\tlocationx\030\001 \001(\002\022\021\n\tlocationy\030\002 \001(\002\022\021"
  "\n\tlocationz\030\003 \001(\002\022\023\n\013rotationyaw\030\004 \001(\002\022\025"
  "\n\rrotationpitch\030\005 \001(\002\022\024\n\014rotationroll\030\006 "
  "\001(\002\022\021\n\tvelocityx\030\007 \001(\002\022\021\n\tvelocityy\030\010 \001("
  "\002\022\021\n\tvelocityz\030\t \001(\002\"\337\001\n\004Stat\022\r\n\005level\030\001"
  " \001(\005\022\020\n\010totalExp\030\002 \001(\005\022\013\n\003exp\030\003 \001(\005\022\r\n\005m"
  "axhp\030\004 \001(\005\022\n\n\002hp\030\005 \001(\005\022\016\n\006damage\030\006 \001(\005\022\017"
  "\n\007defence\030\007 \001(\005\022\r\n\005speed\030\010 \001(\002\022\026\n\016attack"
  "distance\030\t \001(\002\022\026\n\016noticedistance\030\n \001(\002\022\026"
  "\n\016returndistance\030\013 \001(\002\022\026\n\016attackcooltime"
  "\030\014 \001(\002\"\305\001\n\nObjectInfo\022\020\n\010objectId\030\001 \001(\005\022"
  "\022\n\nplayerdbid\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022,\n\nobj"
  "ecttype\030\004 \001(\0162\030.PROTOCOL.GameObjectType\022"
  "\026\n\016typetemplateid\030\005 \001(\005\022\037\n\003pos\030\006 \001(\0132\022.P"
  "ROTOCOL.Position\022\034\n\004stat\030\007 \001(\0132\016.PROTOCO"
  "L.Stat\"Q\n\017LobbyPlayerInfo\022\022\n\nplayerdbid\030"
  "\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\034\n\004stat\030\003 \001(\0132\016.PROT"
  "OCOL.Stat\"\030\n\005Skill\022\017\n\007skillId\030\001 \001(\005\"s\n\010I"
  "temInfo\022\020\n\010itemDbId\030\001 \001(\005\022\022\n\ntemplateId\030"
  "\002 \001(\005\022\r\n\005count\030\003 \001(\005\022\014\n\004slot\030\004 \001(\005\022\020\n\010eq"
  "uipped\030\005 \001(\010\022\022\n\nplayerdbid\030\006 \001(\005\"k\n\tQues"
  "tInfo\022\021\n\tquestdbid\030\001 \001(\005\022\022\n\ntemplateid\030\002"
  " \001(\005\022\020\n\010progress\030\003 \001(\005\022\021\n\tcompleted\030\004 \001("
  "\010\022\022\n\nplayerdbid\030\005 \001(\005\"6\n\007C_Login\022\n\n\002id\030\001"
  " \001(\t\022\n\n\002pw\030\002 \001(\t\022\023\n\013tokenstring\030\003 \001(\t\"z\n"
  "\007S_Login\022\017\n\007success\030\001 \001(\010\022)\n\013objectinfos"
  "\030\002 \003(\0132\024.PROTOCOL.ObjectInfo\0223\n\020lobbypla"
  "yerinfos\030\003 \003(\0132\031.PROTOCOL.LobbyPlayerInf"
  "o\"E\n\014C_Enter_Room\022\017\n\007roomNum\030\001 \001(\004\022$\n\006ob"
  "ject\030\002 \001(\0132\024.PROTOCOL.ObjectInfo\"h\n\014S_En"
  "ter_Room\022\017\n\007success\030\001 \001(\010\022$\n\006object\030\002 \001("
  "\0132\024.PROTOCOL.ObjectInfo\022!\n\005items\030\003 \003(\0132\022"
  ".PROTOCOL.ItemInfo\"4\n\014C_Leave_Room\022$\n\006ob"
  "ject\030\001 \001(\0132\024.PROTOCOL.ObjectInfo\"E\n\014S_Le"
  "ave_Room\022\017\n\007success\030\001 \001(\010\022$\n\006object\030\002 \001("
  "\0132\024.PROTOCOL.ObjectInfo\"/\n\007C_Spawn\022$\n\006ob"
  "ject\030\001 \001(\0132\024.PROTOCOL.ObjectInfo\"@\n\007S_Sp"
  "awn\022\017\n\007success\030\001 \001(\010\022$\n\006object\030\002 \003(\0132\024.P"
  "ROTOCOL.ObjectInfo\"\036\n\tS_DeSpawn\022\021\n\tobjec"
  "tids\030\001 \003(\005\".\n\006C_Move\022$\n\006object\030\001 \001(\0132\024.P"
  "ROTOCOL.ObjectInfo\".\n\006S_Move\022$\n\006object\030\001"
  " \001(\0132\024.PROTOCOL.ObjectInfo\"=\n\007C_Skill\022\017\n"
  "\007skillid\030\001 \001(\005\022\020\n\010attacker\030\002 \001(\005\022\017\n\007vict"
  "ims\030\003 \003(\005\"=\n\007S_Skill\022\017\n\007skillid\030\001 \001(\005\022\020\n"
  "\010attacker\030\002 \001(\005\022\017\n\007victims\030\003 \003(\005\"\026\n\006C_Ch"
  "at\022\014\n\004text\030\001 \001(\t\"<\n\006S_Chat\022$\n\006object\030\001 \001"
  "(\0132\024.PROTOCOL.ObjectInfo\022\014\n\004text\030\002 \001(\t\"("
  "\n\nS_ChangeHp\022\016\n\006object\030\001 \001(\005\022\n\n\002hp\030\002 \001(\005"
  "\")\n\005S_Die\022\016\n\006victim\030\001 \001(\005\022\020\n\010attacker\030\002 "
  "\001(\005\"/\n\nS_ItemList\022!\n\005items\030\001 \003(\0132\022.PROTO"
  "COL.ItemInfo\".\n\tC_AddItem\022!\n\005items\030\001 \003(\013"
  "2\022.PROTOCOL.ItemInfo\".\n\tS_AddItem\022!\n\005ite"
  "ms\030\001 \003(\0132\022.PROTOCOL.ItemInfo\"1\n\014S_Update"
  "Item\022!\n\005items\030\001 \003(\0132\022.PROTOCOL.ItemInfo\""
  "\035\n\014S_RemoveItem\022\r\n\005slots\030\001 \003(\005\"<\n\013C_Equi"
  "pItem\022\020\n\010itemdbid\030\001 \001(\005\022\014\n\004slot\030\002 \001(\005\022\r\n"
  "\005equip\030\003 \001(\010\"<\n\013S_EquipItem\022\020\n\010itemdbid\030"
  "\001 \001(\005\022\014\n\004slot\030\002 \001(\005\022\r\n\005equip\030\003 \001(\010\"8\n\tC_"
  "UseItem\022\020\n\010itemdbid\030\001 \001(\005\022\014\n\004slot\030\002 \001(\005\022"
  "\013\n\003use\030\003 \001(\010\"-\n\tS_UseItem\022 \n\004item\030\001 \001(\0132"
  "\022.PROTOCOL.ItemInfo\"4\n\014S_ChangeStat\022$\n\006o"
  "bject\030\001 \001(\0132\024.PROTOCOL.ObjectInfo\"\036\n\016C_C"
  "reatePlayer\022\014\n\004name\030\001 \001(\t\"6\n\016S_CreatePla"
  "yer\022$\n\006object\030\001 \001(\0132\024.PROTOCOL.ObjectInf"
  "o\"\027\n\010S_AddExp\022\013\n\003exp\030\001 \001(\005\"/\n\tS_LevelUp\022"
  "\"\n\004info\030\001 \001(\0132\024.PROTOCOL.ObjectInfo\"0\n\nC"
  "_AddQuest\022\"\n\005quest\030\001 \001(\0132\023.PROTOCOL.Ques"
  "tInfo\"@\n\nS_AddQuest\022\016\n\006result\030\001 \001(\010\022\"\n\005q"
  "uest\030\002 \001(\0132\023.PROTOCOL.QuestInfo\"2\n\013S_Que"
  "stList\022#\n\006quests\030\001 \003(\0132\023.PROTOCOL.QuestI"
  "nfo\"\"\n\rC_RemoveQuest\022\021\n\tquestdbid\030\001 \001(\005\""
  "0\n\rS_RemoveQuest\022\016\n\006result\030\001 \001(\010\022\017\n\007ques"
  "tid\030\002 \001(\005\"$\n\017C_CompleteQuest\022\021\n\tquestdbi"
  "d\030\001 \001(\005\"2\n\017S_CompleteQuest\022\016\n\006result\030\001 \001"
  "(\010\022\017\n\007questid\030\002 \001(\005\"I\n\rC_UpdateQuest\022&\n\t"
  "questinfo\030\001 \001(\0132\023.PROTOCOL.QuestInfo\022\020\n\010"
  "objectid\030\002 \001(\005\"7\n\rS_UpdateQuest\022&\n\tquest"
  "Info\030\001 \001(\0132\023.PROTOCOL.QuestInfo\"+\n\006C_Tes"
  "t\022\017\n\007testint\030\001 \001(\005\022\020\n\010testbool\030\002 \001(\010\"+\n\006"
  "S_Test\022\017\n\007testint\030\001 \001(\005\022\020\n\010testbool\030\002 \001("
  "\010*\332\005\n\005MsgId\022\013\n\007C_LOGIN\020\000\022\013\n\007S_LOGIN\020\001\022\020\n"
  "\014C_ENTER_ROOM\020\002\022\020\n\014S_ENTER_ROOM\020\003\022\020\n\014C_L"
  "EAVE_ROOM\020\004\022\020\n\014S_LEAVE_ROOM\020\005\022\013\n\007C_SPAWN"
  "\020\006\022\013\n\007S_SPAWN\020\007\022\r\n\tC_DESPAWN\020\010\022\r\n\tS_DESP"
  "AWN\020\t\022\n\n\006C_MOVE\020\n\022\n\n\006S_MOVE\020\013\022\013\n\007C_SKILL"
  "\020\014\022\013\n\007S_SKILL\020\r\022\n\n\006C_CHAT\020\016\022\n\n\006S_CHAT\020\017\022"
  "\n\n\006C_PING\020\020\022\n\n\006S_PONG\020\021\022\017\n\013S_CHANGE_HP\020\022"
  "\022\t\n\005S_DIE\020\023\022\017\n\013S_ITEM_LIST\020\024\022\016\n\nC_ADD_IT"
  "EM\020\025\022\016\n\nS_ADD_ITEM\020\026\022\021\n\rS_UPDATE_ITEM\020\027\022"
  "\021\n\rS_REMOVE_ITEM\020\030\022\017\n\013C_EQUIPITEM\020\031\022\017\n\013S"
  "_EQUIPITEM\020\032\022\r\n\tC_USEITEM\020\033\022\r\n\tS_USEITEM"
  "\020\034\022\021\n\rS_CHANGE_STAT\020\035\022\023\n\017C_CREATE_PLAYER"
  "\020\036\022\023\n\017S_CREATE_PLAYER\020\037\022\r\n\tS_ADD_EXP\020 \022\016"
  "\n\nS_LEVEL_UP\020!\022\017\n\013C_ADD_QUEST\020\"\022\017\n\013S_ADD"
  "_QUEST\020#\022\020\n\014S_QUEST_LIST\020$\022\022\n\016C_REMOVE_Q"
  "UEST\020%\022\022\n\016S_REMOVE_QUEST\020&\022\024\n\020C_COMPLETE"
  "_QUEST\020\'\022\024\n\020S_COMPLETE_QUEST\020(\022\022\n\016C_UPDA"
  "TE_QUEST\020)\022\022\n\016S_UPDATE_QUEST\020*\022\n\n\006C_TEST"
  "\020+\022\n\n\006S_TEST\020,*\215\001\n\021PlayerServerState\022\025\n\021"
  "SERVER_STATE_NONE\020\000\022\032\n\026SERVER_STATE_CONN"
  "ECTED\020\001\022\026\n\022SERVER_STATE_LOGIN\020\002\022\026\n\022SERVE"
  "R_STATE_LOBBY\020\003\022\025\n\021SERVER_STATE_GAME\020\004*X"
  "\n\016GameObjectType\022\010\n\004NONE\020\000\022\n\n\006PLAYER\020\001\022\013"
  "\n\007MONSTER\020\002\022\016\n\nPROJECTILE\020\003\022\007\n\003NPC\020\004\022\n\n\006"
  "Object\020\005*B\n\tSkillType\022\016\n\nSKILL_NONE\020\000\022\016\n"
  "\nSKILL_AUTO\020\001\022\025\n\021SKILL_PROJECTTILE\020\002*c\n\010"
  "ItemType\022\022\n\016ITEM_TYPE_NONE\020\000\022\024\n\020ITEM_TYP"
  "E_WEAPON\020\001\022\023\n\017ITEM_TYPE_ARMOR\020\002\022\030\n\024ITEM_"
  "TYPE_CONSUMABLE\020\003*N\n\nWeaponType\022\024\n\020WEAPO"
  "N_TYPE_NONE\020\000\022\025\n\021WEAPON_TYPE_SWORD\020\001\022\023\n\017"
  "WEAPON_TYPE_AXE\020\002*M\n\tArmorType\022\023\n\017ARMOR_"
  "TYPE_NONE\020\000\022\025\n\021ARMOR_TYPE_HELMET\020\001\022\024\n\020AR"
  "MOR_TYPE_ARMOR\020\002*h\n\016ConsumableType\022\030\n\024CO"
  "NSUMABLE_TYPE_NONE\020\000\022\035\n\031CONSUMABLE_TYPE_"
  "HP_POTION\020\001\022\035\n\031CONSUMABLE_TYPE_MP_POTION"
  "\020\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Protocol3_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol3_2eproto = {
  false, false, 4650, descriptor_table_protodef_Protocol3_2eproto, "Protocol3.proto", 
  &descriptor_table_Protocol3_2eproto_once, nullptr, 0, 49,
  schemas, file_default_instances, TableStruct_Protocol3_2eproto::offsets,
  file_level_metadata_Protocol3_2eproto, file_level_enum_descriptors_Protocol3_2eproto, file_level_service_descriptors_Protocol3_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Protocol3_2eproto_getter() {
  return &descriptor_table_Protocol3_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Protocol3_2eproto(&descriptor_table_Protocol3_2eproto);
namespace PROTOCOL {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol3_2eproto);
  return file_level_enum_descriptors_Protocol3_2eproto[0];
}
bool MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerServerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol3_2eproto);
  return file_level_enum_descriptors_Protocol3_2eproto[1];
}
bool PlayerServerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol3_2eproto);
  return file_level_enum_descriptors_Protocol3_2eproto[2];
}
bool GameObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SkillType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol3_2eproto);
  return file_level_enum_descriptors_Protocol3_2eproto[3];
}
bool SkillType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol3_2eproto);
  return file_level_enum_descriptors_Protocol3_2eproto[4];
}
bool ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WeaponType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol3_2eproto);
  return file_level_enum_descriptors_Protocol3_2eproto[5];
}
bool WeaponType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArmorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol3_2eproto);
  return file_level_enum_descriptors_Protocol3_2eproto[6];
}
bool ArmorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsumableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol3_2eproto);
  return file_level_enum_descriptors_Protocol3_2eproto[7];
}
bool ConsumableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&locationx_, &from.locationx_,
    static_cast<size_t>(reinterpret_cast<char*>(&velocityz_) -
    reinterpret_cast<char*>(&locationx_)) + sizeof(velocityz_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.Position)
}

inline void Position::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&locationx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&velocityz_) -
    reinterpret_cast<char*>(&locationx_)) + sizeof(velocityz_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:PROTOCOL.Position)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&locationx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocityz_) -
      reinterpret_cast<char*>(&locationx_)) + sizeof(velocityz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float locationx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          locationx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float locationy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          locationy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float locationz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          locationz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rotationyaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          rotationyaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rotationpitch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          rotationpitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rotationroll = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          rotationroll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float velocityx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          velocityx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float velocityy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          velocityy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float velocityz = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          velocityz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float locationx = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationx = this->_internal_locationx();
  uint32_t raw_locationx;
  memcpy(&raw_locationx, &tmp_locationx, sizeof(tmp_locationx));
  if (raw_locationx != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_locationx(), target);
  }

  // float locationy = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationy = this->_internal_locationy();
  uint32_t raw_locationy;
  memcpy(&raw_locationy, &tmp_locationy, sizeof(tmp_locationy));
  if (raw_locationy != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_locationy(), target);
  }

  // float locationz = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationz = this->_internal_locationz();
  uint32_t raw_locationz;
  memcpy(&raw_locationz, &tmp_locationz, sizeof(tmp_locationz));
  if (raw_locationz != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_locationz(), target);
  }

  // float rotationyaw = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationyaw = this->_internal_rotationyaw();
  uint32_t raw_rotationyaw;
  memcpy(&raw_rotationyaw, &tmp_rotationyaw, sizeof(tmp_rotationyaw));
  if (raw_rotationyaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_rotationyaw(), target);
  }

  // float rotationpitch = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationpitch = this->_internal_rotationpitch();
  uint32_t raw_rotationpitch;
  memcpy(&raw_rotationpitch, &tmp_rotationpitch, sizeof(tmp_rotationpitch));
  if (raw_rotationpitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_rotationpitch(), target);
  }

  // float rotationroll = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationroll = this->_internal_rotationroll();
  uint32_t raw_rotationroll;
  memcpy(&raw_rotationroll, &tmp_rotationroll, sizeof(tmp_rotationroll));
  if (raw_rotationroll != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_rotationroll(), target);
  }

  // float velocityx = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityx = this->_internal_velocityx();
  uint32_t raw_velocityx;
  memcpy(&raw_velocityx, &tmp_velocityx, sizeof(tmp_velocityx));
  if (raw_velocityx != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_velocityx(), target);
  }

  // float velocityy = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityy = this->_internal_velocityy();
  uint32_t raw_velocityy;
  memcpy(&raw_velocityy, &tmp_velocityy, sizeof(tmp_velocityy));
  if (raw_velocityy != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_velocityy(), target);
  }

  // float velocityz = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityz = this->_internal_velocityz();
  uint32_t raw_velocityz;
  memcpy(&raw_velocityz, &tmp_velocityz, sizeof(tmp_velocityz));
  if (raw_velocityz != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_velocityz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float locationx = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationx = this->_internal_locationx();
  uint32_t raw_locationx;
  memcpy(&raw_locationx, &tmp_locationx, sizeof(tmp_locationx));
  if (raw_locationx != 0) {
    total_size += 1 + 4;
  }

  // float locationy = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationy = this->_internal_locationy();
  uint32_t raw_locationy;
  memcpy(&raw_locationy, &tmp_locationy, sizeof(tmp_locationy));
  if (raw_locationy != 0) {
    total_size += 1 + 4;
  }

  // float locationz = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationz = this->_internal_locationz();
  uint32_t raw_locationz;
  memcpy(&raw_locationz, &tmp_locationz, sizeof(tmp_locationz));
  if (raw_locationz != 0) {
    total_size += 1 + 4;
  }

  // float rotationyaw = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationyaw = this->_internal_rotationyaw();
  uint32_t raw_rotationyaw;
  memcpy(&raw_rotationyaw, &tmp_rotationyaw, sizeof(tmp_rotationyaw));
  if (raw_rotationyaw != 0) {
    total_size += 1 + 4;
  }

  // float rotationpitch = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationpitch = this->_internal_rotationpitch();
  uint32_t raw_rotationpitch;
  memcpy(&raw_rotationpitch, &tmp_rotationpitch, sizeof(tmp_rotationpitch));
  if (raw_rotationpitch != 0) {
    total_size += 1 + 4;
  }

  // float rotationroll = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationroll = this->_internal_rotationroll();
  uint32_t raw_rotationroll;
  memcpy(&raw_rotationroll, &tmp_rotationroll, sizeof(tmp_rotationroll));
  if (raw_rotationroll != 0) {
    total_size += 1 + 4;
  }

  // float velocityx = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityx = this->_internal_velocityx();
  uint32_t raw_velocityx;
  memcpy(&raw_velocityx, &tmp_velocityx, sizeof(tmp_velocityx));
  if (raw_velocityx != 0) {
    total_size += 1 + 4;
  }

  // float velocityy = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityy = this->_internal_velocityy();
  uint32_t raw_velocityy;
  memcpy(&raw_velocityy, &tmp_velocityy, sizeof(tmp_velocityy));
  if (raw_velocityy != 0) {
    total_size += 1 + 4;
  }

  // float velocityz = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityz = this->_internal_velocityz();
  uint32_t raw_velocityz;
  memcpy(&raw_velocityz, &tmp_velocityz, sizeof(tmp_velocityz));
  if (raw_velocityz != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }

void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Position *>(to)->MergeFrom(
      static_cast<const Position &>(from));
}


void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.Position)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationx = from._internal_locationx();
  uint32_t raw_locationx;
  memcpy(&raw_locationx, &tmp_locationx, sizeof(tmp_locationx));
  if (raw_locationx != 0) {
    _internal_set_locationx(from._internal_locationx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationy = from._internal_locationy();
  uint32_t raw_locationy;
  memcpy(&raw_locationy, &tmp_locationy, sizeof(tmp_locationy));
  if (raw_locationy != 0) {
    _internal_set_locationy(from._internal_locationy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locationz = from._internal_locationz();
  uint32_t raw_locationz;
  memcpy(&raw_locationz, &tmp_locationz, sizeof(tmp_locationz));
  if (raw_locationz != 0) {
    _internal_set_locationz(from._internal_locationz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationyaw = from._internal_rotationyaw();
  uint32_t raw_rotationyaw;
  memcpy(&raw_rotationyaw, &tmp_rotationyaw, sizeof(tmp_rotationyaw));
  if (raw_rotationyaw != 0) {
    _internal_set_rotationyaw(from._internal_rotationyaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationpitch = from._internal_rotationpitch();
  uint32_t raw_rotationpitch;
  memcpy(&raw_rotationpitch, &tmp_rotationpitch, sizeof(tmp_rotationpitch));
  if (raw_rotationpitch != 0) {
    _internal_set_rotationpitch(from._internal_rotationpitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotationroll = from._internal_rotationroll();
  uint32_t raw_rotationroll;
  memcpy(&raw_rotationroll, &tmp_rotationroll, sizeof(tmp_rotationroll));
  if (raw_rotationroll != 0) {
    _internal_set_rotationroll(from._internal_rotationroll());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityx = from._internal_velocityx();
  uint32_t raw_velocityx;
  memcpy(&raw_velocityx, &tmp_velocityx, sizeof(tmp_velocityx));
  if (raw_velocityx != 0) {
    _internal_set_velocityx(from._internal_velocityx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityy = from._internal_velocityy();
  uint32_t raw_velocityy;
  memcpy(&raw_velocityy, &tmp_velocityy, sizeof(tmp_velocityy));
  if (raw_velocityy != 0) {
    _internal_set_velocityy(from._internal_velocityy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityz = from._internal_velocityz();
  uint32_t raw_velocityz;
  memcpy(&raw_velocityz, &tmp_velocityz, sizeof(tmp_velocityz));
  if (raw_velocityz != 0) {
    _internal_set_velocityz(from._internal_velocityz());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, velocityz_)
      + sizeof(Position::velocityz_)
      - PROTOBUF_FIELD_OFFSET(Position, locationx_)>(
          reinterpret_cast<char*>(&locationx_),
          reinterpret_cast<char*>(&other->locationx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[0]);
}

// ===================================================================

class Stat::_Internal {
 public:
};

Stat::Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.Stat)
}
Stat::Stat(const Stat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&attackcooltime_) -
    reinterpret_cast<char*>(&level_)) + sizeof(attackcooltime_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.Stat)
}

inline void Stat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attackcooltime_) -
    reinterpret_cast<char*>(&level_)) + sizeof(attackcooltime_));
}

Stat::~Stat() {
  // @@protoc_insertion_point(destructor:PROTOCOL.Stat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Stat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Stat::ArenaDtor(void* object) {
  Stat* _this = reinterpret_cast< Stat* >(object);
  (void)_this;
}
void Stat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.Stat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attackcooltime_) -
      reinterpret_cast<char*>(&level_)) + sizeof(attackcooltime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 totalExp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          totalexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 exp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxhp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 damage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 defence = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          defence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float attackdistance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          attackdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float noticedistance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          noticedistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float returndistance = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          returndistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float attackcooltime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          attackcooltime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.Stat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // int32 totalExp = 2;
  if (this->_internal_totalexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_totalexp(), target);
  }

  // int32 exp = 3;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_exp(), target);
  }

  // int32 maxhp = 4;
  if (this->_internal_maxhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_maxhp(), target);
  }

  // int32 hp = 5;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_hp(), target);
  }

  // int32 damage = 6;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_damage(), target);
  }

  // int32 defence = 7;
  if (this->_internal_defence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_defence(), target);
  }

  // float speed = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_speed(), target);
  }

  // float attackdistance = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdistance = this->_internal_attackdistance();
  uint32_t raw_attackdistance;
  memcpy(&raw_attackdistance, &tmp_attackdistance, sizeof(tmp_attackdistance));
  if (raw_attackdistance != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_attackdistance(), target);
  }

  // float noticedistance = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_noticedistance = this->_internal_noticedistance();
  uint32_t raw_noticedistance;
  memcpy(&raw_noticedistance, &tmp_noticedistance, sizeof(tmp_noticedistance));
  if (raw_noticedistance != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_noticedistance(), target);
  }

  // float returndistance = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_returndistance = this->_internal_returndistance();
  uint32_t raw_returndistance;
  memcpy(&raw_returndistance, &tmp_returndistance, sizeof(tmp_returndistance));
  if (raw_returndistance != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_returndistance(), target);
  }

  // float attackcooltime = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackcooltime = this->_internal_attackcooltime();
  uint32_t raw_attackcooltime;
  memcpy(&raw_attackcooltime, &tmp_attackcooltime, sizeof(tmp_attackcooltime));
  if (raw_attackcooltime != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_attackcooltime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.Stat)
  return target;
}

size_t Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.Stat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 totalExp = 2;
  if (this->_internal_totalexp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_totalexp());
  }

  // int32 exp = 3;
  if (this->_internal_exp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_exp());
  }

  // int32 maxhp = 4;
  if (this->_internal_maxhp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_maxhp());
  }

  // int32 hp = 5;
  if (this->_internal_hp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  // int32 damage = 6;
  if (this->_internal_damage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
  }

  // int32 defence = 7;
  if (this->_internal_defence() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_defence());
  }

  // float speed = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  // float attackdistance = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdistance = this->_internal_attackdistance();
  uint32_t raw_attackdistance;
  memcpy(&raw_attackdistance, &tmp_attackdistance, sizeof(tmp_attackdistance));
  if (raw_attackdistance != 0) {
    total_size += 1 + 4;
  }

  // float noticedistance = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_noticedistance = this->_internal_noticedistance();
  uint32_t raw_noticedistance;
  memcpy(&raw_noticedistance, &tmp_noticedistance, sizeof(tmp_noticedistance));
  if (raw_noticedistance != 0) {
    total_size += 1 + 4;
  }

  // float returndistance = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_returndistance = this->_internal_returndistance();
  uint32_t raw_returndistance;
  memcpy(&raw_returndistance, &tmp_returndistance, sizeof(tmp_returndistance));
  if (raw_returndistance != 0) {
    total_size += 1 + 4;
  }

  // float attackcooltime = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackcooltime = this->_internal_attackcooltime();
  uint32_t raw_attackcooltime;
  memcpy(&raw_attackcooltime, &tmp_attackcooltime, sizeof(tmp_attackcooltime));
  if (raw_attackcooltime != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Stat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stat::GetClassData() const { return &_class_data_; }

void Stat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Stat *>(to)->MergeFrom(
      static_cast<const Stat &>(from));
}


void Stat::MergeFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_totalexp() != 0) {
    _internal_set_totalexp(from._internal_totalexp());
  }
  if (from._internal_exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
  if (from._internal_maxhp() != 0) {
    _internal_set_maxhp(from._internal_maxhp());
  }
  if (from._internal_hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from._internal_damage() != 0) {
    _internal_set_damage(from._internal_damage());
  }
  if (from._internal_defence() != 0) {
    _internal_set_defence(from._internal_defence());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _internal_set_speed(from._internal_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdistance = from._internal_attackdistance();
  uint32_t raw_attackdistance;
  memcpy(&raw_attackdistance, &tmp_attackdistance, sizeof(tmp_attackdistance));
  if (raw_attackdistance != 0) {
    _internal_set_attackdistance(from._internal_attackdistance());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_noticedistance = from._internal_noticedistance();
  uint32_t raw_noticedistance;
  memcpy(&raw_noticedistance, &tmp_noticedistance, sizeof(tmp_noticedistance));
  if (raw_noticedistance != 0) {
    _internal_set_noticedistance(from._internal_noticedistance());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_returndistance = from._internal_returndistance();
  uint32_t raw_returndistance;
  memcpy(&raw_returndistance, &tmp_returndistance, sizeof(tmp_returndistance));
  if (raw_returndistance != 0) {
    _internal_set_returndistance(from._internal_returndistance());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackcooltime = from._internal_attackcooltime();
  uint32_t raw_attackcooltime;
  memcpy(&raw_attackcooltime, &tmp_attackcooltime, sizeof(tmp_attackcooltime));
  if (raw_attackcooltime != 0) {
    _internal_set_attackcooltime(from._internal_attackcooltime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stat::CopyFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stat::IsInitialized() const {
  return true;
}

void Stat::InternalSwap(Stat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stat, attackcooltime_)
      + sizeof(Stat::attackcooltime_)
      - PROTOBUF_FIELD_OFFSET(Stat, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[1]);
}

// ===================================================================

class ObjectInfo::_Internal {
 public:
  static const ::PROTOCOL::Position& pos(const ObjectInfo* msg);
  static const ::PROTOCOL::Stat& stat(const ObjectInfo* msg);
};

const ::PROTOCOL::Position&
ObjectInfo::_Internal::pos(const ObjectInfo* msg) {
  return *msg->pos_;
}
const ::PROTOCOL::Stat&
ObjectInfo::_Internal::stat(const ObjectInfo* msg) {
  return *msg->stat_;
}
ObjectInfo::ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.ObjectInfo)
}
ObjectInfo::ObjectInfo(const ObjectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    pos_ = new ::PROTOCOL::Position(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_stat()) {
    stat_ = new ::PROTOCOL::Stat(*from.stat_);
  } else {
    stat_ = nullptr;
  }
  ::memcpy(&objectid_, &from.objectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&typetemplateid_) -
    reinterpret_cast<char*>(&objectid_)) + sizeof(typetemplateid_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.ObjectInfo)
}

inline void ObjectInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&typetemplateid_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(typetemplateid_));
}

ObjectInfo::~ObjectInfo() {
  // @@protoc_insertion_point(destructor:PROTOCOL.ObjectInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObjectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete stat_;
}

void ObjectInfo::ArenaDtor(void* object) {
  ObjectInfo* _this = reinterpret_cast< ObjectInfo* >(object);
  (void)_this;
}
void ObjectInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.ObjectInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stat_ != nullptr) {
    delete stat_;
  }
  stat_ = nullptr;
  ::memset(&objectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&typetemplateid_) -
      reinterpret_cast<char*>(&objectid_)) + sizeof(typetemplateid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 playerdbid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          playerdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PROTOCOL.ObjectInfo.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.GameObjectType objecttype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_objecttype(static_cast<::PROTOCOL::GameObjectType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 typetemplateid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          typetemplateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.Position pos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.Stat stat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.ObjectInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_objectid(), target);
  }

  // int32 playerdbid = 2;
  if (this->_internal_playerdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_playerdbid(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PROTOCOL.ObjectInfo.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // .PROTOCOL.GameObjectType objecttype = 4;
  if (this->_internal_objecttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_objecttype(), target);
  }

  // int32 typetemplateid = 5;
  if (this->_internal_typetemplateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_typetemplateid(), target);
  }

  // .PROTOCOL.Position pos = 6;
  if (this->_internal_has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pos(this), target, stream);
  }

  // .PROTOCOL.Stat stat = 7;
  if (this->_internal_has_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::stat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.ObjectInfo)
  return target;
}

size_t ObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.ObjectInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .PROTOCOL.Position pos = 6;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .PROTOCOL.Stat stat = 7;
  if (this->_internal_has_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stat_);
  }

  // int32 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  // int32 playerdbid = 2;
  if (this->_internal_playerdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playerdbid());
  }

  // .PROTOCOL.GameObjectType objecttype = 4;
  if (this->_internal_objecttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_objecttype());
  }

  // int32 typetemplateid = 5;
  if (this->_internal_typetemplateid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_typetemplateid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectInfo::GetClassData() const { return &_class_data_; }

void ObjectInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObjectInfo *>(to)->MergeFrom(
      static_cast<const ObjectInfo &>(from));
}


void ObjectInfo::MergeFrom(const ObjectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.ObjectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_pos()) {
    _internal_mutable_pos()->::PROTOCOL::Position::MergeFrom(from._internal_pos());
  }
  if (from._internal_has_stat()) {
    _internal_mutable_stat()->::PROTOCOL::Stat::MergeFrom(from._internal_stat());
  }
  if (from._internal_objectid() != 0) {
    _internal_set_objectid(from._internal_objectid());
  }
  if (from._internal_playerdbid() != 0) {
    _internal_set_playerdbid(from._internal_playerdbid());
  }
  if (from._internal_objecttype() != 0) {
    _internal_set_objecttype(from._internal_objecttype());
  }
  if (from._internal_typetemplateid() != 0) {
    _internal_set_typetemplateid(from._internal_typetemplateid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectInfo::CopyFrom(const ObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.ObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectInfo::IsInitialized() const {
  return true;
}

void ObjectInfo::InternalSwap(ObjectInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectInfo, typetemplateid_)
      + sizeof(ObjectInfo::typetemplateid_)
      - PROTOBUF_FIELD_OFFSET(ObjectInfo, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[2]);
}

// ===================================================================

class LobbyPlayerInfo::_Internal {
 public:
  static const ::PROTOCOL::Stat& stat(const LobbyPlayerInfo* msg);
};

const ::PROTOCOL::Stat&
LobbyPlayerInfo::_Internal::stat(const LobbyPlayerInfo* msg) {
  return *msg->stat_;
}
LobbyPlayerInfo::LobbyPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.LobbyPlayerInfo)
}
LobbyPlayerInfo::LobbyPlayerInfo(const LobbyPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_stat()) {
    stat_ = new ::PROTOCOL::Stat(*from.stat_);
  } else {
    stat_ = nullptr;
  }
  playerdbid_ = from.playerdbid_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.LobbyPlayerInfo)
}

inline void LobbyPlayerInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playerdbid_) -
    reinterpret_cast<char*>(&stat_)) + sizeof(playerdbid_));
}

LobbyPlayerInfo::~LobbyPlayerInfo() {
  // @@protoc_insertion_point(destructor:PROTOCOL.LobbyPlayerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LobbyPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stat_;
}

void LobbyPlayerInfo::ArenaDtor(void* object) {
  LobbyPlayerInfo* _this = reinterpret_cast< LobbyPlayerInfo* >(object);
  (void)_this;
}
void LobbyPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LobbyPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LobbyPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.LobbyPlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && stat_ != nullptr) {
    delete stat_;
  }
  stat_ = nullptr;
  playerdbid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobbyPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playerdbid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          playerdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PROTOCOL.LobbyPlayerInfo.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.Stat stat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LobbyPlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.LobbyPlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerdbid = 1;
  if (this->_internal_playerdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerdbid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PROTOCOL.LobbyPlayerInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .PROTOCOL.Stat stat = 3;
  if (this->_internal_has_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.LobbyPlayerInfo)
  return target;
}

size_t LobbyPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.LobbyPlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .PROTOCOL.Stat stat = 3;
  if (this->_internal_has_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stat_);
  }

  // int32 playerdbid = 1;
  if (this->_internal_playerdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playerdbid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LobbyPlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LobbyPlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LobbyPlayerInfo::GetClassData() const { return &_class_data_; }

void LobbyPlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LobbyPlayerInfo *>(to)->MergeFrom(
      static_cast<const LobbyPlayerInfo &>(from));
}


void LobbyPlayerInfo::MergeFrom(const LobbyPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.LobbyPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_stat()) {
    _internal_mutable_stat()->::PROTOCOL::Stat::MergeFrom(from._internal_stat());
  }
  if (from._internal_playerdbid() != 0) {
    _internal_set_playerdbid(from._internal_playerdbid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LobbyPlayerInfo::CopyFrom(const LobbyPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.LobbyPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyPlayerInfo::IsInitialized() const {
  return true;
}

void LobbyPlayerInfo::InternalSwap(LobbyPlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LobbyPlayerInfo, playerdbid_)
      + sizeof(LobbyPlayerInfo::playerdbid_)
      - PROTOBUF_FIELD_OFFSET(LobbyPlayerInfo, stat_)>(
          reinterpret_cast<char*>(&stat_),
          reinterpret_cast<char*>(&other->stat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LobbyPlayerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[3]);
}

// ===================================================================

class Skill::_Internal {
 public:
};

Skill::Skill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.Skill)
}
Skill::Skill(const Skill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  skillid_ = from.skillid_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.Skill)
}

inline void Skill::SharedCtor() {
skillid_ = 0;
}

Skill::~Skill() {
  // @@protoc_insertion_point(destructor:PROTOCOL.Skill)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Skill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Skill::ArenaDtor(void* object) {
  Skill* _this = reinterpret_cast< Skill* >(object);
  (void)_this;
}
void Skill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Skill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Skill::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.Skill)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skillid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Skill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 skillId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Skill::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.Skill)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 skillId = 1;
  if (this->_internal_skillid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_skillid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.Skill)
  return target;
}

size_t Skill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.Skill)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 skillId = 1;
  if (this->_internal_skillid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_skillid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Skill::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Skill::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Skill::GetClassData() const { return &_class_data_; }

void Skill::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Skill *>(to)->MergeFrom(
      static_cast<const Skill &>(from));
}


void Skill::MergeFrom(const Skill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.Skill)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_skillid() != 0) {
    _internal_set_skillid(from._internal_skillid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Skill::CopyFrom(const Skill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.Skill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill::IsInitialized() const {
  return true;
}

void Skill::InternalSwap(Skill* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(skillid_, other->skillid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Skill::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[4]);
}

// ===================================================================

class ItemInfo::_Internal {
 public:
};

ItemInfo::ItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.ItemInfo)
}
ItemInfo::ItemInfo(const ItemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&itemdbid_, &from.itemdbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerdbid_) -
    reinterpret_cast<char*>(&itemdbid_)) + sizeof(playerdbid_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.ItemInfo)
}

inline void ItemInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemdbid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playerdbid_) -
    reinterpret_cast<char*>(&itemdbid_)) + sizeof(playerdbid_));
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:PROTOCOL.ItemInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ItemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ItemInfo::ArenaDtor(void* object) {
  ItemInfo* _this = reinterpret_cast< ItemInfo* >(object);
  (void)_this;
}
void ItemInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.ItemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&itemdbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerdbid_) -
      reinterpret_cast<char*>(&itemdbid_)) + sizeof(playerdbid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 itemDbId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          itemdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 templateId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          templateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 slot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool equipped = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          equipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 playerdbid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          playerdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.ItemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemDbId = 1;
  if (this->_internal_itemdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_itemdbid(), target);
  }

  // int32 templateId = 2;
  if (this->_internal_templateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_templateid(), target);
  }

  // int32 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  // int32 slot = 4;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_slot(), target);
  }

  // bool equipped = 5;
  if (this->_internal_equipped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_equipped(), target);
  }

  // int32 playerdbid = 6;
  if (this->_internal_playerdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_playerdbid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.ItemInfo)
  return target;
}

size_t ItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.ItemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 itemDbId = 1;
  if (this->_internal_itemdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_itemdbid());
  }

  // int32 templateId = 2;
  if (this->_internal_templateid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_templateid());
  }

  // int32 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  // int32 slot = 4;
  if (this->_internal_slot() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slot());
  }

  // bool equipped = 5;
  if (this->_internal_equipped() != 0) {
    total_size += 1 + 1;
  }

  // int32 playerdbid = 6;
  if (this->_internal_playerdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playerdbid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ItemInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemInfo::GetClassData() const { return &_class_data_; }

void ItemInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ItemInfo *>(to)->MergeFrom(
      static_cast<const ItemInfo &>(from));
}


void ItemInfo::MergeFrom(const ItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.ItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_itemdbid() != 0) {
    _internal_set_itemdbid(from._internal_itemdbid());
  }
  if (from._internal_templateid() != 0) {
    _internal_set_templateid(from._internal_templateid());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from._internal_slot() != 0) {
    _internal_set_slot(from._internal_slot());
  }
  if (from._internal_equipped() != 0) {
    _internal_set_equipped(from._internal_equipped());
  }
  if (from._internal_playerdbid() != 0) {
    _internal_set_playerdbid(from._internal_playerdbid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.ItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {
  return true;
}

void ItemInfo::InternalSwap(ItemInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemInfo, playerdbid_)
      + sizeof(ItemInfo::playerdbid_)
      - PROTOBUF_FIELD_OFFSET(ItemInfo, itemdbid_)>(
          reinterpret_cast<char*>(&itemdbid_),
          reinterpret_cast<char*>(&other->itemdbid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[5]);
}

// ===================================================================

class QuestInfo::_Internal {
 public:
};

QuestInfo::QuestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.QuestInfo)
}
QuestInfo::QuestInfo(const QuestInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&questdbid_, &from.questdbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerdbid_) -
    reinterpret_cast<char*>(&questdbid_)) + sizeof(playerdbid_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.QuestInfo)
}

inline void QuestInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&questdbid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playerdbid_) -
    reinterpret_cast<char*>(&questdbid_)) + sizeof(playerdbid_));
}

QuestInfo::~QuestInfo() {
  // @@protoc_insertion_point(destructor:PROTOCOL.QuestInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QuestInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QuestInfo::ArenaDtor(void* object) {
  QuestInfo* _this = reinterpret_cast< QuestInfo* >(object);
  (void)_this;
}
void QuestInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuestInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QuestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.QuestInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&questdbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerdbid_) -
      reinterpret_cast<char*>(&questdbid_)) + sizeof(playerdbid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuestInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 questdbid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          questdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 templateid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          templateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool completed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 playerdbid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          playerdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuestInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.QuestInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 questdbid = 1;
  if (this->_internal_questdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_questdbid(), target);
  }

  // int32 templateid = 2;
  if (this->_internal_templateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_templateid(), target);
  }

  // int32 progress = 3;
  if (this->_internal_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_progress(), target);
  }

  // bool completed = 4;
  if (this->_internal_completed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_completed(), target);
  }

  // int32 playerdbid = 5;
  if (this->_internal_playerdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_playerdbid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.QuestInfo)
  return target;
}

size_t QuestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.QuestInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 questdbid = 1;
  if (this->_internal_questdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_questdbid());
  }

  // int32 templateid = 2;
  if (this->_internal_templateid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_templateid());
  }

  // int32 progress = 3;
  if (this->_internal_progress() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_progress());
  }

  // bool completed = 4;
  if (this->_internal_completed() != 0) {
    total_size += 1 + 1;
  }

  // int32 playerdbid = 5;
  if (this->_internal_playerdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playerdbid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuestInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QuestInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuestInfo::GetClassData() const { return &_class_data_; }

void QuestInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QuestInfo *>(to)->MergeFrom(
      static_cast<const QuestInfo &>(from));
}


void QuestInfo::MergeFrom(const QuestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.QuestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_questdbid() != 0) {
    _internal_set_questdbid(from._internal_questdbid());
  }
  if (from._internal_templateid() != 0) {
    _internal_set_templateid(from._internal_templateid());
  }
  if (from._internal_progress() != 0) {
    _internal_set_progress(from._internal_progress());
  }
  if (from._internal_completed() != 0) {
    _internal_set_completed(from._internal_completed());
  }
  if (from._internal_playerdbid() != 0) {
    _internal_set_playerdbid(from._internal_playerdbid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuestInfo::CopyFrom(const QuestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.QuestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestInfo::IsInitialized() const {
  return true;
}

void QuestInfo::InternalSwap(QuestInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuestInfo, playerdbid_)
      + sizeof(QuestInfo::playerdbid_)
      - PROTOBUF_FIELD_OFFSET(QuestInfo, questdbid_)>(
          reinterpret_cast<char*>(&questdbid_),
          reinterpret_cast<char*>(&other->questdbid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuestInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[6]);
}

// ===================================================================

class C_Login::_Internal {
 public:
};

C_Login::C_Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_Login)
}
C_Login::C_Login(const C_Login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  pw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pw().empty()) {
    pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pw(), 
      GetArenaForAllocation());
  }
  tokenstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tokenstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tokenstring().empty()) {
    tokenstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tokenstring(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_Login)
}

inline void C_Login::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tokenstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tokenstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_Login::~C_Login() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_Login)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_Login::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tokenstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_Login::ArenaDtor(void* object) {
  C_Login* _this = reinterpret_cast< C_Login* >(object);
  (void)_this;
}
void C_Login::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Login::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_Login)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  pw_.ClearToEmpty();
  tokenstring_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Login::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PROTOCOL.C_Login.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PROTOCOL.C_Login.pw"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tokenstring = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tokenstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PROTOCOL.C_Login.tokenstring"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Login::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_Login)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PROTOCOL.C_Login.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string pw = 2;
  if (!this->_internal_pw().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pw().data(), static_cast<int>(this->_internal_pw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PROTOCOL.C_Login.pw");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pw(), target);
  }

  // string tokenstring = 3;
  if (!this->_internal_tokenstring().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tokenstring().data(), static_cast<int>(this->_internal_tokenstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PROTOCOL.C_Login.tokenstring");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tokenstring(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_Login)
  return target;
}

size_t C_Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_Login)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string pw = 2;
  if (!this->_internal_pw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pw());
  }

  // string tokenstring = 3;
  if (!this->_internal_tokenstring().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tokenstring());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Login::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Login::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Login::GetClassData() const { return &_class_data_; }

void C_Login::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Login *>(to)->MergeFrom(
      static_cast<const C_Login &>(from));
}


void C_Login::MergeFrom(const C_Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_Login)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_pw().empty()) {
    _internal_set_pw(from._internal_pw());
  }
  if (!from._internal_tokenstring().empty()) {
    _internal_set_tokenstring(from._internal_tokenstring());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Login::CopyFrom(const C_Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Login::IsInitialized() const {
  return true;
}

void C_Login::InternalSwap(C_Login* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pw_, lhs_arena,
      &other->pw_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tokenstring_, lhs_arena,
      &other->tokenstring_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Login::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[7]);
}

// ===================================================================

class S_Login::_Internal {
 public:
};

S_Login::S_Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  objectinfos_(arena),
  lobbyplayerinfos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_Login)
}
S_Login::S_Login(const S_Login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objectinfos_(from.objectinfos_),
      lobbyplayerinfos_(from.lobbyplayerinfos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_Login)
}

inline void S_Login::SharedCtor() {
success_ = false;
}

S_Login::~S_Login() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_Login)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_Login::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Login::ArenaDtor(void* object) {
  S_Login* _this = reinterpret_cast< S_Login* >(object);
  (void)_this;
}
void S_Login::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Login::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_Login)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objectinfos_.Clear();
  lobbyplayerinfos_.Clear();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Login::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PROTOCOL.ObjectInfo objectinfos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objectinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .PROTOCOL.LobbyPlayerInfo lobbyplayerinfos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lobbyplayerinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Login::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_Login)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated .PROTOCOL.ObjectInfo objectinfos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objectinfos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_objectinfos(i), target, stream);
  }

  // repeated .PROTOCOL.LobbyPlayerInfo lobbyplayerinfos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lobbyplayerinfos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_lobbyplayerinfos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_Login)
  return target;
}

size_t S_Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_Login)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.ObjectInfo objectinfos = 2;
  total_size += 1UL * this->_internal_objectinfos_size();
  for (const auto& msg : this->objectinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PROTOCOL.LobbyPlayerInfo lobbyplayerinfos = 3;
  total_size += 1UL * this->_internal_lobbyplayerinfos_size();
  for (const auto& msg : this->lobbyplayerinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Login::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Login::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Login::GetClassData() const { return &_class_data_; }

void S_Login::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Login *>(to)->MergeFrom(
      static_cast<const S_Login &>(from));
}


void S_Login::MergeFrom(const S_Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_Login)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  objectinfos_.MergeFrom(from.objectinfos_);
  lobbyplayerinfos_.MergeFrom(from.lobbyplayerinfos_);
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Login::CopyFrom(const S_Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Login::IsInitialized() const {
  return true;
}

void S_Login::InternalSwap(S_Login* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  objectinfos_.InternalSwap(&other->objectinfos_);
  lobbyplayerinfos_.InternalSwap(&other->lobbyplayerinfos_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Login::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[8]);
}

// ===================================================================

class C_Enter_Room::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const C_Enter_Room* msg);
};

const ::PROTOCOL::ObjectInfo&
C_Enter_Room::_Internal::object(const C_Enter_Room* msg) {
  return *msg->object_;
}
C_Enter_Room::C_Enter_Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_Enter_Room)
}
C_Enter_Room::C_Enter_Room(const C_Enter_Room& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  roomnum_ = from.roomnum_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_Enter_Room)
}

inline void C_Enter_Room::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roomnum_) -
    reinterpret_cast<char*>(&object_)) + sizeof(roomnum_));
}

C_Enter_Room::~C_Enter_Room() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_Enter_Room)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_Enter_Room::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void C_Enter_Room::ArenaDtor(void* object) {
  C_Enter_Room* _this = reinterpret_cast< C_Enter_Room* >(object);
  (void)_this;
}
void C_Enter_Room::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Enter_Room::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Enter_Room::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_Enter_Room)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  roomnum_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Enter_Room::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 roomNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roomnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.ObjectInfo object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Enter_Room::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_Enter_Room)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomNum = 1;
  if (this->_internal_roomnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roomnum(), target);
  }

  // .PROTOCOL.ObjectInfo object = 2;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_Enter_Room)
  return target;
}

size_t C_Enter_Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_Enter_Room)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 2;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // uint64 roomNum = 1;
  if (this->_internal_roomnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_roomnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Enter_Room::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Enter_Room::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Enter_Room::GetClassData() const { return &_class_data_; }

void C_Enter_Room::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Enter_Room *>(to)->MergeFrom(
      static_cast<const C_Enter_Room &>(from));
}


void C_Enter_Room::MergeFrom(const C_Enter_Room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_Enter_Room)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  if (from._internal_roomnum() != 0) {
    _internal_set_roomnum(from._internal_roomnum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Enter_Room::CopyFrom(const C_Enter_Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_Enter_Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Enter_Room::IsInitialized() const {
  return true;
}

void C_Enter_Room::InternalSwap(C_Enter_Room* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Enter_Room, roomnum_)
      + sizeof(C_Enter_Room::roomnum_)
      - PROTOBUF_FIELD_OFFSET(C_Enter_Room, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Enter_Room::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[9]);
}

// ===================================================================

class S_Enter_Room::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const S_Enter_Room* msg);
};

const ::PROTOCOL::ObjectInfo&
S_Enter_Room::_Internal::object(const S_Enter_Room* msg) {
  return *msg->object_;
}
S_Enter_Room::S_Enter_Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_Enter_Room)
}
S_Enter_Room::S_Enter_Room(const S_Enter_Room& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_Enter_Room)
}

inline void S_Enter_Room::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&object_)) + sizeof(success_));
}

S_Enter_Room::~S_Enter_Room() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_Enter_Room)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_Enter_Room::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void S_Enter_Room::ArenaDtor(void* object) {
  S_Enter_Room* _this = reinterpret_cast< S_Enter_Room* >(object);
  (void)_this;
}
void S_Enter_Room::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Enter_Room::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Enter_Room::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_Enter_Room)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Enter_Room::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.ObjectInfo object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PROTOCOL.ItemInfo items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Enter_Room::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_Enter_Room)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .PROTOCOL.ObjectInfo object = 2;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::object(this), target, stream);
  }

  // repeated .PROTOCOL.ItemInfo items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_Enter_Room)
  return target;
}

size_t S_Enter_Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_Enter_Room)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 3;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PROTOCOL.ObjectInfo object = 2;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Enter_Room::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Enter_Room::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Enter_Room::GetClassData() const { return &_class_data_; }

void S_Enter_Room::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Enter_Room *>(to)->MergeFrom(
      static_cast<const S_Enter_Room &>(from));
}


void S_Enter_Room::MergeFrom(const S_Enter_Room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_Enter_Room)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Enter_Room::CopyFrom(const S_Enter_Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_Enter_Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Enter_Room::IsInitialized() const {
  return true;
}

void S_Enter_Room::InternalSwap(S_Enter_Room* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Enter_Room, success_)
      + sizeof(S_Enter_Room::success_)
      - PROTOBUF_FIELD_OFFSET(S_Enter_Room, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Enter_Room::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[10]);
}

// ===================================================================

class C_Leave_Room::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const C_Leave_Room* msg);
};

const ::PROTOCOL::ObjectInfo&
C_Leave_Room::_Internal::object(const C_Leave_Room* msg) {
  return *msg->object_;
}
C_Leave_Room::C_Leave_Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_Leave_Room)
}
C_Leave_Room::C_Leave_Room(const C_Leave_Room& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_Leave_Room)
}

inline void C_Leave_Room::SharedCtor() {
object_ = nullptr;
}

C_Leave_Room::~C_Leave_Room() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_Leave_Room)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_Leave_Room::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void C_Leave_Room::ArenaDtor(void* object) {
  C_Leave_Room* _this = reinterpret_cast< C_Leave_Room* >(object);
  (void)_this;
}
void C_Leave_Room::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Leave_Room::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Leave_Room::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_Leave_Room)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Leave_Room::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ObjectInfo object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Leave_Room::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_Leave_Room)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_Leave_Room)
  return target;
}

size_t C_Leave_Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_Leave_Room)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Leave_Room::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Leave_Room::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Leave_Room::GetClassData() const { return &_class_data_; }

void C_Leave_Room::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Leave_Room *>(to)->MergeFrom(
      static_cast<const C_Leave_Room &>(from));
}


void C_Leave_Room::MergeFrom(const C_Leave_Room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_Leave_Room)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Leave_Room::CopyFrom(const C_Leave_Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_Leave_Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Leave_Room::IsInitialized() const {
  return true;
}

void C_Leave_Room::InternalSwap(C_Leave_Room* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Leave_Room::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[11]);
}

// ===================================================================

class S_Leave_Room::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const S_Leave_Room* msg);
};

const ::PROTOCOL::ObjectInfo&
S_Leave_Room::_Internal::object(const S_Leave_Room* msg) {
  return *msg->object_;
}
S_Leave_Room::S_Leave_Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_Leave_Room)
}
S_Leave_Room::S_Leave_Room(const S_Leave_Room& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_Leave_Room)
}

inline void S_Leave_Room::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&object_)) + sizeof(success_));
}

S_Leave_Room::~S_Leave_Room() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_Leave_Room)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_Leave_Room::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void S_Leave_Room::ArenaDtor(void* object) {
  S_Leave_Room* _this = reinterpret_cast< S_Leave_Room* >(object);
  (void)_this;
}
void S_Leave_Room::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Leave_Room::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Leave_Room::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_Leave_Room)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Leave_Room::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.ObjectInfo object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Leave_Room::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_Leave_Room)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .PROTOCOL.ObjectInfo object = 2;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_Leave_Room)
  return target;
}

size_t S_Leave_Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_Leave_Room)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 2;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Leave_Room::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Leave_Room::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Leave_Room::GetClassData() const { return &_class_data_; }

void S_Leave_Room::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Leave_Room *>(to)->MergeFrom(
      static_cast<const S_Leave_Room &>(from));
}


void S_Leave_Room::MergeFrom(const S_Leave_Room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_Leave_Room)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Leave_Room::CopyFrom(const S_Leave_Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_Leave_Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Leave_Room::IsInitialized() const {
  return true;
}

void S_Leave_Room::InternalSwap(S_Leave_Room* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Leave_Room, success_)
      + sizeof(S_Leave_Room::success_)
      - PROTOBUF_FIELD_OFFSET(S_Leave_Room, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Leave_Room::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[12]);
}

// ===================================================================

class C_Spawn::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const C_Spawn* msg);
};

const ::PROTOCOL::ObjectInfo&
C_Spawn::_Internal::object(const C_Spawn* msg) {
  return *msg->object_;
}
C_Spawn::C_Spawn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_Spawn)
}
C_Spawn::C_Spawn(const C_Spawn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_Spawn)
}

inline void C_Spawn::SharedCtor() {
object_ = nullptr;
}

C_Spawn::~C_Spawn() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_Spawn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_Spawn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void C_Spawn::ArenaDtor(void* object) {
  C_Spawn* _this = reinterpret_cast< C_Spawn* >(object);
  (void)_this;
}
void C_Spawn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Spawn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Spawn::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_Spawn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Spawn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ObjectInfo object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Spawn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_Spawn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_Spawn)
  return target;
}

size_t C_Spawn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_Spawn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Spawn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Spawn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Spawn::GetClassData() const { return &_class_data_; }

void C_Spawn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Spawn *>(to)->MergeFrom(
      static_cast<const C_Spawn &>(from));
}


void C_Spawn::MergeFrom(const C_Spawn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_Spawn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Spawn::CopyFrom(const C_Spawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_Spawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Spawn::IsInitialized() const {
  return true;
}

void C_Spawn::InternalSwap(C_Spawn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Spawn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[13]);
}

// ===================================================================

class S_Spawn::_Internal {
 public:
};

S_Spawn::S_Spawn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  object_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_Spawn)
}
S_Spawn::S_Spawn(const S_Spawn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      object_(from.object_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_Spawn)
}

inline void S_Spawn::SharedCtor() {
success_ = false;
}

S_Spawn::~S_Spawn() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_Spawn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_Spawn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Spawn::ArenaDtor(void* object) {
  S_Spawn* _this = reinterpret_cast< S_Spawn* >(object);
  (void)_this;
}
void S_Spawn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Spawn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Spawn::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_Spawn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_.Clear();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Spawn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PROTOCOL.ObjectInfo object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Spawn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_Spawn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated .PROTOCOL.ObjectInfo object = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_object(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_Spawn)
  return target;
}

size_t S_Spawn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_Spawn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.ObjectInfo object = 2;
  total_size += 1UL * this->_internal_object_size();
  for (const auto& msg : this->object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Spawn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Spawn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Spawn::GetClassData() const { return &_class_data_; }

void S_Spawn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Spawn *>(to)->MergeFrom(
      static_cast<const S_Spawn &>(from));
}


void S_Spawn::MergeFrom(const S_Spawn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_Spawn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  object_.MergeFrom(from.object_);
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Spawn::CopyFrom(const S_Spawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_Spawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Spawn::IsInitialized() const {
  return true;
}

void S_Spawn::InternalSwap(S_Spawn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  object_.InternalSwap(&other->object_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Spawn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[14]);
}

// ===================================================================

class S_DeSpawn::_Internal {
 public:
};

S_DeSpawn::S_DeSpawn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  objectids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_DeSpawn)
}
S_DeSpawn::S_DeSpawn(const S_DeSpawn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objectids_(from.objectids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_DeSpawn)
}

inline void S_DeSpawn::SharedCtor() {
}

S_DeSpawn::~S_DeSpawn() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_DeSpawn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_DeSpawn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_DeSpawn::ArenaDtor(void* object) {
  S_DeSpawn* _this = reinterpret_cast< S_DeSpawn* >(object);
  (void)_this;
}
void S_DeSpawn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_DeSpawn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_DeSpawn::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_DeSpawn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objectids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DeSpawn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 objectids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_objectids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_objectids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_DeSpawn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_DeSpawn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 objectids = 1;
  {
    int byte_size = _objectids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_objectids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_DeSpawn)
  return target;
}

size_t S_DeSpawn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_DeSpawn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 objectids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->objectids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _objectids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DeSpawn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_DeSpawn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DeSpawn::GetClassData() const { return &_class_data_; }

void S_DeSpawn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_DeSpawn *>(to)->MergeFrom(
      static_cast<const S_DeSpawn &>(from));
}


void S_DeSpawn::MergeFrom(const S_DeSpawn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_DeSpawn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  objectids_.MergeFrom(from.objectids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_DeSpawn::CopyFrom(const S_DeSpawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_DeSpawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DeSpawn::IsInitialized() const {
  return true;
}

void S_DeSpawn::InternalSwap(S_DeSpawn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  objectids_.InternalSwap(&other->objectids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DeSpawn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[15]);
}

// ===================================================================

class C_Move::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const C_Move* msg);
};

const ::PROTOCOL::ObjectInfo&
C_Move::_Internal::object(const C_Move* msg) {
  return *msg->object_;
}
C_Move::C_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_Move)
}
C_Move::C_Move(const C_Move& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_Move)
}

inline void C_Move::SharedCtor() {
object_ = nullptr;
}

C_Move::~C_Move() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_Move)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_Move::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void C_Move::ArenaDtor(void* object) {
  C_Move* _this = reinterpret_cast< C_Move* >(object);
  (void)_this;
}
void C_Move::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Move::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Move::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_Move)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Move::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ObjectInfo object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Move::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_Move)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_Move)
  return target;
}

size_t C_Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_Move)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Move::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Move::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Move::GetClassData() const { return &_class_data_; }

void C_Move::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Move *>(to)->MergeFrom(
      static_cast<const C_Move &>(from));
}


void C_Move::MergeFrom(const C_Move& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_Move)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Move::CopyFrom(const C_Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Move::IsInitialized() const {
  return true;
}

void C_Move::InternalSwap(C_Move* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Move::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[16]);
}

// ===================================================================

class S_Move::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const S_Move* msg);
};

const ::PROTOCOL::ObjectInfo&
S_Move::_Internal::object(const S_Move* msg) {
  return *msg->object_;
}
S_Move::S_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_Move)
}
S_Move::S_Move(const S_Move& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_Move)
}

inline void S_Move::SharedCtor() {
object_ = nullptr;
}

S_Move::~S_Move() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_Move)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_Move::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void S_Move::ArenaDtor(void* object) {
  S_Move* _this = reinterpret_cast< S_Move* >(object);
  (void)_this;
}
void S_Move::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Move::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Move::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_Move)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Move::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ObjectInfo object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Move::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_Move)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_Move)
  return target;
}

size_t S_Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_Move)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Move::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Move::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Move::GetClassData() const { return &_class_data_; }

void S_Move::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Move *>(to)->MergeFrom(
      static_cast<const S_Move &>(from));
}


void S_Move::MergeFrom(const S_Move& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_Move)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Move::CopyFrom(const S_Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Move::IsInitialized() const {
  return true;
}

void S_Move::InternalSwap(S_Move* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Move::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[17]);
}

// ===================================================================

class C_Skill::_Internal {
 public:
};

C_Skill::C_Skill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  victims_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_Skill)
}
C_Skill::C_Skill(const C_Skill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      victims_(from.victims_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&skillid_, &from.skillid_,
    static_cast<size_t>(reinterpret_cast<char*>(&attacker_) -
    reinterpret_cast<char*>(&skillid_)) + sizeof(attacker_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_Skill)
}

inline void C_Skill::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&skillid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attacker_) -
    reinterpret_cast<char*>(&skillid_)) + sizeof(attacker_));
}

C_Skill::~C_Skill() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_Skill)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_Skill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Skill::ArenaDtor(void* object) {
  C_Skill* _this = reinterpret_cast< C_Skill* >(object);
  (void)_this;
}
void C_Skill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Skill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Skill::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_Skill)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  victims_.Clear();
  ::memset(&skillid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attacker_) -
      reinterpret_cast<char*>(&skillid_)) + sizeof(attacker_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Skill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 skillid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attacker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          attacker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 victims = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_victims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_victims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Skill::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_Skill)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 skillid = 1;
  if (this->_internal_skillid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_skillid(), target);
  }

  // int32 attacker = 2;
  if (this->_internal_attacker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_attacker(), target);
  }

  // repeated int32 victims = 3;
  {
    int byte_size = _victims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_victims(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_Skill)
  return target;
}

size_t C_Skill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_Skill)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 victims = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->victims_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _victims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 skillid = 1;
  if (this->_internal_skillid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_skillid());
  }

  // int32 attacker = 2;
  if (this->_internal_attacker() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_attacker());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Skill::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Skill::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Skill::GetClassData() const { return &_class_data_; }

void C_Skill::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Skill *>(to)->MergeFrom(
      static_cast<const C_Skill &>(from));
}


void C_Skill::MergeFrom(const C_Skill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_Skill)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  victims_.MergeFrom(from.victims_);
  if (from._internal_skillid() != 0) {
    _internal_set_skillid(from._internal_skillid());
  }
  if (from._internal_attacker() != 0) {
    _internal_set_attacker(from._internal_attacker());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Skill::CopyFrom(const C_Skill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_Skill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Skill::IsInitialized() const {
  return true;
}

void C_Skill::InternalSwap(C_Skill* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  victims_.InternalSwap(&other->victims_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Skill, attacker_)
      + sizeof(C_Skill::attacker_)
      - PROTOBUF_FIELD_OFFSET(C_Skill, skillid_)>(
          reinterpret_cast<char*>(&skillid_),
          reinterpret_cast<char*>(&other->skillid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Skill::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[18]);
}

// ===================================================================

class S_Skill::_Internal {
 public:
};

S_Skill::S_Skill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  victims_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_Skill)
}
S_Skill::S_Skill(const S_Skill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      victims_(from.victims_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&skillid_, &from.skillid_,
    static_cast<size_t>(reinterpret_cast<char*>(&attacker_) -
    reinterpret_cast<char*>(&skillid_)) + sizeof(attacker_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_Skill)
}

inline void S_Skill::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&skillid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attacker_) -
    reinterpret_cast<char*>(&skillid_)) + sizeof(attacker_));
}

S_Skill::~S_Skill() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_Skill)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_Skill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Skill::ArenaDtor(void* object) {
  S_Skill* _this = reinterpret_cast< S_Skill* >(object);
  (void)_this;
}
void S_Skill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Skill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Skill::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_Skill)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  victims_.Clear();
  ::memset(&skillid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attacker_) -
      reinterpret_cast<char*>(&skillid_)) + sizeof(attacker_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Skill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 skillid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attacker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          attacker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 victims = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_victims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_victims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Skill::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_Skill)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 skillid = 1;
  if (this->_internal_skillid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_skillid(), target);
  }

  // int32 attacker = 2;
  if (this->_internal_attacker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_attacker(), target);
  }

  // repeated int32 victims = 3;
  {
    int byte_size = _victims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_victims(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_Skill)
  return target;
}

size_t S_Skill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_Skill)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 victims = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->victims_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _victims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 skillid = 1;
  if (this->_internal_skillid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_skillid());
  }

  // int32 attacker = 2;
  if (this->_internal_attacker() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_attacker());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Skill::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Skill::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Skill::GetClassData() const { return &_class_data_; }

void S_Skill::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Skill *>(to)->MergeFrom(
      static_cast<const S_Skill &>(from));
}


void S_Skill::MergeFrom(const S_Skill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_Skill)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  victims_.MergeFrom(from.victims_);
  if (from._internal_skillid() != 0) {
    _internal_set_skillid(from._internal_skillid());
  }
  if (from._internal_attacker() != 0) {
    _internal_set_attacker(from._internal_attacker());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Skill::CopyFrom(const S_Skill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_Skill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Skill::IsInitialized() const {
  return true;
}

void S_Skill::InternalSwap(S_Skill* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  victims_.InternalSwap(&other->victims_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Skill, attacker_)
      + sizeof(S_Skill::attacker_)
      - PROTOBUF_FIELD_OFFSET(S_Skill, skillid_)>(
          reinterpret_cast<char*>(&skillid_),
          reinterpret_cast<char*>(&other->skillid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Skill::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[19]);
}

// ===================================================================

class C_Chat::_Internal {
 public:
};

C_Chat::C_Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_Chat)
}
C_Chat::C_Chat(const C_Chat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_Chat)
}

inline void C_Chat::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_Chat::~C_Chat() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_Chat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_Chat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_Chat::ArenaDtor(void* object) {
  C_Chat* _this = reinterpret_cast< C_Chat* >(object);
  (void)_this;
}
void C_Chat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Chat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_Chat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Chat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PROTOCOL.C_Chat.text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Chat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_Chat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PROTOCOL.C_Chat.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_Chat)
  return target;
}

size_t C_Chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_Chat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Chat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Chat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Chat::GetClassData() const { return &_class_data_; }

void C_Chat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Chat *>(to)->MergeFrom(
      static_cast<const C_Chat &>(from));
}


void C_Chat::MergeFrom(const C_Chat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_Chat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Chat::CopyFrom(const C_Chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Chat::IsInitialized() const {
  return true;
}

void C_Chat::InternalSwap(C_Chat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Chat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[20]);
}

// ===================================================================

class S_Chat::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const S_Chat* msg);
};

const ::PROTOCOL::ObjectInfo&
S_Chat::_Internal::object(const S_Chat* msg) {
  return *msg->object_;
}
S_Chat::S_Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_Chat)
}
S_Chat::S_Chat(const S_Chat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_Chat)
}

inline void S_Chat::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
object_ = nullptr;
}

S_Chat::~S_Chat() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_Chat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_Chat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_;
}

void S_Chat::ArenaDtor(void* object) {
  S_Chat* _this = reinterpret_cast< S_Chat* >(object);
  (void)_this;
}
void S_Chat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Chat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_Chat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Chat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ObjectInfo object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PROTOCOL.S_Chat.text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Chat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_Chat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PROTOCOL.S_Chat.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_Chat)
  return target;
}

size_t S_Chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_Chat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Chat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Chat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Chat::GetClassData() const { return &_class_data_; }

void S_Chat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Chat *>(to)->MergeFrom(
      static_cast<const S_Chat &>(from));
}


void S_Chat::MergeFrom(const S_Chat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_Chat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Chat::CopyFrom(const S_Chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Chat::IsInitialized() const {
  return true;
}

void S_Chat::InternalSwap(S_Chat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Chat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[21]);
}

// ===================================================================

class S_ChangeHp::_Internal {
 public:
};

S_ChangeHp::S_ChangeHp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_ChangeHp)
}
S_ChangeHp::S_ChangeHp(const S_ChangeHp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_, &from.object_,
    static_cast<size_t>(reinterpret_cast<char*>(&hp_) -
    reinterpret_cast<char*>(&object_)) + sizeof(hp_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_ChangeHp)
}

inline void S_ChangeHp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hp_) -
    reinterpret_cast<char*>(&object_)) + sizeof(hp_));
}

S_ChangeHp::~S_ChangeHp() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_ChangeHp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_ChangeHp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ChangeHp::ArenaDtor(void* object) {
  S_ChangeHp* _this = reinterpret_cast< S_ChangeHp* >(object);
  (void)_this;
}
void S_ChangeHp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ChangeHp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ChangeHp::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_ChangeHp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hp_) -
      reinterpret_cast<char*>(&object_)) + sizeof(hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ChangeHp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ChangeHp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_ChangeHp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object = 1;
  if (this->_internal_object() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_object(), target);
  }

  // int32 hp = 2;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_ChangeHp)
  return target;
}

size_t S_ChangeHp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_ChangeHp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 object = 1;
  if (this->_internal_object() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_object());
  }

  // int32 hp = 2;
  if (this->_internal_hp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ChangeHp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ChangeHp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ChangeHp::GetClassData() const { return &_class_data_; }

void S_ChangeHp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ChangeHp *>(to)->MergeFrom(
      static_cast<const S_ChangeHp &>(from));
}


void S_ChangeHp::MergeFrom(const S_ChangeHp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_ChangeHp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object() != 0) {
    _internal_set_object(from._internal_object());
  }
  if (from._internal_hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ChangeHp::CopyFrom(const S_ChangeHp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_ChangeHp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ChangeHp::IsInitialized() const {
  return true;
}

void S_ChangeHp::InternalSwap(S_ChangeHp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ChangeHp, hp_)
      + sizeof(S_ChangeHp::hp_)
      - PROTOBUF_FIELD_OFFSET(S_ChangeHp, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ChangeHp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[22]);
}

// ===================================================================

class S_Die::_Internal {
 public:
};

S_Die::S_Die(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_Die)
}
S_Die::S_Die(const S_Die& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&victim_, &from.victim_,
    static_cast<size_t>(reinterpret_cast<char*>(&attacker_) -
    reinterpret_cast<char*>(&victim_)) + sizeof(attacker_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_Die)
}

inline void S_Die::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&victim_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attacker_) -
    reinterpret_cast<char*>(&victim_)) + sizeof(attacker_));
}

S_Die::~S_Die() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_Die)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_Die::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Die::ArenaDtor(void* object) {
  S_Die* _this = reinterpret_cast< S_Die* >(object);
  (void)_this;
}
void S_Die::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Die::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Die::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_Die)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&victim_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attacker_) -
      reinterpret_cast<char*>(&victim_)) + sizeof(attacker_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Die::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 victim = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          victim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attacker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          attacker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Die::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_Die)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 victim = 1;
  if (this->_internal_victim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_victim(), target);
  }

  // int32 attacker = 2;
  if (this->_internal_attacker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_attacker(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_Die)
  return target;
}

size_t S_Die::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_Die)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 victim = 1;
  if (this->_internal_victim() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_victim());
  }

  // int32 attacker = 2;
  if (this->_internal_attacker() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_attacker());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Die::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Die::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Die::GetClassData() const { return &_class_data_; }

void S_Die::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Die *>(to)->MergeFrom(
      static_cast<const S_Die &>(from));
}


void S_Die::MergeFrom(const S_Die& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_Die)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_victim() != 0) {
    _internal_set_victim(from._internal_victim());
  }
  if (from._internal_attacker() != 0) {
    _internal_set_attacker(from._internal_attacker());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Die::CopyFrom(const S_Die& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_Die)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Die::IsInitialized() const {
  return true;
}

void S_Die::InternalSwap(S_Die* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Die, attacker_)
      + sizeof(S_Die::attacker_)
      - PROTOBUF_FIELD_OFFSET(S_Die, victim_)>(
          reinterpret_cast<char*>(&victim_),
          reinterpret_cast<char*>(&other->victim_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Die::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[23]);
}

// ===================================================================

class S_ItemList::_Internal {
 public:
};

S_ItemList::S_ItemList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_ItemList)
}
S_ItemList::S_ItemList(const S_ItemList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_ItemList)
}

inline void S_ItemList::SharedCtor() {
}

S_ItemList::~S_ItemList() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_ItemList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_ItemList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ItemList::ArenaDtor(void* object) {
  S_ItemList* _this = reinterpret_cast< S_ItemList* >(object);
  (void)_this;
}
void S_ItemList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ItemList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ItemList::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_ItemList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ItemList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PROTOCOL.ItemInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ItemList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_ItemList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_ItemList)
  return target;
}

size_t S_ItemList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_ItemList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ItemList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ItemList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ItemList::GetClassData() const { return &_class_data_; }

void S_ItemList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ItemList *>(to)->MergeFrom(
      static_cast<const S_ItemList &>(from));
}


void S_ItemList::MergeFrom(const S_ItemList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_ItemList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ItemList::CopyFrom(const S_ItemList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_ItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ItemList::IsInitialized() const {
  return true;
}

void S_ItemList::InternalSwap(S_ItemList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ItemList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[24]);
}

// ===================================================================

class C_AddItem::_Internal {
 public:
};

C_AddItem::C_AddItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_AddItem)
}
C_AddItem::C_AddItem(const C_AddItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_AddItem)
}

inline void C_AddItem::SharedCtor() {
}

C_AddItem::~C_AddItem() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_AddItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_AddItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_AddItem::ArenaDtor(void* object) {
  C_AddItem* _this = reinterpret_cast< C_AddItem* >(object);
  (void)_this;
}
void C_AddItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_AddItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_AddItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_AddItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_AddItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PROTOCOL.ItemInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_AddItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_AddItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_AddItem)
  return target;
}

size_t C_AddItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_AddItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_AddItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_AddItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_AddItem::GetClassData() const { return &_class_data_; }

void C_AddItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_AddItem *>(to)->MergeFrom(
      static_cast<const C_AddItem &>(from));
}


void C_AddItem::MergeFrom(const C_AddItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_AddItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_AddItem::CopyFrom(const C_AddItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_AddItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_AddItem::IsInitialized() const {
  return true;
}

void C_AddItem::InternalSwap(C_AddItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_AddItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[25]);
}

// ===================================================================

class S_AddItem::_Internal {
 public:
};

S_AddItem::S_AddItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_AddItem)
}
S_AddItem::S_AddItem(const S_AddItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_AddItem)
}

inline void S_AddItem::SharedCtor() {
}

S_AddItem::~S_AddItem() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_AddItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_AddItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_AddItem::ArenaDtor(void* object) {
  S_AddItem* _this = reinterpret_cast< S_AddItem* >(object);
  (void)_this;
}
void S_AddItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_AddItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_AddItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_AddItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AddItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PROTOCOL.ItemInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_AddItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_AddItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_AddItem)
  return target;
}

size_t S_AddItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_AddItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_AddItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_AddItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_AddItem::GetClassData() const { return &_class_data_; }

void S_AddItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_AddItem *>(to)->MergeFrom(
      static_cast<const S_AddItem &>(from));
}


void S_AddItem::MergeFrom(const S_AddItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_AddItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_AddItem::CopyFrom(const S_AddItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_AddItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AddItem::IsInitialized() const {
  return true;
}

void S_AddItem::InternalSwap(S_AddItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AddItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[26]);
}

// ===================================================================

class S_UpdateItem::_Internal {
 public:
};

S_UpdateItem::S_UpdateItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_UpdateItem)
}
S_UpdateItem::S_UpdateItem(const S_UpdateItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_UpdateItem)
}

inline void S_UpdateItem::SharedCtor() {
}

S_UpdateItem::~S_UpdateItem() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_UpdateItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_UpdateItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_UpdateItem::ArenaDtor(void* object) {
  S_UpdateItem* _this = reinterpret_cast< S_UpdateItem* >(object);
  (void)_this;
}
void S_UpdateItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_UpdateItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_UpdateItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_UpdateItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_UpdateItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PROTOCOL.ItemInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_UpdateItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_UpdateItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_UpdateItem)
  return target;
}

size_t S_UpdateItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_UpdateItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.ItemInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_UpdateItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_UpdateItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_UpdateItem::GetClassData() const { return &_class_data_; }

void S_UpdateItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_UpdateItem *>(to)->MergeFrom(
      static_cast<const S_UpdateItem &>(from));
}


void S_UpdateItem::MergeFrom(const S_UpdateItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_UpdateItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_UpdateItem::CopyFrom(const S_UpdateItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_UpdateItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_UpdateItem::IsInitialized() const {
  return true;
}

void S_UpdateItem::InternalSwap(S_UpdateItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_UpdateItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[27]);
}

// ===================================================================

class S_RemoveItem::_Internal {
 public:
};

S_RemoveItem::S_RemoveItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  slots_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_RemoveItem)
}
S_RemoveItem::S_RemoveItem(const S_RemoveItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      slots_(from.slots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_RemoveItem)
}

inline void S_RemoveItem::SharedCtor() {
}

S_RemoveItem::~S_RemoveItem() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_RemoveItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_RemoveItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_RemoveItem::ArenaDtor(void* object) {
  S_RemoveItem* _this = reinterpret_cast< S_RemoveItem* >(object);
  (void)_this;
}
void S_RemoveItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_RemoveItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_RemoveItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_RemoveItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slots_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_RemoveItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 slots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_slots(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_slots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_RemoveItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_RemoveItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 slots = 1;
  {
    int byte_size = _slots_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_slots(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_RemoveItem)
  return target;
}

size_t S_RemoveItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_RemoveItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 slots = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->slots_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _slots_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_RemoveItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_RemoveItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_RemoveItem::GetClassData() const { return &_class_data_; }

void S_RemoveItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_RemoveItem *>(to)->MergeFrom(
      static_cast<const S_RemoveItem &>(from));
}


void S_RemoveItem::MergeFrom(const S_RemoveItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_RemoveItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_RemoveItem::CopyFrom(const S_RemoveItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_RemoveItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_RemoveItem::IsInitialized() const {
  return true;
}

void S_RemoveItem::InternalSwap(S_RemoveItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  slots_.InternalSwap(&other->slots_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_RemoveItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[28]);
}

// ===================================================================

class C_EquipItem::_Internal {
 public:
};

C_EquipItem::C_EquipItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_EquipItem)
}
C_EquipItem::C_EquipItem(const C_EquipItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&itemdbid_, &from.itemdbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&equip_) -
    reinterpret_cast<char*>(&itemdbid_)) + sizeof(equip_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_EquipItem)
}

inline void C_EquipItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemdbid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&equip_) -
    reinterpret_cast<char*>(&itemdbid_)) + sizeof(equip_));
}

C_EquipItem::~C_EquipItem() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_EquipItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_EquipItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_EquipItem::ArenaDtor(void* object) {
  C_EquipItem* _this = reinterpret_cast< C_EquipItem* >(object);
  (void)_this;
}
void C_EquipItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_EquipItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_EquipItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_EquipItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&itemdbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&equip_) -
      reinterpret_cast<char*>(&itemdbid_)) + sizeof(equip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_EquipItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 itemdbid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          itemdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool equip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          equip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_EquipItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_EquipItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemdbid = 1;
  if (this->_internal_itemdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_itemdbid(), target);
  }

  // int32 slot = 2;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_slot(), target);
  }

  // bool equip = 3;
  if (this->_internal_equip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_equip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_EquipItem)
  return target;
}

size_t C_EquipItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_EquipItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 itemdbid = 1;
  if (this->_internal_itemdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_itemdbid());
  }

  // int32 slot = 2;
  if (this->_internal_slot() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slot());
  }

  // bool equip = 3;
  if (this->_internal_equip() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_EquipItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_EquipItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_EquipItem::GetClassData() const { return &_class_data_; }

void C_EquipItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_EquipItem *>(to)->MergeFrom(
      static_cast<const C_EquipItem &>(from));
}


void C_EquipItem::MergeFrom(const C_EquipItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_EquipItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_itemdbid() != 0) {
    _internal_set_itemdbid(from._internal_itemdbid());
  }
  if (from._internal_slot() != 0) {
    _internal_set_slot(from._internal_slot());
  }
  if (from._internal_equip() != 0) {
    _internal_set_equip(from._internal_equip());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_EquipItem::CopyFrom(const C_EquipItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_EquipItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_EquipItem::IsInitialized() const {
  return true;
}

void C_EquipItem::InternalSwap(C_EquipItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_EquipItem, equip_)
      + sizeof(C_EquipItem::equip_)
      - PROTOBUF_FIELD_OFFSET(C_EquipItem, itemdbid_)>(
          reinterpret_cast<char*>(&itemdbid_),
          reinterpret_cast<char*>(&other->itemdbid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_EquipItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[29]);
}

// ===================================================================

class S_EquipItem::_Internal {
 public:
};

S_EquipItem::S_EquipItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_EquipItem)
}
S_EquipItem::S_EquipItem(const S_EquipItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&itemdbid_, &from.itemdbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&equip_) -
    reinterpret_cast<char*>(&itemdbid_)) + sizeof(equip_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_EquipItem)
}

inline void S_EquipItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemdbid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&equip_) -
    reinterpret_cast<char*>(&itemdbid_)) + sizeof(equip_));
}

S_EquipItem::~S_EquipItem() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_EquipItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_EquipItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_EquipItem::ArenaDtor(void* object) {
  S_EquipItem* _this = reinterpret_cast< S_EquipItem* >(object);
  (void)_this;
}
void S_EquipItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_EquipItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_EquipItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_EquipItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&itemdbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&equip_) -
      reinterpret_cast<char*>(&itemdbid_)) + sizeof(equip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_EquipItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 itemdbid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          itemdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool equip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          equip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_EquipItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_EquipItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemdbid = 1;
  if (this->_internal_itemdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_itemdbid(), target);
  }

  // int32 slot = 2;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_slot(), target);
  }

  // bool equip = 3;
  if (this->_internal_equip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_equip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_EquipItem)
  return target;
}

size_t S_EquipItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_EquipItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 itemdbid = 1;
  if (this->_internal_itemdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_itemdbid());
  }

  // int32 slot = 2;
  if (this->_internal_slot() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slot());
  }

  // bool equip = 3;
  if (this->_internal_equip() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_EquipItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_EquipItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_EquipItem::GetClassData() const { return &_class_data_; }

void S_EquipItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_EquipItem *>(to)->MergeFrom(
      static_cast<const S_EquipItem &>(from));
}


void S_EquipItem::MergeFrom(const S_EquipItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_EquipItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_itemdbid() != 0) {
    _internal_set_itemdbid(from._internal_itemdbid());
  }
  if (from._internal_slot() != 0) {
    _internal_set_slot(from._internal_slot());
  }
  if (from._internal_equip() != 0) {
    _internal_set_equip(from._internal_equip());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_EquipItem::CopyFrom(const S_EquipItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_EquipItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_EquipItem::IsInitialized() const {
  return true;
}

void S_EquipItem::InternalSwap(S_EquipItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_EquipItem, equip_)
      + sizeof(S_EquipItem::equip_)
      - PROTOBUF_FIELD_OFFSET(S_EquipItem, itemdbid_)>(
          reinterpret_cast<char*>(&itemdbid_),
          reinterpret_cast<char*>(&other->itemdbid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_EquipItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[30]);
}

// ===================================================================

class C_UseItem::_Internal {
 public:
};

C_UseItem::C_UseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_UseItem)
}
C_UseItem::C_UseItem(const C_UseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&itemdbid_, &from.itemdbid_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_) -
    reinterpret_cast<char*>(&itemdbid_)) + sizeof(use_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_UseItem)
}

inline void C_UseItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemdbid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_) -
    reinterpret_cast<char*>(&itemdbid_)) + sizeof(use_));
}

C_UseItem::~C_UseItem() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_UseItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_UseItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_UseItem::ArenaDtor(void* object) {
  C_UseItem* _this = reinterpret_cast< C_UseItem* >(object);
  (void)_this;
}
void C_UseItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_UseItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_UseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_UseItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&itemdbid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_) -
      reinterpret_cast<char*>(&itemdbid_)) + sizeof(use_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_UseItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 itemdbid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          itemdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_UseItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_UseItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemdbid = 1;
  if (this->_internal_itemdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_itemdbid(), target);
  }

  // int32 slot = 2;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_slot(), target);
  }

  // bool use = 3;
  if (this->_internal_use() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_UseItem)
  return target;
}

size_t C_UseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_UseItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 itemdbid = 1;
  if (this->_internal_itemdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_itemdbid());
  }

  // int32 slot = 2;
  if (this->_internal_slot() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slot());
  }

  // bool use = 3;
  if (this->_internal_use() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_UseItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_UseItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_UseItem::GetClassData() const { return &_class_data_; }

void C_UseItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_UseItem *>(to)->MergeFrom(
      static_cast<const C_UseItem &>(from));
}


void C_UseItem::MergeFrom(const C_UseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_UseItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_itemdbid() != 0) {
    _internal_set_itemdbid(from._internal_itemdbid());
  }
  if (from._internal_slot() != 0) {
    _internal_set_slot(from._internal_slot());
  }
  if (from._internal_use() != 0) {
    _internal_set_use(from._internal_use());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_UseItem::CopyFrom(const C_UseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_UseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_UseItem::IsInitialized() const {
  return true;
}

void C_UseItem::InternalSwap(C_UseItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_UseItem, use_)
      + sizeof(C_UseItem::use_)
      - PROTOBUF_FIELD_OFFSET(C_UseItem, itemdbid_)>(
          reinterpret_cast<char*>(&itemdbid_),
          reinterpret_cast<char*>(&other->itemdbid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_UseItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[31]);
}

// ===================================================================

class S_UseItem::_Internal {
 public:
  static const ::PROTOCOL::ItemInfo& item(const S_UseItem* msg);
};

const ::PROTOCOL::ItemInfo&
S_UseItem::_Internal::item(const S_UseItem* msg) {
  return *msg->item_;
}
S_UseItem::S_UseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_UseItem)
}
S_UseItem::S_UseItem(const S_UseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    item_ = new ::PROTOCOL::ItemInfo(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_UseItem)
}

inline void S_UseItem::SharedCtor() {
item_ = nullptr;
}

S_UseItem::~S_UseItem() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_UseItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_UseItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete item_;
}

void S_UseItem::ArenaDtor(void* object) {
  S_UseItem* _this = reinterpret_cast< S_UseItem* >(object);
  (void)_this;
}
void S_UseItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_UseItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_UseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_UseItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_UseItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ItemInfo item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_UseItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_UseItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ItemInfo item = 1;
  if (this->_internal_has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_UseItem)
  return target;
}

size_t S_UseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_UseItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ItemInfo item = 1;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_UseItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_UseItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_UseItem::GetClassData() const { return &_class_data_; }

void S_UseItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_UseItem *>(to)->MergeFrom(
      static_cast<const S_UseItem &>(from));
}


void S_UseItem::MergeFrom(const S_UseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_UseItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _internal_mutable_item()->::PROTOCOL::ItemInfo::MergeFrom(from._internal_item());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_UseItem::CopyFrom(const S_UseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_UseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_UseItem::IsInitialized() const {
  return true;
}

void S_UseItem::InternalSwap(S_UseItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(item_, other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_UseItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[32]);
}

// ===================================================================

class S_ChangeStat::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const S_ChangeStat* msg);
};

const ::PROTOCOL::ObjectInfo&
S_ChangeStat::_Internal::object(const S_ChangeStat* msg) {
  return *msg->object_;
}
S_ChangeStat::S_ChangeStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_ChangeStat)
}
S_ChangeStat::S_ChangeStat(const S_ChangeStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_ChangeStat)
}

inline void S_ChangeStat::SharedCtor() {
object_ = nullptr;
}

S_ChangeStat::~S_ChangeStat() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_ChangeStat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_ChangeStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void S_ChangeStat::ArenaDtor(void* object) {
  S_ChangeStat* _this = reinterpret_cast< S_ChangeStat* >(object);
  (void)_this;
}
void S_ChangeStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ChangeStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ChangeStat::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_ChangeStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ChangeStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ObjectInfo object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ChangeStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_ChangeStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_ChangeStat)
  return target;
}

size_t S_ChangeStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_ChangeStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ChangeStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ChangeStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ChangeStat::GetClassData() const { return &_class_data_; }

void S_ChangeStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ChangeStat *>(to)->MergeFrom(
      static_cast<const S_ChangeStat &>(from));
}


void S_ChangeStat::MergeFrom(const S_ChangeStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_ChangeStat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ChangeStat::CopyFrom(const S_ChangeStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_ChangeStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ChangeStat::IsInitialized() const {
  return true;
}

void S_ChangeStat::InternalSwap(S_ChangeStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ChangeStat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[33]);
}

// ===================================================================

class C_CreatePlayer::_Internal {
 public:
};

C_CreatePlayer::C_CreatePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_CreatePlayer)
}
C_CreatePlayer::C_CreatePlayer(const C_CreatePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_CreatePlayer)
}

inline void C_CreatePlayer::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CreatePlayer::~C_CreatePlayer() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_CreatePlayer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_CreatePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_CreatePlayer::ArenaDtor(void* object) {
  C_CreatePlayer* _this = reinterpret_cast< C_CreatePlayer* >(object);
  (void)_this;
}
void C_CreatePlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_CreatePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_CreatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_CreatePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CreatePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PROTOCOL.C_CreatePlayer.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CreatePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_CreatePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PROTOCOL.C_CreatePlayer.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_CreatePlayer)
  return target;
}

size_t C_CreatePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_CreatePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CreatePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_CreatePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CreatePlayer::GetClassData() const { return &_class_data_; }

void C_CreatePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_CreatePlayer *>(to)->MergeFrom(
      static_cast<const C_CreatePlayer &>(from));
}


void C_CreatePlayer::MergeFrom(const C_CreatePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_CreatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CreatePlayer::CopyFrom(const C_CreatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_CreatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CreatePlayer::IsInitialized() const {
  return true;
}

void C_CreatePlayer::InternalSwap(C_CreatePlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CreatePlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[34]);
}

// ===================================================================

class S_CreatePlayer::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& object(const S_CreatePlayer* msg);
};

const ::PROTOCOL::ObjectInfo&
S_CreatePlayer::_Internal::object(const S_CreatePlayer* msg) {
  return *msg->object_;
}
S_CreatePlayer::S_CreatePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_CreatePlayer)
}
S_CreatePlayer::S_CreatePlayer(const S_CreatePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::PROTOCOL::ObjectInfo(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_CreatePlayer)
}

inline void S_CreatePlayer::SharedCtor() {
object_ = nullptr;
}

S_CreatePlayer::~S_CreatePlayer() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_CreatePlayer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_CreatePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void S_CreatePlayer::ArenaDtor(void* object) {
  S_CreatePlayer* _this = reinterpret_cast< S_CreatePlayer* >(object);
  (void)_this;
}
void S_CreatePlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CreatePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CreatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_CreatePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CreatePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ObjectInfo object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CreatePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_CreatePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_CreatePlayer)
  return target;
}

size_t S_CreatePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_CreatePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CreatePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CreatePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CreatePlayer::GetClassData() const { return &_class_data_; }

void S_CreatePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CreatePlayer *>(to)->MergeFrom(
      static_cast<const S_CreatePlayer &>(from));
}


void S_CreatePlayer::MergeFrom(const S_CreatePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_CreatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _internal_mutable_object()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_object());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CreatePlayer::CopyFrom(const S_CreatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_CreatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CreatePlayer::IsInitialized() const {
  return true;
}

void S_CreatePlayer::InternalSwap(S_CreatePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CreatePlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[35]);
}

// ===================================================================

class S_AddExp::_Internal {
 public:
};

S_AddExp::S_AddExp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_AddExp)
}
S_AddExp::S_AddExp(const S_AddExp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exp_ = from.exp_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_AddExp)
}

inline void S_AddExp::SharedCtor() {
exp_ = 0;
}

S_AddExp::~S_AddExp() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_AddExp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_AddExp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_AddExp::ArenaDtor(void* object) {
  S_AddExp* _this = reinterpret_cast< S_AddExp* >(object);
  (void)_this;
}
void S_AddExp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_AddExp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_AddExp::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_AddExp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AddExp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 exp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_AddExp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_AddExp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 exp = 1;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_AddExp)
  return target;
}

size_t S_AddExp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_AddExp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 exp = 1;
  if (this->_internal_exp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_exp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_AddExp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_AddExp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_AddExp::GetClassData() const { return &_class_data_; }

void S_AddExp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_AddExp *>(to)->MergeFrom(
      static_cast<const S_AddExp &>(from));
}


void S_AddExp::MergeFrom(const S_AddExp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_AddExp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_AddExp::CopyFrom(const S_AddExp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_AddExp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AddExp::IsInitialized() const {
  return true;
}

void S_AddExp::InternalSwap(S_AddExp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(exp_, other->exp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AddExp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[36]);
}

// ===================================================================

class S_LevelUp::_Internal {
 public:
  static const ::PROTOCOL::ObjectInfo& info(const S_LevelUp* msg);
};

const ::PROTOCOL::ObjectInfo&
S_LevelUp::_Internal::info(const S_LevelUp* msg) {
  return *msg->info_;
}
S_LevelUp::S_LevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_LevelUp)
}
S_LevelUp::S_LevelUp(const S_LevelUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::PROTOCOL::ObjectInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_LevelUp)
}

inline void S_LevelUp::SharedCtor() {
info_ = nullptr;
}

S_LevelUp::~S_LevelUp() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_LevelUp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_LevelUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void S_LevelUp::ArenaDtor(void* object) {
  S_LevelUp* _this = reinterpret_cast< S_LevelUp* >(object);
  (void)_this;
}
void S_LevelUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_LevelUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_LevelUp::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_LevelUp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LevelUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.ObjectInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LevelUp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_LevelUp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo info = 1;
  if (this->_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_LevelUp)
  return target;
}

size_t S_LevelUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_LevelUp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.ObjectInfo info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LevelUp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_LevelUp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LevelUp::GetClassData() const { return &_class_data_; }

void S_LevelUp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_LevelUp *>(to)->MergeFrom(
      static_cast<const S_LevelUp &>(from));
}


void S_LevelUp::MergeFrom(const S_LevelUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_LevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _internal_mutable_info()->::PROTOCOL::ObjectInfo::MergeFrom(from._internal_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LevelUp::CopyFrom(const S_LevelUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_LevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LevelUp::IsInitialized() const {
  return true;
}

void S_LevelUp::InternalSwap(S_LevelUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LevelUp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[37]);
}

// ===================================================================

class C_AddQuest::_Internal {
 public:
  static const ::PROTOCOL::QuestInfo& quest(const C_AddQuest* msg);
};

const ::PROTOCOL::QuestInfo&
C_AddQuest::_Internal::quest(const C_AddQuest* msg) {
  return *msg->quest_;
}
C_AddQuest::C_AddQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_AddQuest)
}
C_AddQuest::C_AddQuest(const C_AddQuest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_quest()) {
    quest_ = new ::PROTOCOL::QuestInfo(*from.quest_);
  } else {
    quest_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_AddQuest)
}

inline void C_AddQuest::SharedCtor() {
quest_ = nullptr;
}

C_AddQuest::~C_AddQuest() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_AddQuest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_AddQuest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete quest_;
}

void C_AddQuest::ArenaDtor(void* object) {
  C_AddQuest* _this = reinterpret_cast< C_AddQuest* >(object);
  (void)_this;
}
void C_AddQuest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_AddQuest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_AddQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_AddQuest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && quest_ != nullptr) {
    delete quest_;
  }
  quest_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_AddQuest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.QuestInfo quest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_quest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_AddQuest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_AddQuest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.QuestInfo quest = 1;
  if (this->_internal_has_quest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::quest(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_AddQuest)
  return target;
}

size_t C_AddQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_AddQuest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.QuestInfo quest = 1;
  if (this->_internal_has_quest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quest_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_AddQuest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_AddQuest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_AddQuest::GetClassData() const { return &_class_data_; }

void C_AddQuest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_AddQuest *>(to)->MergeFrom(
      static_cast<const C_AddQuest &>(from));
}


void C_AddQuest::MergeFrom(const C_AddQuest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_AddQuest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_quest()) {
    _internal_mutable_quest()->::PROTOCOL::QuestInfo::MergeFrom(from._internal_quest());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_AddQuest::CopyFrom(const C_AddQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_AddQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_AddQuest::IsInitialized() const {
  return true;
}

void C_AddQuest::InternalSwap(C_AddQuest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(quest_, other->quest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_AddQuest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[38]);
}

// ===================================================================

class S_AddQuest::_Internal {
 public:
  static const ::PROTOCOL::QuestInfo& quest(const S_AddQuest* msg);
};

const ::PROTOCOL::QuestInfo&
S_AddQuest::_Internal::quest(const S_AddQuest* msg) {
  return *msg->quest_;
}
S_AddQuest::S_AddQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_AddQuest)
}
S_AddQuest::S_AddQuest(const S_AddQuest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_quest()) {
    quest_ = new ::PROTOCOL::QuestInfo(*from.quest_);
  } else {
    quest_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_AddQuest)
}

inline void S_AddQuest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quest_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&quest_)) + sizeof(result_));
}

S_AddQuest::~S_AddQuest() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_AddQuest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_AddQuest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete quest_;
}

void S_AddQuest::ArenaDtor(void* object) {
  S_AddQuest* _this = reinterpret_cast< S_AddQuest* >(object);
  (void)_this;
}
void S_AddQuest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_AddQuest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_AddQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_AddQuest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && quest_ != nullptr) {
    delete quest_;
  }
  quest_ = nullptr;
  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AddQuest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PROTOCOL.QuestInfo quest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_AddQuest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_AddQuest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // .PROTOCOL.QuestInfo quest = 2;
  if (this->_internal_has_quest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::quest(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_AddQuest)
  return target;
}

size_t S_AddQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_AddQuest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.QuestInfo quest = 2;
  if (this->_internal_has_quest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quest_);
  }

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_AddQuest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_AddQuest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_AddQuest::GetClassData() const { return &_class_data_; }

void S_AddQuest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_AddQuest *>(to)->MergeFrom(
      static_cast<const S_AddQuest &>(from));
}


void S_AddQuest::MergeFrom(const S_AddQuest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_AddQuest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_quest()) {
    _internal_mutable_quest()->::PROTOCOL::QuestInfo::MergeFrom(from._internal_quest());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_AddQuest::CopyFrom(const S_AddQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_AddQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AddQuest::IsInitialized() const {
  return true;
}

void S_AddQuest::InternalSwap(S_AddQuest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_AddQuest, result_)
      + sizeof(S_AddQuest::result_)
      - PROTOBUF_FIELD_OFFSET(S_AddQuest, quest_)>(
          reinterpret_cast<char*>(&quest_),
          reinterpret_cast<char*>(&other->quest_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AddQuest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[39]);
}

// ===================================================================

class S_QuestList::_Internal {
 public:
};

S_QuestList::S_QuestList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  quests_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_QuestList)
}
S_QuestList::S_QuestList(const S_QuestList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      quests_(from.quests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_QuestList)
}

inline void S_QuestList::SharedCtor() {
}

S_QuestList::~S_QuestList() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_QuestList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_QuestList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_QuestList::ArenaDtor(void* object) {
  S_QuestList* _this = reinterpret_cast< S_QuestList* >(object);
  (void)_this;
}
void S_QuestList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_QuestList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_QuestList::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_QuestList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quests_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_QuestList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PROTOCOL.QuestInfo quests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_QuestList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_QuestList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PROTOCOL.QuestInfo quests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_quests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_QuestList)
  return target;
}

size_t S_QuestList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_QuestList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PROTOCOL.QuestInfo quests = 1;
  total_size += 1UL * this->_internal_quests_size();
  for (const auto& msg : this->quests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_QuestList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_QuestList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_QuestList::GetClassData() const { return &_class_data_; }

void S_QuestList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_QuestList *>(to)->MergeFrom(
      static_cast<const S_QuestList &>(from));
}


void S_QuestList::MergeFrom(const S_QuestList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_QuestList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  quests_.MergeFrom(from.quests_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_QuestList::CopyFrom(const S_QuestList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_QuestList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_QuestList::IsInitialized() const {
  return true;
}

void S_QuestList::InternalSwap(S_QuestList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  quests_.InternalSwap(&other->quests_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_QuestList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[40]);
}

// ===================================================================

class C_RemoveQuest::_Internal {
 public:
};

C_RemoveQuest::C_RemoveQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_RemoveQuest)
}
C_RemoveQuest::C_RemoveQuest(const C_RemoveQuest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  questdbid_ = from.questdbid_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_RemoveQuest)
}

inline void C_RemoveQuest::SharedCtor() {
questdbid_ = 0;
}

C_RemoveQuest::~C_RemoveQuest() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_RemoveQuest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_RemoveQuest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_RemoveQuest::ArenaDtor(void* object) {
  C_RemoveQuest* _this = reinterpret_cast< C_RemoveQuest* >(object);
  (void)_this;
}
void C_RemoveQuest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_RemoveQuest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_RemoveQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_RemoveQuest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  questdbid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_RemoveQuest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 questdbid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          questdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_RemoveQuest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_RemoveQuest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 questdbid = 1;
  if (this->_internal_questdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_questdbid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_RemoveQuest)
  return target;
}

size_t C_RemoveQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_RemoveQuest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 questdbid = 1;
  if (this->_internal_questdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_questdbid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_RemoveQuest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_RemoveQuest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_RemoveQuest::GetClassData() const { return &_class_data_; }

void C_RemoveQuest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_RemoveQuest *>(to)->MergeFrom(
      static_cast<const C_RemoveQuest &>(from));
}


void C_RemoveQuest::MergeFrom(const C_RemoveQuest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_RemoveQuest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_questdbid() != 0) {
    _internal_set_questdbid(from._internal_questdbid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_RemoveQuest::CopyFrom(const C_RemoveQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_RemoveQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_RemoveQuest::IsInitialized() const {
  return true;
}

void C_RemoveQuest::InternalSwap(C_RemoveQuest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(questdbid_, other->questdbid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_RemoveQuest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[41]);
}

// ===================================================================

class S_RemoveQuest::_Internal {
 public:
};

S_RemoveQuest::S_RemoveQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_RemoveQuest)
}
S_RemoveQuest::S_RemoveQuest(const S_RemoveQuest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&questid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(questid_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_RemoveQuest)
}

inline void S_RemoveQuest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&questid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(questid_));
}

S_RemoveQuest::~S_RemoveQuest() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_RemoveQuest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_RemoveQuest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_RemoveQuest::ArenaDtor(void* object) {
  S_RemoveQuest* _this = reinterpret_cast< S_RemoveQuest* >(object);
  (void)_this;
}
void S_RemoveQuest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_RemoveQuest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_RemoveQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_RemoveQuest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&questid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(questid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_RemoveQuest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 questid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_RemoveQuest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_RemoveQuest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // int32 questid = 2;
  if (this->_internal_questid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_questid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_RemoveQuest)
  return target;
}

size_t S_RemoveQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_RemoveQuest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  // int32 questid = 2;
  if (this->_internal_questid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_questid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_RemoveQuest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_RemoveQuest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_RemoveQuest::GetClassData() const { return &_class_data_; }

void S_RemoveQuest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_RemoveQuest *>(to)->MergeFrom(
      static_cast<const S_RemoveQuest &>(from));
}


void S_RemoveQuest::MergeFrom(const S_RemoveQuest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_RemoveQuest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_questid() != 0) {
    _internal_set_questid(from._internal_questid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_RemoveQuest::CopyFrom(const S_RemoveQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_RemoveQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_RemoveQuest::IsInitialized() const {
  return true;
}

void S_RemoveQuest::InternalSwap(S_RemoveQuest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_RemoveQuest, questid_)
      + sizeof(S_RemoveQuest::questid_)
      - PROTOBUF_FIELD_OFFSET(S_RemoveQuest, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_RemoveQuest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[42]);
}

// ===================================================================

class C_CompleteQuest::_Internal {
 public:
};

C_CompleteQuest::C_CompleteQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_CompleteQuest)
}
C_CompleteQuest::C_CompleteQuest(const C_CompleteQuest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  questdbid_ = from.questdbid_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_CompleteQuest)
}

inline void C_CompleteQuest::SharedCtor() {
questdbid_ = 0;
}

C_CompleteQuest::~C_CompleteQuest() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_CompleteQuest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_CompleteQuest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_CompleteQuest::ArenaDtor(void* object) {
  C_CompleteQuest* _this = reinterpret_cast< C_CompleteQuest* >(object);
  (void)_this;
}
void C_CompleteQuest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_CompleteQuest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_CompleteQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_CompleteQuest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  questdbid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CompleteQuest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 questdbid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          questdbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CompleteQuest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_CompleteQuest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 questdbid = 1;
  if (this->_internal_questdbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_questdbid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_CompleteQuest)
  return target;
}

size_t C_CompleteQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_CompleteQuest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 questdbid = 1;
  if (this->_internal_questdbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_questdbid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CompleteQuest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_CompleteQuest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CompleteQuest::GetClassData() const { return &_class_data_; }

void C_CompleteQuest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_CompleteQuest *>(to)->MergeFrom(
      static_cast<const C_CompleteQuest &>(from));
}


void C_CompleteQuest::MergeFrom(const C_CompleteQuest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_CompleteQuest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_questdbid() != 0) {
    _internal_set_questdbid(from._internal_questdbid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CompleteQuest::CopyFrom(const C_CompleteQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_CompleteQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CompleteQuest::IsInitialized() const {
  return true;
}

void C_CompleteQuest::InternalSwap(C_CompleteQuest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(questdbid_, other->questdbid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CompleteQuest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[43]);
}

// ===================================================================

class S_CompleteQuest::_Internal {
 public:
};

S_CompleteQuest::S_CompleteQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_CompleteQuest)
}
S_CompleteQuest::S_CompleteQuest(const S_CompleteQuest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&questid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(questid_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_CompleteQuest)
}

inline void S_CompleteQuest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&questid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(questid_));
}

S_CompleteQuest::~S_CompleteQuest() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_CompleteQuest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_CompleteQuest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_CompleteQuest::ArenaDtor(void* object) {
  S_CompleteQuest* _this = reinterpret_cast< S_CompleteQuest* >(object);
  (void)_this;
}
void S_CompleteQuest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CompleteQuest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CompleteQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_CompleteQuest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&questid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(questid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CompleteQuest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 questid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CompleteQuest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_CompleteQuest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // int32 questid = 2;
  if (this->_internal_questid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_questid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_CompleteQuest)
  return target;
}

size_t S_CompleteQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_CompleteQuest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  // int32 questid = 2;
  if (this->_internal_questid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_questid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CompleteQuest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CompleteQuest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CompleteQuest::GetClassData() const { return &_class_data_; }

void S_CompleteQuest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CompleteQuest *>(to)->MergeFrom(
      static_cast<const S_CompleteQuest &>(from));
}


void S_CompleteQuest::MergeFrom(const S_CompleteQuest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_CompleteQuest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_questid() != 0) {
    _internal_set_questid(from._internal_questid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CompleteQuest::CopyFrom(const S_CompleteQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_CompleteQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CompleteQuest::IsInitialized() const {
  return true;
}

void S_CompleteQuest::InternalSwap(S_CompleteQuest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_CompleteQuest, questid_)
      + sizeof(S_CompleteQuest::questid_)
      - PROTOBUF_FIELD_OFFSET(S_CompleteQuest, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CompleteQuest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[44]);
}

// ===================================================================

class C_UpdateQuest::_Internal {
 public:
  static const ::PROTOCOL::QuestInfo& questinfo(const C_UpdateQuest* msg);
};

const ::PROTOCOL::QuestInfo&
C_UpdateQuest::_Internal::questinfo(const C_UpdateQuest* msg) {
  return *msg->questinfo_;
}
C_UpdateQuest::C_UpdateQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_UpdateQuest)
}
C_UpdateQuest::C_UpdateQuest(const C_UpdateQuest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_questinfo()) {
    questinfo_ = new ::PROTOCOL::QuestInfo(*from.questinfo_);
  } else {
    questinfo_ = nullptr;
  }
  objectid_ = from.objectid_;
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_UpdateQuest)
}

inline void C_UpdateQuest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&questinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&objectid_) -
    reinterpret_cast<char*>(&questinfo_)) + sizeof(objectid_));
}

C_UpdateQuest::~C_UpdateQuest() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_UpdateQuest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_UpdateQuest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete questinfo_;
}

void C_UpdateQuest::ArenaDtor(void* object) {
  C_UpdateQuest* _this = reinterpret_cast< C_UpdateQuest* >(object);
  (void)_this;
}
void C_UpdateQuest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_UpdateQuest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_UpdateQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_UpdateQuest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && questinfo_ != nullptr) {
    delete questinfo_;
  }
  questinfo_ = nullptr;
  objectid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_UpdateQuest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.QuestInfo questinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_questinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objectid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_UpdateQuest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_UpdateQuest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.QuestInfo questinfo = 1;
  if (this->_internal_has_questinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::questinfo(this), target, stream);
  }

  // int32 objectid = 2;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_objectid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_UpdateQuest)
  return target;
}

size_t C_UpdateQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_UpdateQuest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.QuestInfo questinfo = 1;
  if (this->_internal_has_questinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *questinfo_);
  }

  // int32 objectid = 2;
  if (this->_internal_objectid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_UpdateQuest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_UpdateQuest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_UpdateQuest::GetClassData() const { return &_class_data_; }

void C_UpdateQuest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_UpdateQuest *>(to)->MergeFrom(
      static_cast<const C_UpdateQuest &>(from));
}


void C_UpdateQuest::MergeFrom(const C_UpdateQuest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_UpdateQuest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_questinfo()) {
    _internal_mutable_questinfo()->::PROTOCOL::QuestInfo::MergeFrom(from._internal_questinfo());
  }
  if (from._internal_objectid() != 0) {
    _internal_set_objectid(from._internal_objectid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_UpdateQuest::CopyFrom(const C_UpdateQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_UpdateQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_UpdateQuest::IsInitialized() const {
  return true;
}

void C_UpdateQuest::InternalSwap(C_UpdateQuest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_UpdateQuest, objectid_)
      + sizeof(C_UpdateQuest::objectid_)
      - PROTOBUF_FIELD_OFFSET(C_UpdateQuest, questinfo_)>(
          reinterpret_cast<char*>(&questinfo_),
          reinterpret_cast<char*>(&other->questinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_UpdateQuest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[45]);
}

// ===================================================================

class S_UpdateQuest::_Internal {
 public:
  static const ::PROTOCOL::QuestInfo& questinfo(const S_UpdateQuest* msg);
};

const ::PROTOCOL::QuestInfo&
S_UpdateQuest::_Internal::questinfo(const S_UpdateQuest* msg) {
  return *msg->questinfo_;
}
S_UpdateQuest::S_UpdateQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_UpdateQuest)
}
S_UpdateQuest::S_UpdateQuest(const S_UpdateQuest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_questinfo()) {
    questinfo_ = new ::PROTOCOL::QuestInfo(*from.questinfo_);
  } else {
    questinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_UpdateQuest)
}

inline void S_UpdateQuest::SharedCtor() {
questinfo_ = nullptr;
}

S_UpdateQuest::~S_UpdateQuest() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_UpdateQuest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_UpdateQuest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete questinfo_;
}

void S_UpdateQuest::ArenaDtor(void* object) {
  S_UpdateQuest* _this = reinterpret_cast< S_UpdateQuest* >(object);
  (void)_this;
}
void S_UpdateQuest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_UpdateQuest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_UpdateQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_UpdateQuest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && questinfo_ != nullptr) {
    delete questinfo_;
  }
  questinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_UpdateQuest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PROTOCOL.QuestInfo questInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_questinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_UpdateQuest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_UpdateQuest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PROTOCOL.QuestInfo questInfo = 1;
  if (this->_internal_has_questinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::questinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_UpdateQuest)
  return target;
}

size_t S_UpdateQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_UpdateQuest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PROTOCOL.QuestInfo questInfo = 1;
  if (this->_internal_has_questinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *questinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_UpdateQuest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_UpdateQuest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_UpdateQuest::GetClassData() const { return &_class_data_; }

void S_UpdateQuest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_UpdateQuest *>(to)->MergeFrom(
      static_cast<const S_UpdateQuest &>(from));
}


void S_UpdateQuest::MergeFrom(const S_UpdateQuest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_UpdateQuest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_questinfo()) {
    _internal_mutable_questinfo()->::PROTOCOL::QuestInfo::MergeFrom(from._internal_questinfo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_UpdateQuest::CopyFrom(const S_UpdateQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_UpdateQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_UpdateQuest::IsInitialized() const {
  return true;
}

void S_UpdateQuest::InternalSwap(S_UpdateQuest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(questinfo_, other->questinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_UpdateQuest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[46]);
}

// ===================================================================

class C_Test::_Internal {
 public:
};

C_Test::C_Test(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.C_Test)
}
C_Test::C_Test(const C_Test& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&testint_, &from.testint_,
    static_cast<size_t>(reinterpret_cast<char*>(&testbool_) -
    reinterpret_cast<char*>(&testint_)) + sizeof(testbool_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.C_Test)
}

inline void C_Test::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&testint_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&testbool_) -
    reinterpret_cast<char*>(&testint_)) + sizeof(testbool_));
}

C_Test::~C_Test() {
  // @@protoc_insertion_point(destructor:PROTOCOL.C_Test)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void C_Test::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Test::ArenaDtor(void* object) {
  C_Test* _this = reinterpret_cast< C_Test* >(object);
  (void)_this;
}
void C_Test::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Test::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Test::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.C_Test)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&testint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&testbool_) -
      reinterpret_cast<char*>(&testint_)) + sizeof(testbool_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Test::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 testint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          testint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool testbool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          testbool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Test::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.C_Test)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 testint = 1;
  if (this->_internal_testint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_testint(), target);
  }

  // bool testbool = 2;
  if (this->_internal_testbool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_testbool(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.C_Test)
  return target;
}

size_t C_Test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.C_Test)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 testint = 1;
  if (this->_internal_testint() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_testint());
  }

  // bool testbool = 2;
  if (this->_internal_testbool() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Test::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Test::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Test::GetClassData() const { return &_class_data_; }

void C_Test::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Test *>(to)->MergeFrom(
      static_cast<const C_Test &>(from));
}


void C_Test::MergeFrom(const C_Test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.C_Test)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_testint() != 0) {
    _internal_set_testint(from._internal_testint());
  }
  if (from._internal_testbool() != 0) {
    _internal_set_testbool(from._internal_testbool());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Test::CopyFrom(const C_Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.C_Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Test::IsInitialized() const {
  return true;
}

void C_Test::InternalSwap(C_Test* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Test, testbool_)
      + sizeof(C_Test::testbool_)
      - PROTOBUF_FIELD_OFFSET(C_Test, testint_)>(
          reinterpret_cast<char*>(&testint_),
          reinterpret_cast<char*>(&other->testint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Test::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[47]);
}

// ===================================================================

class S_Test::_Internal {
 public:
};

S_Test::S_Test(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PROTOCOL.S_Test)
}
S_Test::S_Test(const S_Test& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&testint_, &from.testint_,
    static_cast<size_t>(reinterpret_cast<char*>(&testbool_) -
    reinterpret_cast<char*>(&testint_)) + sizeof(testbool_));
  // @@protoc_insertion_point(copy_constructor:PROTOCOL.S_Test)
}

inline void S_Test::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&testint_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&testbool_) -
    reinterpret_cast<char*>(&testint_)) + sizeof(testbool_));
}

S_Test::~S_Test() {
  // @@protoc_insertion_point(destructor:PROTOCOL.S_Test)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void S_Test::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Test::ArenaDtor(void* object) {
  S_Test* _this = reinterpret_cast< S_Test* >(object);
  (void)_this;
}
void S_Test::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Test::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Test::Clear() {
// @@protoc_insertion_point(message_clear_start:PROTOCOL.S_Test)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&testint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&testbool_) -
      reinterpret_cast<char*>(&testint_)) + sizeof(testbool_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Test::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 testint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          testint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool testbool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          testbool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Test::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PROTOCOL.S_Test)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 testint = 1;
  if (this->_internal_testint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_testint(), target);
  }

  // bool testbool = 2;
  if (this->_internal_testbool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_testbool(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PROTOCOL.S_Test)
  return target;
}

size_t S_Test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PROTOCOL.S_Test)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 testint = 1;
  if (this->_internal_testint() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_testint());
  }

  // bool testbool = 2;
  if (this->_internal_testbool() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Test::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Test::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Test::GetClassData() const { return &_class_data_; }

void S_Test::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Test *>(to)->MergeFrom(
      static_cast<const S_Test &>(from));
}


void S_Test::MergeFrom(const S_Test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PROTOCOL.S_Test)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_testint() != 0) {
    _internal_set_testint(from._internal_testint());
  }
  if (from._internal_testbool() != 0) {
    _internal_set_testbool(from._internal_testbool());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Test::CopyFrom(const S_Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PROTOCOL.S_Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Test::IsInitialized() const {
  return true;
}

void S_Test::InternalSwap(S_Test* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Test, testbool_)
      + sizeof(S_Test::testbool_)
      - PROTOBUF_FIELD_OFFSET(S_Test, testint_)>(
          reinterpret_cast<char*>(&testint_),
          reinterpret_cast<char*>(&other->testint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Test::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol3_2eproto_getter, &descriptor_table_Protocol3_2eproto_once,
      file_level_metadata_Protocol3_2eproto[48]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PROTOCOL
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PROTOCOL::Position* Arena::CreateMaybeMessage< ::PROTOCOL::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::Stat* Arena::CreateMaybeMessage< ::PROTOCOL::Stat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::Stat >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::ObjectInfo* Arena::CreateMaybeMessage< ::PROTOCOL::ObjectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::ObjectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::LobbyPlayerInfo* Arena::CreateMaybeMessage< ::PROTOCOL::LobbyPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::LobbyPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::Skill* Arena::CreateMaybeMessage< ::PROTOCOL::Skill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::Skill >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::ItemInfo* Arena::CreateMaybeMessage< ::PROTOCOL::ItemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::ItemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::QuestInfo* Arena::CreateMaybeMessage< ::PROTOCOL::QuestInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::QuestInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_Login* Arena::CreateMaybeMessage< ::PROTOCOL::C_Login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_Login >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_Login* Arena::CreateMaybeMessage< ::PROTOCOL::S_Login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_Login >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_Enter_Room* Arena::CreateMaybeMessage< ::PROTOCOL::C_Enter_Room >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_Enter_Room >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_Enter_Room* Arena::CreateMaybeMessage< ::PROTOCOL::S_Enter_Room >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_Enter_Room >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_Leave_Room* Arena::CreateMaybeMessage< ::PROTOCOL::C_Leave_Room >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_Leave_Room >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_Leave_Room* Arena::CreateMaybeMessage< ::PROTOCOL::S_Leave_Room >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_Leave_Room >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_Spawn* Arena::CreateMaybeMessage< ::PROTOCOL::C_Spawn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_Spawn >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_Spawn* Arena::CreateMaybeMessage< ::PROTOCOL::S_Spawn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_Spawn >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_DeSpawn* Arena::CreateMaybeMessage< ::PROTOCOL::S_DeSpawn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_DeSpawn >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_Move* Arena::CreateMaybeMessage< ::PROTOCOL::C_Move >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_Move >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_Move* Arena::CreateMaybeMessage< ::PROTOCOL::S_Move >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_Move >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_Skill* Arena::CreateMaybeMessage< ::PROTOCOL::C_Skill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_Skill >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_Skill* Arena::CreateMaybeMessage< ::PROTOCOL::S_Skill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_Skill >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_Chat* Arena::CreateMaybeMessage< ::PROTOCOL::C_Chat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_Chat >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_Chat* Arena::CreateMaybeMessage< ::PROTOCOL::S_Chat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_Chat >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_ChangeHp* Arena::CreateMaybeMessage< ::PROTOCOL::S_ChangeHp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_ChangeHp >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_Die* Arena::CreateMaybeMessage< ::PROTOCOL::S_Die >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_Die >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_ItemList* Arena::CreateMaybeMessage< ::PROTOCOL::S_ItemList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_ItemList >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_AddItem* Arena::CreateMaybeMessage< ::PROTOCOL::C_AddItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_AddItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_AddItem* Arena::CreateMaybeMessage< ::PROTOCOL::S_AddItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_AddItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_UpdateItem* Arena::CreateMaybeMessage< ::PROTOCOL::S_UpdateItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_UpdateItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_RemoveItem* Arena::CreateMaybeMessage< ::PROTOCOL::S_RemoveItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_RemoveItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_EquipItem* Arena::CreateMaybeMessage< ::PROTOCOL::C_EquipItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_EquipItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_EquipItem* Arena::CreateMaybeMessage< ::PROTOCOL::S_EquipItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_EquipItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_UseItem* Arena::CreateMaybeMessage< ::PROTOCOL::C_UseItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_UseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_UseItem* Arena::CreateMaybeMessage< ::PROTOCOL::S_UseItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_UseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_ChangeStat* Arena::CreateMaybeMessage< ::PROTOCOL::S_ChangeStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_ChangeStat >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_CreatePlayer* Arena::CreateMaybeMessage< ::PROTOCOL::C_CreatePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_CreatePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_CreatePlayer* Arena::CreateMaybeMessage< ::PROTOCOL::S_CreatePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_CreatePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_AddExp* Arena::CreateMaybeMessage< ::PROTOCOL::S_AddExp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_AddExp >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_LevelUp* Arena::CreateMaybeMessage< ::PROTOCOL::S_LevelUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_LevelUp >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_AddQuest* Arena::CreateMaybeMessage< ::PROTOCOL::C_AddQuest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_AddQuest >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_AddQuest* Arena::CreateMaybeMessage< ::PROTOCOL::S_AddQuest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_AddQuest >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_QuestList* Arena::CreateMaybeMessage< ::PROTOCOL::S_QuestList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_QuestList >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_RemoveQuest* Arena::CreateMaybeMessage< ::PROTOCOL::C_RemoveQuest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_RemoveQuest >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_RemoveQuest* Arena::CreateMaybeMessage< ::PROTOCOL::S_RemoveQuest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_RemoveQuest >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_CompleteQuest* Arena::CreateMaybeMessage< ::PROTOCOL::C_CompleteQuest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_CompleteQuest >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_CompleteQuest* Arena::CreateMaybeMessage< ::PROTOCOL::S_CompleteQuest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_CompleteQuest >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_UpdateQuest* Arena::CreateMaybeMessage< ::PROTOCOL::C_UpdateQuest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_UpdateQuest >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_UpdateQuest* Arena::CreateMaybeMessage< ::PROTOCOL::S_UpdateQuest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_UpdateQuest >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::C_Test* Arena::CreateMaybeMessage< ::PROTOCOL::C_Test >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::C_Test >(arena);
}
template<> PROTOBUF_NOINLINE ::PROTOCOL::S_Test* Arena::CreateMaybeMessage< ::PROTOCOL::S_Test >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PROTOCOL::S_Test >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
